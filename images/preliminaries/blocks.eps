%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: blocks.eps
%%Creator: Adobe Illustrator(R) 14.0
%%For: Alex Bowe
%%CreationDate: 30/10/10
%%BoundingBox: 0 0 440 72
%%HiResBoundingBox: 0 0 440 71.2842
%%CropBox: 0 0 440 71.2842
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 14.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 14.0.0 x367 R agm 4.4890 ct 5.1541%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 24 8%%BeginData: 3820 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45A87DFD08FFA8FFA8FD04FFA8FD16FFA8A8FD21FF7DA8FD21FF7DA8%FD10FF2752527DFD0652277D527D527DFD0552FD13FF2752FD20FFA82752%FD21FFF87DA8FD0FFF7D52522752275227277D5227525252277D27522727%FD13FF52527D7DFD1FFF527D52FD1FFFA8527D7D7DFD0EFFFD04A85252A8%A8A8FF7DA8A8A87DA87DA87DA87DFD13FFA8FF2752FD1EFFA8FFFF527DFD%1FFFA8FF277DFD38FFA8A8FD21FF7DA8FD21FF7DA8FD27FFA87DA8A8A87D%A8A8A87DA8A8A87DFD07A87DA8A8A87DA8A8A87DA8A8A87DA87DA87DA8A8%A87DA8A8A87DA8A8A87DFD07A87DA8A8A87DA8A8A87DA8A8A87DA8A8A87D%A8A8A87DA8A8A87DA8A8A87DA8A8A87DA8A8A87DA8A8A87DA8A8A87DA8FD%19FFA8A8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FF7DFFFFFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFFFFFA8FFA8FF%A8FFA8FFA8FFA8FFA8FF7DA8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%FFFFA8FFA8FFA8FFA8FFA8FFA8FF7DFD19FFA8A8FD20FFA8A8FD20FFA8A8%FD20FFA8FD19FFA8FD21FFA8FD21FFA8FD21FFA8FDFCFFFD0EFFA8FFA8FD%0CFFA87DA8A8A87DA8A8A87DA87D7D7DA87DA87DA87DA87DA87DA87DA87D%A87DA87DA87D7D7DA87DFD07A87D7D7DA87DA87DA87DA87DA87DA87DA87D%A87DA87DA87D7D7DA8A8A87DA87DA87DA87D7D7DA87DA87DA87DA87DA87D%A87DA87DA87DA87DA87DA8FD09FF7D52527D7DA8A8A852A87DA8FD04FFA8%7D52A852A87DFF52A852FF52FD057DA87DA87D52A87DFF7D7D7DA87D7DA8%FD047DFF52A852A852A852A8FD047DA8FD067DA8527D7DA8FD097DFF52A8%7DFF52FF52FD077DA8FD057D52A87D7D7DA8A87DA87D7DFD09FF7D275227%52275252FD0427FD04FFA8FD04527D7D7D527D7DA8FD04527D52FF527D52%52FD047D527D7DA8527D27FD047DFD08527D52A852A8525252FD047D5252%7D7D7D5252527D52A87D7D7D527D7DA8527D52527D5252527D527D52FD07%7D52A87DA8527D277DFD09FFA852FD087D527DFD04FFA8A87DA87DA852A8%7DA852A87D7DA87DA8FD047DA87DA87DA87DA8FD047DA87D7DA852A87DFF%7DA852FF7DA87D7DA87D7D7DA87D7DA87DA87DA87D7D7DA8A87DA87D7DA8%52A87DA852A852A87DA87D7DA87DA87D7DA8A8A852A87D7D7DA8A87DA87D%A87D7DFD0AFFA8FD05FFA8FD08FFFD04A8FFA8A8A8FFA8A87D7DFD0AA852%FFFD09A87D7DFFA8A8A8FFA8A8A8FF7D7DFD05A8FFFD04A852FD06A8FFA8%A8A87D7DA8A8FFFD05A8FF7D7DA8A8A8FFA8A8A8FFA8A852FD0AA87DFD1A%FFA8A8FFA8A8A8FFFD07A8FFA8A8A8FFFD07A8FFA8A8A8FFFD07A8FFFD07%A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FF%FD07A8FFA8A8A8FFFD07A8FFA8A8A8FFA8A8A8FDA7FFA8FD71FFA827FD04%FF7D52FF527DFFFFFF7D7DFD70FFA8277DA827A87D52FF7DA8A827A8A852%FD71FF27A8A87DA8A8527D7DFFA87DA8A852FD78FFA8FD05FFA8FDD7FFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.2-c063 53.352624, 2008/07/30-18:05:41        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreatorTool>Adobe Illustrator CS4</xmp:CreatorTool>
         <xmp:CreateDate>2010-10-30T19:17:28+11:00</xmp:CreateDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>44</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgALAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8Ammnad+e+ifW3soL285TI&#xA;Jhc3NtcPKeNyC8P1m4lQjk8BZlW3HEUEXXFVKLXP+cidRj1L9Gq3+iSm1uGaLTwyPHJBX6mrlRI/&#xA;FpvU9U8KceBriqvd2n/ORRm0vUzJO+oRm5hlsYDYR2aFha+k86l/3kUjerUgs6AfBQmpVVrFP+ch&#xA;dPtRbW0Jl9K2mMf1l7SZSCJWBMkknrG79YoIwx9D0/tb4qpyxf8AOQ0Goajd2iXEkF3ZItq07WDT&#xA;JPE85j5W/qfVkdoGHqGOgMvA7oGXFXqvkiTzPJ5U05/NEXo68Yz9djrGxDB2CljCBHyKcS3EUriq&#xA;eYq7FXYq7FXiejeYPPn5eWNtb+aV/SN3rd+Gja71CaeRY1FvFLFCziVGmkklZooo+CEA/CnTFXtm&#xA;KuxV2KuxV2KuxV2Ksa/MXTvMOo+Uruy8vvJHqczwcHhuGtJBGsyNJxmQq4qikEK6kjYMp3CqU+Qt&#xA;d1u31KPyVrz20upaVo9hcS3Ud3JdXE0rqY5/WEqhwVeOv2nLKQxO9MVZ3irsVdirsVdirsVdirAf&#xA;zA0PzxqHmny3eaHcyW2kabOk+qUvZbaKRFuIpJFkiiKep+5idRz5p8RBUfaCqY/lr52m84aLdak8&#xA;dsqQXj2sMtnK00MqLHG/NGdInoGkKVKjlx5r8LLirLcVdirsVdirsVdirsVdirsVSW4XULvX7m0i&#xA;1Geyt7e0tpVSBbc8nmkuFYsZopT0iWlMVVf0NqP/AFfr7/gLH/smxV36G1H/AKv19/wFj/2TYq79&#xA;Daj/ANX6+/4Cx/7JsVWSaBdylDJrV45jbnGWjsDxYAjktbXY0PXFV/6G1H/q/X3/AAFj/wBk2Ku/&#xA;Q2o/9X6+/wCAsf8AsmxV36G1H/q/X3/AWP8A2TYqgddstXsdE1C9h129M1rbTTRco7EryjjLLUfV&#xA;htUYqjv0NqP/AFfr7/gLH/smxV36G1H/AKv19/wFj/2TYq79Daj/ANX6+/4Cx/7JsVd+htR/6v19&#xA;/wABY/8AZNiqmPLtyJzONYuxOwo0oisOZHShb6rXtiqp+htR/wCr9ff8BY/9k2Ku/Q2o/wDV+vv+&#xA;Asf+ybFXfobUf+r9ff8AAWP/AGTYqgYbLV31u7sjrt76MFtbTJ+7seXKaSdWqfq3SkK0xVHfobUf&#xA;+r9ff8BY/wDZNirv0NqP/V+vv+Asf+ybFXfobUf+r9ff8BY/9k2KuOi6iRQ67fEHqOFj/wBk2Kqc&#xA;Hl65gQpBrN5EhNSqRWCivStBa4qqfobUf+r9ff8AAWP/AGTYq79Daj/1fr7/AICx/wCybFUDrtlq&#xA;9jomoXsOu3pmtbaaaLlHYleUcZZaj6sNqjFWR4q7FWOeYfzB8reXtTg03VbiWG5njWYFLeeWJI3l&#xA;EKvLLEjpEpkPGrkYqr6b548o6jAkttq1t+8gkuxFLIsUot4XZJJmikKusashqxFMVU4fzA8kzT3E&#xA;Sa3Z0toYriSZpkWAxTLI6OkzERuOMDseLGgG9MVTu0vLS9toruznjubWZQ8M8LLJG6noyspII+WK&#xA;sd81+fdN8tTFb9VSBViZriSQIvKb1iFAAZjxS1kdzSiqCx2Boql8n5qaVHc3ds8cYmsriGzuUE1e&#xA;M9xK0ESVCUassbpVagMpBoRirV7+auk2M2ow3SRxyaSUGoL63L0/UNB9lDyoSA3GvE/apiq+b8zb&#xA;a31ttEu7QW2o/WRaRRSTp+8kMEM9QwUhV43KKCxFW2G+KtaZ+aWmapJYR2ESTvqk0ttYKJqepLBB&#xA;9ZkUckFP3H7wE7MpBWtRiq3/AJWrpP1K0vSkYtr66axtZDNTlOknpOvEpyUK/wALMwCjbffFXWn5&#xA;p2NxYyXhtRAsFhb6pdRyzKGitrtOcLNRSCW6cVJNdsVX235nafdV9CFZCLI6mQJf+PRWCtJ9jsxo&#xA;V+0DtTFUNf8A5vaTZ2dvcmBZPruntq1jEkw5zWoge4VlqoCmSKFyiuQW4tT7JoqiL380dMsrO/vb&#xA;qJIrbTLxtOvnM393dJGJmi4hOTcYm5kqCAtTWgOKqd5+bWi2b6hHcCJX0z0xeKs/MgytxQIERvUP&#xA;IUIj5UOxpirpPzX00XMtrDBHcXMLWgljiuUIC3ssMUbhyAjKPrUTPxY8Qwr1GKr9M/NTStUl0+Kw&#xA;jSeTVJZYLFVmoZJIIjPIu6Dj+6HMcqcl3FQRiqjF+cGgTRwSRNC6XN0LKFhOKNMwjZf2NkInjIkP&#xA;wEMu+4xVdJ+bGnpElx9VraNJcwyXPrAKkloAZUYMoYt8QChQanYYqrQfmhpk9vLcxRxm3hsRqksp&#xA;nCqtof8AdhJQdKbr9odxiqlF+bGjSvbRosZkvIJLqBPWoxjhEpk5ApVWH1Wb4Go37t9vhaircX5p&#xA;2MptWW0/0e+WwayufVHCY6pLLDaqvw8gXe3b7QAG2KuuPzW0i2nvoJkjWXTpY4LxfWrwkmcxoNkI&#xA;b40KkrUKRQ0OKq93+ZVlafpP6xbrGdHaGPUV9arRvctwgQAITI0jfCoSpJ2xVDQfmzpkt9BZegiy&#xA;3k0cFgfrCFZzLBb3COjKpARlvYlVmpVmCjcjFV+n/mtpGovZpYpHO2oXD2lmFm/vJo4lnKiqbVhk&#xA;WRWOzKQVJBGKt2f5qaTeSRx2qRyvLefo6ILP9q5Kcwg+Doy7q/2T2OKrLL81rC6guJWtRbmztmvr&#xA;tJp1Ux26uU9QnjxPxL0BJxVXs/zLsb0VtrdZP9Dk1LaWhFrE/pyOQUFCj/CyfaB6jFVG4/NbS4Yb&#xA;GUwq/wCk7L9JacizDlNbek06utVAXnGjFA5BNDTocVZzirsVYR53/KXQPOGs2+qajczxSW9uLX04&#xA;ktmrGJfWqkk0MssL8v24mVqd8VSWT/nHryfIjRPe35hZWb0ucFBcmN4VuQxh5c0ilKhK+mdiVJ3x&#xA;V13/AM49eVLq6ubyXUdQN7e27W13MDagSB5XuGcxCARBvrDLLsuxUU71VZ35T8tWnlny9Z6HaTTX&#xA;FvZqyrPcsHlcu7SMWYBR9pz0GKsb89eTI/MGoP8AWra/ktWt4o0n02W1ikoUu4LmGT6yy/BLBeFa&#xA;qOQ6qysAcVSm7/LuGYap6Fv5gs21S5S6doZdHYw8LyXUfShExlUI15cPK3IM1fh5cPhxVvUPy8jv&#xA;v0wXh8wxPrMbQzukujExRysr3KwCQuq/WHjVpKg7/Y4jFVp8hyXvmO51nVtN1eZzdQyoqTaaq3Uc&#xA;NraIhu1WRaOlxaNIPRKDffb4Qqu0z8vhpiaOtlH5hjOj3o1BXMmiu1xKlkumxrOW5fAlknoj0+Bo&#xA;SxJejBVb/wAq5ikhiivIvMN6Y724vmkll0VGk+tyLNcQP6PpD0pJY1c0AYEUDBdsVU9P8hag2nW6&#xA;ajFriXB0Wy0e5trWXSBbxmyQFJYHY+vySblIpZyCTuvH4cVR1j5Nu9Pvba7sP8Q20lrZXFjGFbQn&#xA;H+lyetNcN6gcmVpwJOvCo+zxqpVSa+/K0DQY7O0s9bubuw0c6Rp4vJtKEUghguoLFrj0GjJNul/K&#xA;ilKVBq4dgDiqZal5AOpNq7XSeYi2rX/6SJSXRUNvK1mdOdbdloQr2TegeZY8RyBD1YqrLr8tdNml&#xA;vZo9P162kupUmtmhn0v/AERllMzi35yPtLIzF/V59dqbUVUb38uLZOTWGi6o6O9lElhcT6ebaC1h&#xA;ubF7pYaTepymi02OvJyOS7canFUXp/kSSwbR2tx5iro99+klLy6K5uJvqv1ELOWqeC2lYQI+Gx5V&#xA;50YKoWy/KzSbS1tLaPT9fZLWRKlrjS6y20UdvFHZS0kAMCJYwj4QH+HdzVqqqd5+XmoT3KpJFrd3&#xA;aXFzdX1zNPJo6zwXMwQxyWvo+mlVljVqShht33BVRx8hgwfVRD5gWw/R0ul/U1l0YLwnPJ5vUB9b&#xA;1fVpJUPx5D7PH4cVatPy+tbS/t9Qt7PXkvLcSSGX1dJPqXkjXbfXpELFDOr6lOwAAjqwqh4rRVCW&#xA;nkDVra3/AEXC2vQ6fbwaWlpeo+hteF9Murq5RJA6tB6avPEVIj5HjRjSvJVE3/5ex3Y1XjD5htm1&#xA;Zw0jRS6OxhUztdSxwCUyhVluHMj8gTXZSF2xVXvfJd1e3t/e3J8xPcXwsSHD6GvoS6bKJreaLiB8&#xA;QflUPyU8j8P2aKoCw/La3ivUMuj6rHp9hPaiwsop9PMc1rZ2unpBHdh5mJMdxpqyLwZfckEriqvp&#xA;/wCXaadFp0dnH5ij/R17Hfq5l0WRpmt7VLKCKUycv3cVrH6a8OLGpZiz/FirVt+XMVpBDDYxeYbU&#xA;QXsN9G6S6K7D6svC3g/e+oPShUkL+0f2mY4qh7H8vr+WzI1WDW1klsZdOls7aXSBbpG8zTJJGzn1&#xA;/USQiQEvTkOhXbFU1svKd9YXFlNZHzDbmxtLu0jQNoTKz37+tPcvzDn1WnCSihEYKgcOJZWVSl/y&#xA;wij0uxtYbTXLiXS9OXTbMXU2lCOVLaKeOw+s+g0bN9VF3JwKUrWr82FcVetYq7FXYq7FXYq7FWC+&#xA;d/zEvPLPnHy3oy21tc2muBo5EkmaG69Q3tnaobZeLrMUW7eSSOi/ArNyHGjKu1j8yLyOPzNaWOha&#xA;hZX2iWN5cWeq6xAtro889utIlF280a8JHINSyjjU1GKoG1/MjVtS0TyhNo0lheX2uarFp+qySo0S&#xA;28XoTXkpWCCe8o729ufSPrsjclcFkauKphefmLcSReYoLfSNR0abRIZ5U1fWLNI9Nm+rvxPoyy3V&#xA;nHIHG6F5o1puWAxVO/IfmKXzJ5N0fXJlRLm+tY5LpIa+kJ6cZhESW5R+oG4MGYMtCGINSqnuKuxV&#xA;2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KoWz/Rn1i+&#xA;+p+h9Y9cfpL0eHP6x6MfH1+O/qeh6VOW/Dj2piqKxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kux&#xA;V2KuxV2KuxV2KuxV2KuxV//Z</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>612.000000</stDim:w>
            <stDim:h>792.000000</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:Fonts>
            <rdf:Bag>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>Helvetica-Bold</stFnt:fontName>
                  <stFnt:fontFamily>Helvetica</stFnt:fontFamily>
                  <stFnt:fontFace>Bold</stFnt:fontFace>
                  <stFnt:fontType>TrueType</stFnt:fontType>
                  <stFnt:versionString>6.1d18e1</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Helvetica.dfont</stFnt:fontFileName>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>MyriadPro-Regular</stFnt:fontName>
                  <stFnt:fontFamily>Myriad Pro</stFnt:fontFamily>
                  <stFnt:fontFace>Regular</stFnt:fontFace>
                  <stFnt:fontType>Open Type</stFnt:fontType>
                  <stFnt:versionString>Version 2.037;PS 2.000;hotconv 1.0.51;makeotf.lib2.0.18671</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>MyriadPro-Regular.otf</stFnt:fontFileName>
               </rdf:li>
            </rdf:Bag>
         </xmpTPg:Fonts>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -71.2842 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 71.2842 li
440 71.2842 li
440 0 li
cp
clp
[1 0 0 1 0 0 ]ct
1 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
400.5 36.1182 mo
439.5 36.1182 li
439.5 50.1182 li
400.5 50.1182 li
400.5 36.1182 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
.75021 .679683 .670222 .90164 cmyk
@
435.817 42.9775 mo
435.817 43.6416 435.644 44.1982 435.296 44.6475 cv
435.065 44.9443 434.771 45.0928 434.411 45.0928 cv
434.032 45.0928 433.741 44.958 433.538 44.6885 cv
433.171 44.2041 432.987 43.6338 432.987 42.9775 cv
432.987 41.6592 li
432.987 40.9951 433.161 40.4385 433.509 39.9893 cv
433.739 39.6924 434.036 39.5439 434.399 39.5439 cv
434.774 39.5439 435.065 39.6787 435.272 39.9482 cv
435.636 40.4365 435.817 41.0068 435.817 41.6592 cv
435.817 42.9775 li
435.817 42.9775 li
cp
436.57 39.834 mo
436.268 39.2617 435.949 38.8701 435.615 38.6592 cv
435.281 38.4482 434.874 38.3428 434.394 38.3428 cv
433.554 38.3428 432.909 38.7012 432.46 39.418 cv
432.011 40.1348 431.786 40.8818 431.786 41.6592 cv
431.786 42.9775 li
431.786 43.6182 431.936 44.2246 432.234 44.7969 cv
432.533 45.3691 432.85 45.7617 433.184 45.9746 cv
433.518 46.1875 433.927 46.2939 434.411 46.2939 cv
435.251 46.2939 435.896 45.9365 436.348 45.2217 cv
436.799 44.5068 437.024 43.7588 437.024 42.9775 cv
437.024 41.6592 li
437.024 41.0146 436.873 40.4063 436.57 39.834 cv
436.57 39.834 li
cp
425.229 39.0107 mo
424.968 39.0811 424.796 39.1621 424.714 39.2539 cv
424.632 39.3457 424.591 39.4717 424.591 39.6318 cv
424.591 39.8076 424.646 39.9561 424.758 40.0771 cv
424.869 40.1982 425.001 40.2588 425.153 40.2588 cv
425.239 40.2588 425.368 40.2354 425.54 40.1885 cv
426.612 39.9072 li
426.612 44.917 li
425.399 44.917 li
425.11 44.917 424.904 44.9727 424.781 45.084 cv
424.658 45.1953 424.597 45.3389 424.597 45.5146 cv
424.597 45.6943 424.658 45.8398 424.781 45.9512 cv
424.904 46.0625 425.11 46.1182 425.399 46.1182 cv
429.026 46.1182 li
429.315 46.1182 429.521 46.0625 429.645 45.9512 cv
429.768 45.8398 429.829 45.6963 429.829 45.5205 cv
429.829 45.3408 429.768 45.1953 429.645 45.084 cv
429.521 44.9727 429.315 44.917 429.026 44.917 cv
427.813 44.917 li
427.813 38.3428 li
425.229 39.0107 li
425.229 39.0107 li
cp
418.028 39.0107 mo
417.767 39.0811 417.595 39.1621 417.513 39.2539 cv
417.431 39.3457 417.39 39.4717 417.39 39.6318 cv
417.39 39.8076 417.445 39.9561 417.557 40.0771 cv
417.668 40.1982 417.8 40.2588 417.952 40.2588 cv
418.038 40.2588 418.167 40.2354 418.339 40.1885 cv
419.411 39.9072 li
419.411 44.917 li
418.198 44.917 li
417.909 44.917 417.703 44.9727 417.58 45.084 cv
417.457 45.1953 417.396 45.3389 417.396 45.5146 cv
417.396 45.6943 417.457 45.8398 417.58 45.9512 cv
417.703 46.0625 417.909 46.1182 418.198 46.1182 cv
421.825 46.1182 li
422.114 46.1182 422.32 46.0625 422.443 45.9512 cv
422.566 45.8398 422.628 45.6963 422.628 45.5205 cv
422.628 45.3408 422.566 45.1953 422.443 45.084 cv
422.32 44.9727 422.114 44.917 421.825 44.917 cv
420.612 44.917 li
420.612 38.3428 li
418.028 39.0107 li
418.028 39.0107 li
cp
414.214 42.9775 mo
414.214 43.6416 414.04 44.1982 413.692 44.6475 cv
413.462 44.9443 413.167 45.0928 412.808 45.0928 cv
412.429 45.0928 412.138 44.958 411.935 44.6885 cv
411.567 44.2041 411.384 43.6338 411.384 42.9775 cv
411.384 41.6592 li
411.384 40.9951 411.558 40.4385 411.905 39.9893 cv
412.136 39.6924 412.433 39.5439 412.796 39.5439 cv
413.171 39.5439 413.462 39.6787 413.669 39.9482 cv
414.032 40.4365 414.214 41.0068 414.214 41.6592 cv
414.214 42.9775 li
414.214 42.9775 li
cp
414.967 39.834 mo
414.664 39.2617 414.346 38.8701 414.012 38.6592 cv
413.678 38.4482 413.271 38.3428 412.79 38.3428 cv
411.95 38.3428 411.306 38.7012 410.856 39.418 cv
410.407 40.1348 410.183 40.8818 410.183 41.6592 cv
410.183 42.9775 li
410.183 43.6182 410.332 44.2246 410.631 44.7969 cv
410.93 45.3691 411.246 45.7617 411.58 45.9746 cv
411.914 46.1875 412.323 46.2939 412.808 46.2939 cv
413.647 46.2939 414.293 45.9365 414.744 45.2217 cv
415.195 44.5068 415.421 43.7588 415.421 42.9775 cv
415.421 41.6592 li
415.421 41.0146 415.27 40.4063 414.967 39.834 cv
414.967 39.834 li
cp
403.626 39.0107 mo
403.364 39.0811 403.192 39.1621 403.11 39.2539 cv
403.028 39.3457 402.987 39.4717 402.987 39.6318 cv
402.987 39.8076 403.043 39.9561 403.154 40.0771 cv
403.266 40.1982 403.397 40.2588 403.55 40.2588 cv
403.636 40.2588 403.765 40.2354 403.937 40.1885 cv
405.009 39.9072 li
405.009 44.917 li
403.796 44.917 li
403.507 44.917 403.301 44.9727 403.178 45.084 cv
403.055 45.1953 402.993 45.3389 402.993 45.5146 cv
402.993 45.6943 403.055 45.8398 403.178 45.9512 cv
403.301 46.0625 403.507 46.1182 403.796 46.1182 cv
407.423 46.1182 li
407.712 46.1182 407.918 46.0625 408.041 45.9512 cv
408.164 45.8398 408.226 45.6963 408.226 45.5205 cv
408.226 45.3408 408.164 45.1953 408.041 45.084 cv
407.918 44.9727 407.712 44.917 407.423 44.917 cv
406.21 44.917 li
406.21 38.3428 li
403.626 39.0107 li
403.626 39.0107 li
cp
f
361.5 36.1182 mo
400.5 36.1182 li
400.5 50.1182 li
361.5 50.1182 li
361.5 36.1182 li
cp
@
393.431 39.0107 mo
393.169 39.0811 392.997 39.1621 392.915 39.2539 cv
392.833 39.3457 392.792 39.4717 392.792 39.6318 cv
392.792 39.8076 392.848 39.9561 392.959 40.0771 cv
393.07 40.1982 393.202 40.2588 393.354 40.2588 cv
393.44 40.2588 393.569 40.2354 393.741 40.1885 cv
394.813 39.9072 li
394.813 44.917 li
393.601 44.917 li
393.312 44.917 393.105 44.9727 392.982 45.084 cv
392.859 45.1953 392.798 45.3389 392.798 45.5146 cv
392.798 45.6943 392.859 45.8398 392.982 45.9512 cv
393.105 46.0625 393.312 46.1182 393.601 46.1182 cv
397.228 46.1182 li
397.517 46.1182 397.723 46.0625 397.846 45.9512 cv
397.969 45.8398 398.03 45.6963 398.03 45.5205 cv
398.03 45.3408 397.969 45.1953 397.846 45.084 cv
397.723 44.9727 397.517 44.917 397.228 44.917 cv
396.015 44.917 li
396.015 38.3428 li
393.431 39.0107 li
393.431 39.0107 li
cp
389.616 42.9775 mo
389.616 43.6416 389.442 44.1982 389.095 44.6475 cv
388.864 44.9443 388.569 45.0928 388.21 45.0928 cv
387.831 45.0928 387.54 44.958 387.337 44.6885 cv
386.97 44.2041 386.786 43.6338 386.786 42.9775 cv
386.786 41.6592 li
386.786 40.9951 386.96 40.4385 387.308 39.9893 cv
387.538 39.6924 387.835 39.5439 388.198 39.5439 cv
388.573 39.5439 388.864 39.6787 389.071 39.9482 cv
389.435 40.4365 389.616 41.0068 389.616 41.6592 cv
389.616 42.9775 li
389.616 42.9775 li
cp
390.369 39.834 mo
390.066 39.2617 389.748 38.8701 389.414 38.6592 cv
389.08 38.4482 388.673 38.3428 388.192 38.3428 cv
387.353 38.3428 386.708 38.7012 386.259 39.418 cv
385.81 40.1348 385.585 40.8818 385.585 41.6592 cv
385.585 42.9775 li
385.585 43.6182 385.734 44.2246 386.033 44.7969 cv
386.332 45.3691 386.648 45.7617 386.982 45.9746 cv
387.316 46.1875 387.726 46.2939 388.21 46.2939 cv
389.05 46.2939 389.695 45.9365 390.146 45.2217 cv
390.598 44.5068 390.823 43.7588 390.823 42.9775 cv
390.823 41.6592 li
390.823 41.0146 390.672 40.4063 390.369 39.834 cv
390.369 39.834 li
cp
379.028 39.0107 mo
378.767 39.0811 378.595 39.1621 378.513 39.2539 cv
378.431 39.3457 378.39 39.4717 378.39 39.6318 cv
378.39 39.8076 378.445 39.9561 378.557 40.0771 cv
378.668 40.1982 378.8 40.2588 378.952 40.2588 cv
379.038 40.2588 379.167 40.2354 379.339 40.1885 cv
380.411 39.9072 li
380.411 44.917 li
379.198 44.917 li
378.909 44.917 378.703 44.9727 378.58 45.084 cv
378.457 45.1953 378.396 45.3389 378.396 45.5146 cv
378.396 45.6943 378.457 45.8398 378.58 45.9512 cv
378.703 46.0625 378.909 46.1182 379.198 46.1182 cv
382.825 46.1182 li
383.114 46.1182 383.32 46.0625 383.443 45.9512 cv
383.566 45.8398 383.628 45.6963 383.628 45.5205 cv
383.628 45.3408 383.566 45.1953 383.443 45.084 cv
383.32 44.9727 383.114 44.917 382.825 44.917 cv
381.612 44.917 li
381.612 38.3428 li
379.028 39.0107 li
379.028 39.0107 li
cp
375.214 42.9775 mo
375.214 43.6416 375.04 44.1982 374.692 44.6475 cv
374.462 44.9443 374.167 45.0928 373.808 45.0928 cv
373.429 45.0928 373.138 44.958 372.935 44.6885 cv
372.567 44.2041 372.384 43.6338 372.384 42.9775 cv
372.384 41.6592 li
372.384 40.9951 372.558 40.4385 372.905 39.9893 cv
373.136 39.6924 373.433 39.5439 373.796 39.5439 cv
374.171 39.5439 374.462 39.6787 374.669 39.9482 cv
375.032 40.4365 375.214 41.0068 375.214 41.6592 cv
375.214 42.9775 li
375.214 42.9775 li
cp
375.967 39.834 mo
375.664 39.2617 375.346 38.8701 375.012 38.6592 cv
374.678 38.4482 374.271 38.3428 373.79 38.3428 cv
372.95 38.3428 372.306 38.7012 371.856 39.418 cv
371.407 40.1348 371.183 40.8818 371.183 41.6592 cv
371.183 42.9775 li
371.183 43.6182 371.332 44.2246 371.631 44.7969 cv
371.93 45.3691 372.246 45.7617 372.58 45.9746 cv
372.914 46.1875 373.323 46.2939 373.808 46.2939 cv
374.647 46.2939 375.293 45.9365 375.744 45.2217 cv
376.195 44.5068 376.421 43.7588 376.421 42.9775 cv
376.421 41.6592 li
376.421 41.0146 376.27 40.4063 375.967 39.834 cv
375.967 39.834 li
cp
368.013 42.9775 mo
368.013 43.6416 367.839 44.1982 367.491 44.6475 cv
367.261 44.9443 366.966 45.0928 366.606 45.0928 cv
366.228 45.0928 365.937 44.958 365.733 44.6885 cv
365.366 44.2041 365.183 43.6338 365.183 42.9775 cv
365.183 41.6592 li
365.183 40.9951 365.356 40.4385 365.704 39.9893 cv
365.935 39.6924 366.231 39.5439 366.595 39.5439 cv
366.97 39.5439 367.261 39.6787 367.468 39.9482 cv
367.831 40.4365 368.013 41.0068 368.013 41.6592 cv
368.013 42.9775 li
368.013 42.9775 li
cp
368.766 39.834 mo
368.463 39.2617 368.145 38.8701 367.811 38.6592 cv
367.477 38.4482 367.069 38.3428 366.589 38.3428 cv
365.749 38.3428 365.104 38.7012 364.655 39.418 cv
364.206 40.1348 363.981 40.8818 363.981 41.6592 cv
363.981 42.9775 li
363.981 43.6182 364.131 44.2246 364.43 44.7969 cv
364.729 45.3691 365.045 45.7617 365.379 45.9746 cv
365.713 46.1875 366.122 46.2939 366.606 46.2939 cv
367.446 46.2939 368.092 45.9365 368.543 45.2217 cv
368.994 44.5068 369.22 43.7588 369.22 42.9775 cv
369.22 41.6592 li
369.22 41.0146 369.068 40.4063 368.766 39.834 cv
368.766 39.834 li
cp
f
322.5 36.1182 mo
361.5 36.1182 li
361.5 50.1182 li
322.5 50.1182 li
322.5 36.1182 li
cp
@
357.817 42.9775 mo
357.817 43.6416 357.644 44.1982 357.296 44.6475 cv
357.065 44.9443 356.771 45.0928 356.411 45.0928 cv
356.032 45.0928 355.741 44.958 355.538 44.6885 cv
355.171 44.2041 354.987 43.6338 354.987 42.9775 cv
354.987 41.6592 li
354.987 40.9951 355.161 40.4385 355.509 39.9893 cv
355.739 39.6924 356.036 39.5439 356.399 39.5439 cv
356.774 39.5439 357.065 39.6787 357.272 39.9482 cv
357.636 40.4365 357.817 41.0068 357.817 41.6592 cv
357.817 42.9775 li
357.817 42.9775 li
cp
358.57 39.834 mo
358.268 39.2617 357.949 38.8701 357.615 38.6592 cv
357.281 38.4482 356.874 38.3428 356.394 38.3428 cv
355.554 38.3428 354.909 38.7012 354.46 39.418 cv
354.011 40.1348 353.786 40.8818 353.786 41.6592 cv
353.786 42.9775 li
353.786 43.6182 353.936 44.2246 354.234 44.7969 cv
354.533 45.3691 354.85 45.7617 355.184 45.9746 cv
355.518 46.1875 355.927 46.2939 356.411 46.2939 cv
357.251 46.2939 357.896 45.9365 358.348 45.2217 cv
358.799 44.5068 359.024 43.7588 359.024 42.9775 cv
359.024 41.6592 li
359.024 41.0146 358.873 40.4063 358.57 39.834 cv
358.57 39.834 li
cp
347.229 39.0107 mo
346.968 39.0811 346.796 39.1621 346.714 39.2539 cv
346.632 39.3457 346.591 39.4717 346.591 39.6318 cv
346.591 39.8076 346.646 39.9561 346.758 40.0771 cv
346.869 40.1982 347.001 40.2588 347.153 40.2588 cv
347.239 40.2588 347.368 40.2354 347.54 40.1885 cv
348.612 39.9072 li
348.612 44.917 li
347.399 44.917 li
347.11 44.917 346.904 44.9727 346.781 45.084 cv
346.658 45.1953 346.597 45.3389 346.597 45.5146 cv
346.597 45.6943 346.658 45.8398 346.781 45.9512 cv
346.904 46.0625 347.11 46.1182 347.399 46.1182 cv
351.026 46.1182 li
351.315 46.1182 351.521 46.0625 351.645 45.9512 cv
351.768 45.8398 351.829 45.6963 351.829 45.5205 cv
351.829 45.3408 351.768 45.1953 351.645 45.084 cv
351.521 44.9727 351.315 44.917 351.026 44.917 cv
349.813 44.917 li
349.813 38.3428 li
347.229 39.0107 li
347.229 39.0107 li
cp
340.028 39.0107 mo
339.767 39.0811 339.595 39.1621 339.513 39.2539 cv
339.431 39.3457 339.39 39.4717 339.39 39.6318 cv
339.39 39.8076 339.445 39.9561 339.557 40.0771 cv
339.668 40.1982 339.8 40.2588 339.952 40.2588 cv
340.038 40.2588 340.167 40.2354 340.339 40.1885 cv
341.411 39.9072 li
341.411 44.917 li
340.198 44.917 li
339.909 44.917 339.703 44.9727 339.58 45.084 cv
339.457 45.1953 339.396 45.3389 339.396 45.5146 cv
339.396 45.6943 339.457 45.8398 339.58 45.9512 cv
339.703 46.0625 339.909 46.1182 340.198 46.1182 cv
343.825 46.1182 li
344.114 46.1182 344.32 46.0625 344.443 45.9512 cv
344.566 45.8398 344.628 45.6963 344.628 45.5205 cv
344.628 45.3408 344.566 45.1953 344.443 45.084 cv
344.32 44.9727 344.114 44.917 343.825 44.917 cv
342.612 44.917 li
342.612 38.3428 li
340.028 39.0107 li
340.028 39.0107 li
cp
336.214 42.9775 mo
336.214 43.6416 336.04 44.1982 335.692 44.6475 cv
335.462 44.9443 335.167 45.0928 334.808 45.0928 cv
334.429 45.0928 334.138 44.958 333.935 44.6885 cv
333.567 44.2041 333.384 43.6338 333.384 42.9775 cv
333.384 41.6592 li
333.384 40.9951 333.558 40.4385 333.905 39.9893 cv
334.136 39.6924 334.433 39.5439 334.796 39.5439 cv
335.171 39.5439 335.462 39.6787 335.669 39.9482 cv
336.032 40.4365 336.214 41.0068 336.214 41.6592 cv
336.214 42.9775 li
336.214 42.9775 li
cp
336.967 39.834 mo
336.664 39.2617 336.346 38.8701 336.012 38.6592 cv
335.678 38.4482 335.271 38.3428 334.79 38.3428 cv
333.95 38.3428 333.306 38.7012 332.856 39.418 cv
332.407 40.1348 332.183 40.8818 332.183 41.6592 cv
332.183 42.9775 li
332.183 43.6182 332.332 44.2246 332.631 44.7969 cv
332.93 45.3691 333.246 45.7617 333.58 45.9746 cv
333.914 46.1875 334.323 46.2939 334.808 46.2939 cv
335.647 46.2939 336.293 45.9365 336.744 45.2217 cv
337.195 44.5068 337.421 43.7588 337.421 42.9775 cv
337.421 41.6592 li
337.421 41.0146 337.27 40.4063 336.967 39.834 cv
336.967 39.834 li
cp
325.626 39.0107 mo
325.364 39.0811 325.192 39.1621 325.11 39.2539 cv
325.028 39.3457 324.987 39.4717 324.987 39.6318 cv
324.987 39.8076 325.043 39.9561 325.154 40.0771 cv
325.266 40.1982 325.397 40.2588 325.55 40.2588 cv
325.636 40.2588 325.765 40.2354 325.937 40.1885 cv
327.009 39.9072 li
327.009 44.917 li
325.796 44.917 li
325.507 44.917 325.301 44.9727 325.178 45.084 cv
325.055 45.1953 324.993 45.3389 324.993 45.5146 cv
324.993 45.6943 325.055 45.8398 325.178 45.9512 cv
325.301 46.0625 325.507 46.1182 325.796 46.1182 cv
329.423 46.1182 li
329.712 46.1182 329.918 46.0625 330.041 45.9512 cv
330.164 45.8398 330.226 45.6963 330.226 45.5205 cv
330.226 45.3408 330.164 45.1953 330.041 45.084 cv
329.918 44.9727 329.712 44.917 329.423 44.917 cv
328.21 44.917 li
328.21 38.3428 li
325.626 39.0107 li
325.626 39.0107 li
cp
f
283.5 36.1182 mo
322.5 36.1182 li
322.5 50.1182 li
283.5 50.1182 li
283.5 36.1182 li
cp
@
315.431 39.0107 mo
315.169 39.0811 314.997 39.1621 314.915 39.2539 cv
314.833 39.3457 314.792 39.4717 314.792 39.6318 cv
314.792 39.8076 314.848 39.9561 314.959 40.0771 cv
315.07 40.1982 315.202 40.2588 315.354 40.2588 cv
315.44 40.2588 315.569 40.2354 315.741 40.1885 cv
316.813 39.9072 li
316.813 44.917 li
315.601 44.917 li
315.312 44.917 315.105 44.9727 314.982 45.084 cv
314.859 45.1953 314.798 45.3389 314.798 45.5146 cv
314.798 45.6943 314.859 45.8398 314.982 45.9512 cv
315.105 46.0625 315.312 46.1182 315.601 46.1182 cv
319.228 46.1182 li
319.517 46.1182 319.723 46.0625 319.846 45.9512 cv
319.969 45.8398 320.03 45.6963 320.03 45.5205 cv
320.03 45.3408 319.969 45.1953 319.846 45.084 cv
319.723 44.9727 319.517 44.917 319.228 44.917 cv
318.015 44.917 li
318.015 38.3428 li
315.431 39.0107 li
315.431 39.0107 li
cp
311.616 42.9775 mo
311.616 43.6416 311.442 44.1982 311.095 44.6475 cv
310.864 44.9443 310.569 45.0928 310.21 45.0928 cv
309.831 45.0928 309.54 44.958 309.337 44.6885 cv
308.97 44.2041 308.786 43.6338 308.786 42.9775 cv
308.786 41.6592 li
308.786 40.9951 308.96 40.4385 309.308 39.9893 cv
309.538 39.6924 309.835 39.5439 310.198 39.5439 cv
310.573 39.5439 310.864 39.6787 311.071 39.9482 cv
311.435 40.4365 311.616 41.0068 311.616 41.6592 cv
311.616 42.9775 li
311.616 42.9775 li
cp
312.369 39.834 mo
312.066 39.2617 311.748 38.8701 311.414 38.6592 cv
311.08 38.4482 310.673 38.3428 310.192 38.3428 cv
309.353 38.3428 308.708 38.7012 308.259 39.418 cv
307.81 40.1348 307.585 40.8818 307.585 41.6592 cv
307.585 42.9775 li
307.585 43.6182 307.734 44.2246 308.033 44.7969 cv
308.332 45.3691 308.648 45.7617 308.982 45.9746 cv
309.316 46.1875 309.726 46.2939 310.21 46.2939 cv
311.05 46.2939 311.695 45.9365 312.146 45.2217 cv
312.598 44.5068 312.823 43.7588 312.823 42.9775 cv
312.823 41.6592 li
312.823 41.0146 312.672 40.4063 312.369 39.834 cv
312.369 39.834 li
cp
304.415 42.9775 mo
304.415 43.6416 304.241 44.1982 303.894 44.6475 cv
303.663 44.9443 303.368 45.0928 303.009 45.0928 cv
302.63 45.0928 302.339 44.958 302.136 44.6885 cv
301.769 44.2041 301.585 43.6338 301.585 42.9775 cv
301.585 41.6592 li
301.585 40.9951 301.759 40.4385 302.106 39.9893 cv
302.337 39.6924 302.634 39.5439 302.997 39.5439 cv
303.372 39.5439 303.663 39.6787 303.87 39.9482 cv
304.233 40.4365 304.415 41.0068 304.415 41.6592 cv
304.415 42.9775 li
304.415 42.9775 li
cp
305.168 39.834 mo
304.865 39.2617 304.547 38.8701 304.213 38.6592 cv
303.879 38.4482 303.472 38.3428 302.991 38.3428 cv
302.151 38.3428 301.507 38.7012 301.058 39.418 cv
300.608 40.1348 300.384 40.8818 300.384 41.6592 cv
300.384 42.9775 li
300.384 43.6182 300.533 44.2246 300.832 44.7969 cv
301.131 45.3691 301.447 45.7617 301.781 45.9746 cv
302.115 46.1875 302.524 46.2939 303.009 46.2939 cv
303.849 46.2939 304.494 45.9365 304.945 45.2217 cv
305.396 44.5068 305.622 43.7588 305.622 42.9775 cv
305.622 41.6592 li
305.622 41.0146 305.471 40.4063 305.168 39.834 cv
305.168 39.834 li
cp
293.827 39.0107 mo
293.565 39.0811 293.394 39.1621 293.312 39.2539 cv
293.229 39.3457 293.188 39.4717 293.188 39.6318 cv
293.188 39.8076 293.244 39.9561 293.355 40.0771 cv
293.467 40.1982 293.599 40.2588 293.751 40.2588 cv
293.837 40.2588 293.966 40.2354 294.138 40.1885 cv
295.21 39.9072 li
295.21 44.917 li
293.997 44.917 li
293.708 44.917 293.502 44.9727 293.379 45.084 cv
293.256 45.1953 293.194 45.3389 293.194 45.5146 cv
293.194 45.6943 293.256 45.8398 293.379 45.9512 cv
293.502 46.0625 293.708 46.1182 293.997 46.1182 cv
297.624 46.1182 li
297.913 46.1182 298.119 46.0625 298.242 45.9512 cv
298.365 45.8398 298.427 45.6963 298.427 45.5205 cv
298.427 45.3408 298.365 45.1953 298.242 45.084 cv
298.119 44.9727 297.913 44.917 297.624 44.917 cv
296.411 44.917 li
296.411 38.3428 li
293.827 39.0107 li
293.827 39.0107 li
cp
290.013 42.9775 mo
290.013 43.6416 289.839 44.1982 289.491 44.6475 cv
289.261 44.9443 288.966 45.0928 288.606 45.0928 cv
288.228 45.0928 287.937 44.958 287.733 44.6885 cv
287.366 44.2041 287.183 43.6338 287.183 42.9775 cv
287.183 41.6592 li
287.183 40.9951 287.356 40.4385 287.704 39.9893 cv
287.935 39.6924 288.231 39.5439 288.595 39.5439 cv
288.97 39.5439 289.261 39.6787 289.468 39.9482 cv
289.831 40.4365 290.013 41.0068 290.013 41.6592 cv
290.013 42.9775 li
290.013 42.9775 li
cp
290.766 39.834 mo
290.463 39.2617 290.145 38.8701 289.811 38.6592 cv
289.477 38.4482 289.069 38.3428 288.589 38.3428 cv
287.749 38.3428 287.104 38.7012 286.655 39.418 cv
286.206 40.1348 285.981 40.8818 285.981 41.6592 cv
285.981 42.9775 li
285.981 43.6182 286.131 44.2246 286.43 44.7969 cv
286.729 45.3691 287.045 45.7617 287.379 45.9746 cv
287.713 46.1875 288.122 46.2939 288.606 46.2939 cv
289.446 46.2939 290.092 45.9365 290.543 45.2217 cv
290.994 44.5068 291.22 43.7588 291.22 42.9775 cv
291.22 41.6592 li
291.22 41.0146 291.068 40.4063 290.766 39.834 cv
290.766 39.834 li
cp
f
244.5 36.1182 mo
283.5 36.1182 li
283.5 50.1182 li
244.5 50.1182 li
244.5 36.1182 li
cp
@
276.431 39.0107 mo
276.169 39.0811 275.997 39.1621 275.915 39.2539 cv
275.833 39.3457 275.792 39.4717 275.792 39.6318 cv
275.792 39.8076 275.848 39.9561 275.959 40.0771 cv
276.07 40.1982 276.202 40.2588 276.354 40.2588 cv
276.44 40.2588 276.569 40.2354 276.741 40.1885 cv
277.813 39.9072 li
277.813 44.917 li
276.601 44.917 li
276.312 44.917 276.105 44.9727 275.982 45.084 cv
275.859 45.1953 275.798 45.3389 275.798 45.5146 cv
275.798 45.6943 275.859 45.8398 275.982 45.9512 cv
276.105 46.0625 276.312 46.1182 276.601 46.1182 cv
280.228 46.1182 li
280.517 46.1182 280.723 46.0625 280.846 45.9512 cv
280.969 45.8398 281.03 45.6963 281.03 45.5205 cv
281.03 45.3408 280.969 45.1953 280.846 45.084 cv
280.723 44.9727 280.517 44.917 280.228 44.917 cv
279.015 44.917 li
279.015 38.3428 li
276.431 39.0107 li
276.431 39.0107 li
cp
272.616 42.9775 mo
272.616 43.6416 272.442 44.1982 272.095 44.6475 cv
271.864 44.9443 271.569 45.0928 271.21 45.0928 cv
270.831 45.0928 270.54 44.958 270.337 44.6885 cv
269.97 44.2041 269.786 43.6338 269.786 42.9775 cv
269.786 41.6592 li
269.786 40.9951 269.96 40.4385 270.308 39.9893 cv
270.538 39.6924 270.835 39.5439 271.198 39.5439 cv
271.573 39.5439 271.864 39.6787 272.071 39.9482 cv
272.435 40.4365 272.616 41.0068 272.616 41.6592 cv
272.616 42.9775 li
272.616 42.9775 li
cp
273.369 39.834 mo
273.066 39.2617 272.748 38.8701 272.414 38.6592 cv
272.08 38.4482 271.673 38.3428 271.192 38.3428 cv
270.353 38.3428 269.708 38.7012 269.259 39.418 cv
268.81 40.1348 268.585 40.8818 268.585 41.6592 cv
268.585 42.9775 li
268.585 43.6182 268.734 44.2246 269.033 44.7969 cv
269.332 45.3691 269.648 45.7617 269.982 45.9746 cv
270.316 46.1875 270.726 46.2939 271.21 46.2939 cv
272.05 46.2939 272.695 45.9365 273.146 45.2217 cv
273.598 44.5068 273.823 43.7588 273.823 42.9775 cv
273.823 41.6592 li
273.823 41.0146 273.672 40.4063 273.369 39.834 cv
273.369 39.834 li
cp
265.415 42.9775 mo
265.415 43.6416 265.241 44.1982 264.894 44.6475 cv
264.663 44.9443 264.368 45.0928 264.009 45.0928 cv
263.63 45.0928 263.339 44.958 263.136 44.6885 cv
262.769 44.2041 262.585 43.6338 262.585 42.9775 cv
262.585 41.6592 li
262.585 40.9951 262.759 40.4385 263.106 39.9893 cv
263.337 39.6924 263.634 39.5439 263.997 39.5439 cv
264.372 39.5439 264.663 39.6787 264.87 39.9482 cv
265.233 40.4365 265.415 41.0068 265.415 41.6592 cv
265.415 42.9775 li
265.415 42.9775 li
cp
266.168 39.834 mo
265.865 39.2617 265.547 38.8701 265.213 38.6592 cv
264.879 38.4482 264.472 38.3428 263.991 38.3428 cv
263.151 38.3428 262.507 38.7012 262.058 39.418 cv
261.608 40.1348 261.384 40.8818 261.384 41.6592 cv
261.384 42.9775 li
261.384 43.6182 261.533 44.2246 261.832 44.7969 cv
262.131 45.3691 262.447 45.7617 262.781 45.9746 cv
263.115 46.1875 263.524 46.2939 264.009 46.2939 cv
264.849 46.2939 265.494 45.9365 265.945 45.2217 cv
266.396 44.5068 266.622 43.7588 266.622 42.9775 cv
266.622 41.6592 li
266.622 41.0146 266.471 40.4063 266.168 39.834 cv
266.168 39.834 li
cp
254.827 39.0107 mo
254.565 39.0811 254.394 39.1621 254.312 39.2539 cv
254.229 39.3457 254.188 39.4717 254.188 39.6318 cv
254.188 39.8076 254.244 39.9561 254.355 40.0771 cv
254.467 40.1982 254.599 40.2588 254.751 40.2588 cv
254.837 40.2588 254.966 40.2354 255.138 40.1885 cv
256.21 39.9072 li
256.21 44.917 li
254.997 44.917 li
254.708 44.917 254.502 44.9727 254.379 45.084 cv
254.256 45.1953 254.194 45.3389 254.194 45.5146 cv
254.194 45.6943 254.256 45.8398 254.379 45.9512 cv
254.502 46.0625 254.708 46.1182 254.997 46.1182 cv
258.624 46.1182 li
258.913 46.1182 259.119 46.0625 259.242 45.9512 cv
259.365 45.8398 259.427 45.6963 259.427 45.5205 cv
259.427 45.3408 259.365 45.1953 259.242 45.084 cv
259.119 44.9727 258.913 44.917 258.624 44.917 cv
257.411 44.917 li
257.411 38.3428 li
254.827 39.0107 li
254.827 39.0107 li
cp
251.013 42.9775 mo
251.013 43.6416 250.839 44.1982 250.491 44.6475 cv
250.261 44.9443 249.966 45.0928 249.606 45.0928 cv
249.228 45.0928 248.937 44.958 248.733 44.6885 cv
248.366 44.2041 248.183 43.6338 248.183 42.9775 cv
248.183 41.6592 li
248.183 40.9951 248.356 40.4385 248.704 39.9893 cv
248.935 39.6924 249.231 39.5439 249.595 39.5439 cv
249.97 39.5439 250.261 39.6787 250.468 39.9482 cv
250.831 40.4365 251.013 41.0068 251.013 41.6592 cv
251.013 42.9775 li
251.013 42.9775 li
cp
251.766 39.834 mo
251.463 39.2617 251.145 38.8701 250.811 38.6592 cv
250.477 38.4482 250.069 38.3428 249.589 38.3428 cv
248.749 38.3428 248.104 38.7012 247.655 39.418 cv
247.206 40.1348 246.981 40.8818 246.981 41.6592 cv
246.981 42.9775 li
246.981 43.6182 247.131 44.2246 247.43 44.7969 cv
247.729 45.3691 248.045 45.7617 248.379 45.9746 cv
248.713 46.1875 249.122 46.2939 249.606 46.2939 cv
250.446 46.2939 251.092 45.9365 251.543 45.2217 cv
251.994 44.5068 252.22 43.7588 252.22 42.9775 cv
252.22 41.6592 li
252.22 41.0146 252.068 40.4063 251.766 39.834 cv
251.766 39.834 li
cp
f
205.5 36.1182 mo
244.5 36.1182 li
244.5 50.1182 li
205.5 50.1182 li
205.5 36.1182 li
cp
@
240.817 42.9775 mo
240.817 43.6416 240.644 44.1982 240.296 44.6475 cv
240.065 44.9443 239.771 45.0928 239.411 45.0928 cv
239.032 45.0928 238.741 44.958 238.538 44.6885 cv
238.171 44.2041 237.987 43.6338 237.987 42.9775 cv
237.987 41.6592 li
237.987 40.9951 238.161 40.4385 238.509 39.9893 cv
238.739 39.6924 239.036 39.5439 239.399 39.5439 cv
239.774 39.5439 240.065 39.6787 240.272 39.9482 cv
240.636 40.4365 240.817 41.0068 240.817 41.6592 cv
240.817 42.9775 li
240.817 42.9775 li
cp
241.57 39.834 mo
241.268 39.2617 240.949 38.8701 240.615 38.6592 cv
240.281 38.4482 239.874 38.3428 239.394 38.3428 cv
238.554 38.3428 237.909 38.7012 237.46 39.418 cv
237.011 40.1348 236.786 40.8818 236.786 41.6592 cv
236.786 42.9775 li
236.786 43.6182 236.936 44.2246 237.234 44.7969 cv
237.533 45.3691 237.85 45.7617 238.184 45.9746 cv
238.518 46.1875 238.927 46.2939 239.411 46.2939 cv
240.251 46.2939 240.896 45.9365 241.348 45.2217 cv
241.799 44.5068 242.024 43.7588 242.024 42.9775 cv
242.024 41.6592 li
242.024 41.0146 241.873 40.4063 241.57 39.834 cv
241.57 39.834 li
cp
233.616 42.9775 mo
233.616 43.6416 233.442 44.1982 233.095 44.6475 cv
232.864 44.9443 232.569 45.0928 232.21 45.0928 cv
231.831 45.0928 231.54 44.958 231.337 44.6885 cv
230.97 44.2041 230.786 43.6338 230.786 42.9775 cv
230.786 41.6592 li
230.786 40.9951 230.96 40.4385 231.308 39.9893 cv
231.538 39.6924 231.835 39.5439 232.198 39.5439 cv
232.573 39.5439 232.864 39.6787 233.071 39.9482 cv
233.435 40.4365 233.616 41.0068 233.616 41.6592 cv
233.616 42.9775 li
233.616 42.9775 li
cp
234.369 39.834 mo
234.066 39.2617 233.748 38.8701 233.414 38.6592 cv
233.08 38.4482 232.673 38.3428 232.192 38.3428 cv
231.353 38.3428 230.708 38.7012 230.259 39.418 cv
229.81 40.1348 229.585 40.8818 229.585 41.6592 cv
229.585 42.9775 li
229.585 43.6182 229.734 44.2246 230.033 44.7969 cv
230.332 45.3691 230.648 45.7617 230.982 45.9746 cv
231.316 46.1875 231.726 46.2939 232.21 46.2939 cv
233.05 46.2939 233.695 45.9365 234.146 45.2217 cv
234.598 44.5068 234.823 43.7588 234.823 42.9775 cv
234.823 41.6592 li
234.823 41.0146 234.672 40.4063 234.369 39.834 cv
234.369 39.834 li
cp
226.415 42.9775 mo
226.415 43.6416 226.241 44.1982 225.894 44.6475 cv
225.663 44.9443 225.368 45.0928 225.009 45.0928 cv
224.63 45.0928 224.339 44.958 224.136 44.6885 cv
223.769 44.2041 223.585 43.6338 223.585 42.9775 cv
223.585 41.6592 li
223.585 40.9951 223.759 40.4385 224.106 39.9893 cv
224.337 39.6924 224.634 39.5439 224.997 39.5439 cv
225.372 39.5439 225.663 39.6787 225.87 39.9482 cv
226.233 40.4365 226.415 41.0068 226.415 41.6592 cv
226.415 42.9775 li
226.415 42.9775 li
cp
227.168 39.834 mo
226.865 39.2617 226.547 38.8701 226.213 38.6592 cv
225.879 38.4482 225.472 38.3428 224.991 38.3428 cv
224.151 38.3428 223.507 38.7012 223.058 39.418 cv
222.608 40.1348 222.384 40.8818 222.384 41.6592 cv
222.384 42.9775 li
222.384 43.6182 222.533 44.2246 222.832 44.7969 cv
223.131 45.3691 223.447 45.7617 223.781 45.9746 cv
224.115 46.1875 224.524 46.2939 225.009 46.2939 cv
225.849 46.2939 226.494 45.9365 226.945 45.2217 cv
227.396 44.5068 227.622 43.7588 227.622 42.9775 cv
227.622 41.6592 li
227.622 41.0146 227.471 40.4063 227.168 39.834 cv
227.168 39.834 li
cp
219.214 42.9775 mo
219.214 43.6416 219.04 44.1982 218.692 44.6475 cv
218.462 44.9443 218.167 45.0928 217.808 45.0928 cv
217.429 45.0928 217.138 44.958 216.935 44.6885 cv
216.567 44.2041 216.384 43.6338 216.384 42.9775 cv
216.384 41.6592 li
216.384 40.9951 216.558 40.4385 216.905 39.9893 cv
217.136 39.6924 217.433 39.5439 217.796 39.5439 cv
218.171 39.5439 218.462 39.6787 218.669 39.9482 cv
219.032 40.4365 219.214 41.0068 219.214 41.6592 cv
219.214 42.9775 li
219.214 42.9775 li
cp
219.967 39.834 mo
219.664 39.2617 219.346 38.8701 219.012 38.6592 cv
218.678 38.4482 218.271 38.3428 217.79 38.3428 cv
216.95 38.3428 216.306 38.7012 215.856 39.418 cv
215.407 40.1348 215.183 40.8818 215.183 41.6592 cv
215.183 42.9775 li
215.183 43.6182 215.332 44.2246 215.631 44.7969 cv
215.93 45.3691 216.246 45.7617 216.58 45.9746 cv
216.914 46.1875 217.323 46.2939 217.808 46.2939 cv
218.647 46.2939 219.293 45.9365 219.744 45.2217 cv
220.195 44.5068 220.421 43.7588 220.421 42.9775 cv
220.421 41.6592 li
220.421 41.0146 220.27 40.4063 219.967 39.834 cv
219.967 39.834 li
cp
208.626 39.0107 mo
208.364 39.0811 208.192 39.1621 208.11 39.2539 cv
208.028 39.3457 207.987 39.4717 207.987 39.6318 cv
207.987 39.8076 208.043 39.9561 208.154 40.0771 cv
208.266 40.1982 208.397 40.2588 208.55 40.2588 cv
208.636 40.2588 208.765 40.2354 208.937 40.1885 cv
210.009 39.9072 li
210.009 44.917 li
208.796 44.917 li
208.507 44.917 208.301 44.9727 208.178 45.084 cv
208.055 45.1953 207.993 45.3389 207.993 45.5146 cv
207.993 45.6943 208.055 45.8398 208.178 45.9512 cv
208.301 46.0625 208.507 46.1182 208.796 46.1182 cv
212.423 46.1182 li
212.712 46.1182 212.918 46.0625 213.041 45.9512 cv
213.164 45.8398 213.226 45.6963 213.226 45.5205 cv
213.226 45.3408 213.164 45.1953 213.041 45.084 cv
212.918 44.9727 212.712 44.917 212.423 44.917 cv
211.21 44.917 li
211.21 38.3428 li
208.626 39.0107 li
208.626 39.0107 li
cp
f
166.5 36.1182 mo
205.5 36.1182 li
205.5 50.1182 li
166.5 50.1182 li
166.5 36.1182 li
cp
@
201.817 42.9775 mo
201.817 43.6416 201.644 44.1982 201.296 44.6475 cv
201.065 44.9443 200.771 45.0928 200.411 45.0928 cv
200.032 45.0928 199.741 44.958 199.538 44.6885 cv
199.171 44.2041 198.987 43.6338 198.987 42.9775 cv
198.987 41.6592 li
198.987 40.9951 199.161 40.4385 199.509 39.9893 cv
199.739 39.6924 200.036 39.5439 200.399 39.5439 cv
200.774 39.5439 201.065 39.6787 201.272 39.9482 cv
201.636 40.4365 201.817 41.0068 201.817 41.6592 cv
201.817 42.9775 li
201.817 42.9775 li
cp
202.57 39.834 mo
202.268 39.2617 201.949 38.8701 201.615 38.6592 cv
201.281 38.4482 200.874 38.3428 200.394 38.3428 cv
199.554 38.3428 198.909 38.7012 198.46 39.418 cv
198.011 40.1348 197.786 40.8818 197.786 41.6592 cv
197.786 42.9775 li
197.786 43.6182 197.936 44.2246 198.234 44.7969 cv
198.533 45.3691 198.85 45.7617 199.184 45.9746 cv
199.518 46.1875 199.927 46.2939 200.411 46.2939 cv
201.251 46.2939 201.896 45.9365 202.348 45.2217 cv
202.799 44.5068 203.024 43.7588 203.024 42.9775 cv
203.024 41.6592 li
203.024 41.0146 202.873 40.4063 202.57 39.834 cv
202.57 39.834 li
cp
191.229 39.0107 mo
190.968 39.0811 190.796 39.1621 190.714 39.2539 cv
190.632 39.3457 190.591 39.4717 190.591 39.6318 cv
190.591 39.8076 190.646 39.9561 190.758 40.0771 cv
190.869 40.1982 191.001 40.2588 191.153 40.2588 cv
191.239 40.2588 191.368 40.2354 191.54 40.1885 cv
192.612 39.9072 li
192.612 44.917 li
191.399 44.917 li
191.11 44.917 190.904 44.9727 190.781 45.084 cv
190.658 45.1953 190.597 45.3389 190.597 45.5146 cv
190.597 45.6943 190.658 45.8398 190.781 45.9512 cv
190.904 46.0625 191.11 46.1182 191.399 46.1182 cv
195.026 46.1182 li
195.315 46.1182 195.521 46.0625 195.645 45.9512 cv
195.768 45.8398 195.829 45.6963 195.829 45.5205 cv
195.829 45.3408 195.768 45.1953 195.645 45.084 cv
195.521 44.9727 195.315 44.917 195.026 44.917 cv
193.813 44.917 li
193.813 38.3428 li
191.229 39.0107 li
191.229 39.0107 li
cp
184.028 39.0107 mo
183.767 39.0811 183.595 39.1621 183.513 39.2539 cv
183.431 39.3457 183.39 39.4717 183.39 39.6318 cv
183.39 39.8076 183.445 39.9561 183.557 40.0771 cv
183.668 40.1982 183.8 40.2588 183.952 40.2588 cv
184.038 40.2588 184.167 40.2354 184.339 40.1885 cv
185.411 39.9072 li
185.411 44.917 li
184.198 44.917 li
183.909 44.917 183.703 44.9727 183.58 45.084 cv
183.457 45.1953 183.396 45.3389 183.396 45.5146 cv
183.396 45.6943 183.457 45.8398 183.58 45.9512 cv
183.703 46.0625 183.909 46.1182 184.198 46.1182 cv
187.825 46.1182 li
188.114 46.1182 188.32 46.0625 188.443 45.9512 cv
188.566 45.8398 188.628 45.6963 188.628 45.5205 cv
188.628 45.3408 188.566 45.1953 188.443 45.084 cv
188.32 44.9727 188.114 44.917 187.825 44.917 cv
186.612 44.917 li
186.612 38.3428 li
184.028 39.0107 li
184.028 39.0107 li
cp
180.214 42.9775 mo
180.214 43.6416 180.04 44.1982 179.692 44.6475 cv
179.462 44.9443 179.167 45.0928 178.808 45.0928 cv
178.429 45.0928 178.138 44.958 177.935 44.6885 cv
177.567 44.2041 177.384 43.6338 177.384 42.9775 cv
177.384 41.6592 li
177.384 40.9951 177.558 40.4385 177.905 39.9893 cv
178.136 39.6924 178.433 39.5439 178.796 39.5439 cv
179.171 39.5439 179.462 39.6787 179.669 39.9482 cv
180.032 40.4365 180.214 41.0068 180.214 41.6592 cv
180.214 42.9775 li
180.214 42.9775 li
cp
180.967 39.834 mo
180.664 39.2617 180.346 38.8701 180.012 38.6592 cv
179.678 38.4482 179.271 38.3428 178.79 38.3428 cv
177.95 38.3428 177.306 38.7012 176.856 39.418 cv
176.407 40.1348 176.183 40.8818 176.183 41.6592 cv
176.183 42.9775 li
176.183 43.6182 176.332 44.2246 176.631 44.7969 cv
176.93 45.3691 177.246 45.7617 177.58 45.9746 cv
177.914 46.1875 178.323 46.2939 178.808 46.2939 cv
179.647 46.2939 180.293 45.9365 180.744 45.2217 cv
181.195 44.5068 181.421 43.7588 181.421 42.9775 cv
181.421 41.6592 li
181.421 41.0146 181.27 40.4063 180.967 39.834 cv
180.967 39.834 li
cp
169.626 39.0107 mo
169.364 39.0811 169.192 39.1621 169.11 39.2539 cv
169.028 39.3457 168.987 39.4717 168.987 39.6318 cv
168.987 39.8076 169.043 39.9561 169.154 40.0771 cv
169.266 40.1982 169.397 40.2588 169.55 40.2588 cv
169.636 40.2588 169.765 40.2354 169.937 40.1885 cv
171.009 39.9072 li
171.009 44.917 li
169.796 44.917 li
169.507 44.917 169.301 44.9727 169.178 45.084 cv
169.055 45.1953 168.993 45.3389 168.993 45.5146 cv
168.993 45.6943 169.055 45.8398 169.178 45.9512 cv
169.301 46.0625 169.507 46.1182 169.796 46.1182 cv
173.423 46.1182 li
173.712 46.1182 173.918 46.0625 174.041 45.9512 cv
174.164 45.8398 174.226 45.6963 174.226 45.5205 cv
174.226 45.3408 174.164 45.1953 174.041 45.084 cv
173.918 44.9727 173.712 44.917 173.423 44.917 cv
172.21 44.917 li
172.21 38.3428 li
169.626 39.0107 li
169.626 39.0107 li
cp
f
127.5 36.1182 mo
166.5 36.1182 li
166.5 50.1182 li
127.5 50.1182 li
127.5 36.1182 li
cp
@
162.817 42.9775 mo
162.817 43.6416 162.644 44.1982 162.296 44.6475 cv
162.065 44.9443 161.771 45.0928 161.411 45.0928 cv
161.032 45.0928 160.741 44.958 160.538 44.6885 cv
160.171 44.2041 159.987 43.6338 159.987 42.9775 cv
159.987 41.6592 li
159.987 40.9951 160.161 40.4385 160.509 39.9893 cv
160.739 39.6924 161.036 39.5439 161.399 39.5439 cv
161.774 39.5439 162.065 39.6787 162.272 39.9482 cv
162.636 40.4365 162.817 41.0068 162.817 41.6592 cv
162.817 42.9775 li
162.817 42.9775 li
cp
163.57 39.834 mo
163.268 39.2617 162.949 38.8701 162.615 38.6592 cv
162.281 38.4482 161.874 38.3428 161.394 38.3428 cv
160.554 38.3428 159.909 38.7012 159.46 39.418 cv
159.011 40.1348 158.786 40.8818 158.786 41.6592 cv
158.786 42.9775 li
158.786 43.6182 158.936 44.2246 159.234 44.7969 cv
159.533 45.3691 159.85 45.7617 160.184 45.9746 cv
160.518 46.1875 160.927 46.2939 161.411 46.2939 cv
162.251 46.2939 162.896 45.9365 163.348 45.2217 cv
163.799 44.5068 164.024 43.7588 164.024 42.9775 cv
164.024 41.6592 li
164.024 41.0146 163.873 40.4063 163.57 39.834 cv
163.57 39.834 li
cp
152.229 39.0107 mo
151.968 39.0811 151.796 39.1621 151.714 39.2539 cv
151.632 39.3457 151.591 39.4717 151.591 39.6318 cv
151.591 39.8076 151.646 39.9561 151.758 40.0771 cv
151.869 40.1982 152.001 40.2588 152.153 40.2588 cv
152.239 40.2588 152.368 40.2354 152.54 40.1885 cv
153.612 39.9072 li
153.612 44.917 li
152.399 44.917 li
152.11 44.917 151.904 44.9727 151.781 45.084 cv
151.658 45.1953 151.597 45.3389 151.597 45.5146 cv
151.597 45.6943 151.658 45.8398 151.781 45.9512 cv
151.904 46.0625 152.11 46.1182 152.399 46.1182 cv
156.026 46.1182 li
156.315 46.1182 156.521 46.0625 156.645 45.9512 cv
156.768 45.8398 156.829 45.6963 156.829 45.5205 cv
156.829 45.3408 156.768 45.1953 156.645 45.084 cv
156.521 44.9727 156.315 44.917 156.026 44.917 cv
154.813 44.917 li
154.813 38.3428 li
152.229 39.0107 li
152.229 39.0107 li
cp
145.028 39.0107 mo
144.767 39.0811 144.595 39.1621 144.513 39.2539 cv
144.431 39.3457 144.39 39.4717 144.39 39.6318 cv
144.39 39.8076 144.445 39.9561 144.557 40.0771 cv
144.668 40.1982 144.8 40.2588 144.952 40.2588 cv
145.038 40.2588 145.167 40.2354 145.339 40.1885 cv
146.411 39.9072 li
146.411 44.917 li
145.198 44.917 li
144.909 44.917 144.703 44.9727 144.58 45.084 cv
144.457 45.1953 144.396 45.3389 144.396 45.5146 cv
144.396 45.6943 144.457 45.8398 144.58 45.9512 cv
144.703 46.0625 144.909 46.1182 145.198 46.1182 cv
148.825 46.1182 li
149.114 46.1182 149.32 46.0625 149.443 45.9512 cv
149.566 45.8398 149.628 45.6963 149.628 45.5205 cv
149.628 45.3408 149.566 45.1953 149.443 45.084 cv
149.32 44.9727 149.114 44.917 148.825 44.917 cv
147.612 44.917 li
147.612 38.3428 li
145.028 39.0107 li
145.028 39.0107 li
cp
141.214 42.9775 mo
141.214 43.6416 141.04 44.1982 140.692 44.6475 cv
140.462 44.9443 140.167 45.0928 139.808 45.0928 cv
139.429 45.0928 139.138 44.958 138.935 44.6885 cv
138.567 44.2041 138.384 43.6338 138.384 42.9775 cv
138.384 41.6592 li
138.384 40.9951 138.558 40.4385 138.905 39.9893 cv
139.136 39.6924 139.433 39.5439 139.796 39.5439 cv
140.171 39.5439 140.462 39.6787 140.669 39.9482 cv
141.032 40.4365 141.214 41.0068 141.214 41.6592 cv
141.214 42.9775 li
141.214 42.9775 li
cp
141.967 39.834 mo
141.664 39.2617 141.346 38.8701 141.012 38.6592 cv
140.678 38.4482 140.271 38.3428 139.79 38.3428 cv
138.95 38.3428 138.306 38.7012 137.856 39.418 cv
137.407 40.1348 137.183 40.8818 137.183 41.6592 cv
137.183 42.9775 li
137.183 43.6182 137.332 44.2246 137.631 44.7969 cv
137.93 45.3691 138.246 45.7617 138.58 45.9746 cv
138.914 46.1875 139.323 46.2939 139.808 46.2939 cv
140.647 46.2939 141.293 45.9365 141.744 45.2217 cv
142.195 44.5068 142.421 43.7588 142.421 42.9775 cv
142.421 41.6592 li
142.421 41.0146 142.27 40.4063 141.967 39.834 cv
141.967 39.834 li
cp
134.013 42.9775 mo
134.013 43.6416 133.839 44.1982 133.491 44.6475 cv
133.261 44.9443 132.966 45.0928 132.606 45.0928 cv
132.228 45.0928 131.937 44.958 131.733 44.6885 cv
131.366 44.2041 131.183 43.6338 131.183 42.9775 cv
131.183 41.6592 li
131.183 40.9951 131.356 40.4385 131.704 39.9893 cv
131.935 39.6924 132.231 39.5439 132.595 39.5439 cv
132.97 39.5439 133.261 39.6787 133.468 39.9482 cv
133.831 40.4365 134.013 41.0068 134.013 41.6592 cv
134.013 42.9775 li
134.013 42.9775 li
cp
134.766 39.834 mo
134.463 39.2617 134.145 38.8701 133.811 38.6592 cv
133.477 38.4482 133.069 38.3428 132.589 38.3428 cv
131.749 38.3428 131.104 38.7012 130.655 39.418 cv
130.206 40.1348 129.981 40.8818 129.981 41.6592 cv
129.981 42.9775 li
129.981 43.6182 130.131 44.2246 130.43 44.7969 cv
130.729 45.3691 131.045 45.7617 131.379 45.9746 cv
131.713 46.1875 132.122 46.2939 132.606 46.2939 cv
133.446 46.2939 134.092 45.9365 134.543 45.2217 cv
134.994 44.5068 135.22 43.7588 135.22 42.9775 cv
135.22 41.6592 li
135.22 41.0146 135.068 40.4063 134.766 39.834 cv
134.766 39.834 li
cp
f
88.5 36.1182 mo
127.5 36.1182 li
127.5 50.1182 li
88.5 50.1182 li
88.5 36.1182 li
cp
@
120.431 39.0107 mo
120.169 39.0811 119.997 39.1621 119.915 39.2539 cv
119.833 39.3457 119.792 39.4717 119.792 39.6318 cv
119.792 39.8076 119.848 39.9561 119.959 40.0771 cv
120.07 40.1982 120.202 40.2588 120.354 40.2588 cv
120.44 40.2588 120.569 40.2354 120.741 40.1885 cv
121.813 39.9072 li
121.813 44.917 li
120.601 44.917 li
120.312 44.917 120.105 44.9727 119.982 45.084 cv
119.859 45.1953 119.798 45.3389 119.798 45.5146 cv
119.798 45.6943 119.859 45.8398 119.982 45.9512 cv
120.105 46.0625 120.312 46.1182 120.601 46.1182 cv
124.228 46.1182 li
124.517 46.1182 124.723 46.0625 124.846 45.9512 cv
124.969 45.8398 125.03 45.6963 125.03 45.5205 cv
125.03 45.3408 124.969 45.1953 124.846 45.084 cv
124.723 44.9727 124.517 44.917 124.228 44.917 cv
123.015 44.917 li
123.015 38.3428 li
120.431 39.0107 li
120.431 39.0107 li
cp
116.616 42.9775 mo
116.616 43.6416 116.442 44.1982 116.095 44.6475 cv
115.864 44.9443 115.569 45.0928 115.21 45.0928 cv
114.831 45.0928 114.54 44.958 114.337 44.6885 cv
113.97 44.2041 113.786 43.6338 113.786 42.9775 cv
113.786 41.6592 li
113.786 40.9951 113.96 40.4385 114.308 39.9893 cv
114.538 39.6924 114.835 39.5439 115.198 39.5439 cv
115.573 39.5439 115.864 39.6787 116.071 39.9482 cv
116.435 40.4365 116.616 41.0068 116.616 41.6592 cv
116.616 42.9775 li
116.616 42.9775 li
cp
117.369 39.834 mo
117.066 39.2617 116.748 38.8701 116.414 38.6592 cv
116.08 38.4482 115.673 38.3428 115.192 38.3428 cv
114.353 38.3428 113.708 38.7012 113.259 39.418 cv
112.81 40.1348 112.585 40.8818 112.585 41.6592 cv
112.585 42.9775 li
112.585 43.6182 112.734 44.2246 113.033 44.7969 cv
113.332 45.3691 113.648 45.7617 113.982 45.9746 cv
114.316 46.1875 114.726 46.2939 115.21 46.2939 cv
116.05 46.2939 116.695 45.9365 117.146 45.2217 cv
117.598 44.5068 117.823 43.7588 117.823 42.9775 cv
117.823 41.6592 li
117.823 41.0146 117.672 40.4063 117.369 39.834 cv
117.369 39.834 li
cp
106.028 39.0107 mo
105.767 39.0811 105.595 39.1621 105.513 39.2539 cv
105.431 39.3457 105.39 39.4717 105.39 39.6318 cv
105.39 39.8076 105.445 39.9561 105.557 40.0771 cv
105.668 40.1982 105.8 40.2588 105.952 40.2588 cv
106.038 40.2588 106.167 40.2354 106.339 40.1885 cv
107.411 39.9072 li
107.411 44.917 li
106.198 44.917 li
105.909 44.917 105.703 44.9727 105.58 45.084 cv
105.457 45.1953 105.396 45.3389 105.396 45.5146 cv
105.396 45.6943 105.457 45.8398 105.58 45.9512 cv
105.703 46.0625 105.909 46.1182 106.198 46.1182 cv
109.825 46.1182 li
110.114 46.1182 110.32 46.0625 110.443 45.9512 cv
110.566 45.8398 110.628 45.6963 110.628 45.5205 cv
110.628 45.3408 110.566 45.1953 110.443 45.084 cv
110.32 44.9727 110.114 44.917 109.825 44.917 cv
108.612 44.917 li
108.612 38.3428 li
106.028 39.0107 li
106.028 39.0107 li
cp
102.214 42.9775 mo
102.214 43.6416 102.04 44.1982 101.692 44.6475 cv
101.462 44.9443 101.167 45.0928 100.808 45.0928 cv
100.429 45.0928 100.138 44.958 99.9346 44.6885 cv
99.5674 44.2041 99.3838 43.6338 99.3838 42.9775 cv
99.3838 41.6592 li
99.3838 40.9951 99.5576 40.4385 99.9053 39.9893 cv
100.136 39.6924 100.433 39.5439 100.796 39.5439 cv
101.171 39.5439 101.462 39.6787 101.669 39.9482 cv
102.032 40.4365 102.214 41.0068 102.214 41.6592 cv
102.214 42.9775 li
102.214 42.9775 li
cp
102.967 39.834 mo
102.664 39.2617 102.346 38.8701 102.012 38.6592 cv
101.678 38.4482 101.271 38.3428 100.79 38.3428 cv
99.9502 38.3428 99.3057 38.7012 98.8564 39.418 cv
98.4072 40.1348 98.1826 40.8818 98.1826 41.6592 cv
98.1826 42.9775 li
98.1826 43.6182 98.332 44.2246 98.6309 44.7969 cv
98.9297 45.3691 99.2461 45.7617 99.5801 45.9746 cv
99.9141 46.1875 100.323 46.2939 100.808 46.2939 cv
101.647 46.2939 102.293 45.9365 102.744 45.2217 cv
103.195 44.5068 103.421 43.7588 103.421 42.9775 cv
103.421 41.6592 li
103.421 41.0146 103.27 40.4063 102.967 39.834 cv
102.967 39.834 li
cp
95.0127 42.9775 mo
95.0127 43.6416 94.8389 44.1982 94.4912 44.6475 cv
94.2607 44.9443 93.9658 45.0928 93.6064 45.0928 cv
93.2275 45.0928 92.9365 44.958 92.7334 44.6885 cv
92.3662 44.2041 92.1826 43.6338 92.1826 42.9775 cv
92.1826 41.6592 li
92.1826 40.9951 92.3564 40.4385 92.7041 39.9893 cv
92.9346 39.6924 93.2314 39.5439 93.5947 39.5439 cv
93.9697 39.5439 94.2607 39.6787 94.4678 39.9482 cv
94.8311 40.4365 95.0127 41.0068 95.0127 41.6592 cv
95.0127 42.9775 li
95.0127 42.9775 li
cp
95.7656 39.834 mo
95.4629 39.2617 95.1445 38.8701 94.8105 38.6592 cv
94.4766 38.4482 94.0693 38.3428 93.5889 38.3428 cv
92.749 38.3428 92.1045 38.7012 91.6553 39.418 cv
91.2061 40.1348 90.9814 40.8818 90.9814 41.6592 cv
90.9814 42.9775 li
90.9814 43.6182 91.1309 44.2246 91.4297 44.7969 cv
91.7285 45.3691 92.0449 45.7617 92.3789 45.9746 cv
92.7129 46.1875 93.1221 46.2939 93.6064 46.2939 cv
94.4463 46.2939 95.0918 45.9365 95.543 45.2217 cv
95.9941 44.5068 96.2197 43.7588 96.2197 42.9775 cv
96.2197 41.6592 li
96.2197 41.0146 96.0684 40.4063 95.7656 39.834 cv
95.7656 39.834 li
cp
f
139.562 9.17383 mo
139.876 9.25391 140.199 9.29395 140.531 9.29395 cv
141.391 9.29395 142.098 9.05957 142.652 8.59082 cv
143.07 8.23535 143.279 7.76074 143.279 7.16699 cv
143.279 6.74121 143.17 6.37402 142.951 6.06543 cv
142.732 5.75684 142.458 5.53027 142.128 5.38574 cv
141.798 5.24121 141.325 5.1084 140.71 4.9873 cv
140.095 4.86621 139.721 4.77832 139.588 4.72363 cv
139.389 4.64551 139.237 4.53711 139.134 4.39844 cv
139.03 4.25977 138.979 4.11621 138.979 3.96777 cv
138.979 3.74902 139.104 3.53906 139.356 3.33789 cv
139.608 3.13672 139.951 3.03613 140.385 3.03613 cv
140.682 3.03613 140.943 3.08691 141.17 3.18848 cv
141.396 3.29004 141.566 3.41504 141.68 3.56348 cv
141.746 3.64941 141.801 3.79199 141.844 3.99121 cv
141.887 4.19043 141.951 4.32324 142.037 4.38965 cv
142.146 4.47949 142.275 4.52441 142.424 4.52441 cv
142.6 4.52441 142.743 4.46289 142.854 4.33984 cv
142.966 4.2168 143.021 4.01074 143.021 3.72168 cv
143.021 2.81934 li
143.021 2.53418 142.966 2.33008 142.854 2.20703 cv
142.743 2.08398 142.6 2.02246 142.424 2.02246 cv
142.268 2.02246 142.111 2.09863 141.955 2.25098 cv
141.74 2.11035 141.501 2.00586 141.237 1.9375 cv
140.974 1.86914 140.688 1.83496 140.379 1.83496 cv
139.609 1.83496 138.984 2.05078 138.504 2.48242 cv
138.023 2.91406 137.783 3.41699 137.783 3.99121 cv
137.783 4.35449 137.881 4.69238 138.076 5.00488 cv
138.271 5.31738 138.537 5.55957 138.873 5.73145 cv
139.209 5.90332 139.705 6.0498 140.361 6.1709 cv
140.904 6.27246 141.254 6.35254 141.41 6.41113 cv
141.648 6.49707 141.82 6.60547 141.926 6.73633 cv
142.031 6.86719 142.084 7.00684 142.084 7.15527 cv
142.084 7.37793 141.975 7.56543 141.756 7.71777 cv
141.412 7.96777 140.973 8.09277 140.438 8.09277 cv
140.094 8.09277 139.777 8.03027 139.488 7.90527 cv
139.199 7.78027 138.998 7.65723 138.885 7.53613 cv
138.83 7.47363 138.777 7.35547 138.727 7.18164 cv
138.676 7.00781 138.603 6.88379 138.507 6.80957 cv
138.411 6.73535 138.293 6.69824 138.152 6.69824 cv
137.969 6.69824 137.821 6.75977 137.71 6.88281 cv
137.599 7.00586 137.543 7.21191 137.543 7.50098 cv
137.543 8.30957 li
137.543 8.59473 137.599 8.79883 137.71 8.92188 cv
137.821 9.04492 137.969 9.10645 138.152 9.10645 cv
138.246 9.10645 138.325 9.08887 138.39 9.05371 cv
138.454 9.01855 138.539 8.93848 138.645 8.81348 cv
138.941 8.97363 139.247 9.09375 139.562 9.17383 cv
139.562 9.17383 li
cp
f
149.016 10.9775 mo
149.016 11.6416 148.842 12.1982 148.494 12.6475 cv
148.264 12.9443 147.969 13.0928 147.609 13.0928 cv
147.23 13.0928 146.939 12.958 146.736 12.6885 cv
146.369 12.2041 146.186 11.6338 146.186 10.9775 cv
146.186 9.65918 li
146.186 8.99512 146.359 8.43848 146.707 7.98926 cv
146.938 7.69238 147.234 7.54395 147.598 7.54395 cv
147.973 7.54395 148.264 7.67871 148.471 7.94824 cv
148.834 8.43652 149.016 9.00684 149.016 9.65918 cv
149.016 10.9775 li
149.016 10.9775 li
cp
149.769 7.83398 mo
149.466 7.26172 149.147 6.87012 148.813 6.65918 cv
148.479 6.44824 148.072 6.34277 147.592 6.34277 cv
146.752 6.34277 146.107 6.70117 145.658 7.41797 cv
145.209 8.13477 144.984 8.88184 144.984 9.65918 cv
144.984 10.9775 li
144.984 11.6182 145.134 12.2246 145.433 12.7969 cv
145.731 13.3691 146.048 13.7617 146.382 13.9746 cv
146.716 14.1875 147.125 14.2939 147.609 14.2939 cv
148.449 14.2939 149.095 13.9365 149.546 13.2217 cv
149.997 12.5068 150.223 11.7588 150.223 10.9775 cv
150.223 9.65918 li
150.223 9.01465 150.071 8.40625 149.769 7.83398 cv
149.769 7.83398 li
cp
f
259.562 9.17383 mo
259.876 9.25391 260.199 9.29395 260.531 9.29395 cv
261.391 9.29395 262.098 9.05957 262.652 8.59082 cv
263.07 8.23535 263.279 7.76074 263.279 7.16699 cv
263.279 6.74121 263.17 6.37402 262.951 6.06543 cv
262.732 5.75684 262.458 5.53027 262.128 5.38574 cv
261.798 5.24121 261.325 5.1084 260.71 4.9873 cv
260.095 4.86621 259.721 4.77832 259.588 4.72363 cv
259.389 4.64551 259.237 4.53711 259.134 4.39844 cv
259.03 4.25977 258.979 4.11621 258.979 3.96777 cv
258.979 3.74902 259.104 3.53906 259.356 3.33789 cv
259.608 3.13672 259.951 3.03613 260.385 3.03613 cv
260.682 3.03613 260.943 3.08691 261.17 3.18848 cv
261.396 3.29004 261.566 3.41504 261.68 3.56348 cv
261.746 3.64941 261.801 3.79199 261.844 3.99121 cv
261.887 4.19043 261.951 4.32324 262.037 4.38965 cv
262.146 4.47949 262.275 4.52441 262.424 4.52441 cv
262.6 4.52441 262.743 4.46289 262.854 4.33984 cv
262.966 4.2168 263.021 4.01074 263.021 3.72168 cv
263.021 2.81934 li
263.021 2.53418 262.966 2.33008 262.854 2.20703 cv
262.743 2.08398 262.6 2.02246 262.424 2.02246 cv
262.268 2.02246 262.111 2.09863 261.955 2.25098 cv
261.74 2.11035 261.501 2.00586 261.237 1.9375 cv
260.974 1.86914 260.688 1.83496 260.379 1.83496 cv
259.609 1.83496 258.984 2.05078 258.504 2.48242 cv
258.023 2.91406 257.783 3.41699 257.783 3.99121 cv
257.783 4.35449 257.881 4.69238 258.076 5.00488 cv
258.271 5.31738 258.537 5.55957 258.873 5.73145 cv
259.209 5.90332 259.705 6.0498 260.361 6.1709 cv
260.904 6.27246 261.254 6.35254 261.41 6.41113 cv
261.648 6.49707 261.82 6.60547 261.926 6.73633 cv
262.031 6.86719 262.084 7.00684 262.084 7.15527 cv
262.084 7.37793 261.975 7.56543 261.756 7.71777 cv
261.412 7.96777 260.973 8.09277 260.438 8.09277 cv
260.094 8.09277 259.777 8.03027 259.488 7.90527 cv
259.199 7.78027 258.998 7.65723 258.885 7.53613 cv
258.83 7.47363 258.777 7.35547 258.727 7.18164 cv
258.676 7.00781 258.603 6.88379 258.507 6.80957 cv
258.411 6.73535 258.293 6.69824 258.152 6.69824 cv
257.969 6.69824 257.821 6.75977 257.71 6.88281 cv
257.599 7.00586 257.543 7.21191 257.543 7.50098 cv
257.543 8.30957 li
257.543 8.59473 257.599 8.79883 257.71 8.92188 cv
257.821 9.04492 257.969 9.10645 258.152 9.10645 cv
258.246 9.10645 258.325 9.08887 258.39 9.05371 cv
258.454 9.01855 258.539 8.93848 258.645 8.81348 cv
258.941 8.97363 259.247 9.09375 259.562 9.17383 cv
259.562 9.17383 li
cp
f
265.629 7.01074 mo
265.367 7.08105 265.195 7.16211 265.113 7.25391 cv
265.031 7.3457 264.99 7.47168 264.99 7.63184 cv
264.99 7.80762 265.046 7.95605 265.157 8.07715 cv
265.269 8.19824 265.4 8.25879 265.553 8.25879 cv
265.639 8.25879 265.768 8.23535 265.939 8.18848 cv
267.012 7.90723 li
267.012 12.917 li
265.799 12.917 li
265.51 12.917 265.304 12.9727 265.181 13.084 cv
265.058 13.1953 264.996 13.3389 264.996 13.5146 cv
264.996 13.6943 265.058 13.8398 265.181 13.9512 cv
265.304 14.0625 265.51 14.1182 265.799 14.1182 cv
269.426 14.1182 li
269.715 14.1182 269.921 14.0625 270.044 13.9512 cv
270.167 13.8398 270.229 13.6963 270.229 13.5205 cv
270.229 13.3408 270.167 13.1953 270.044 13.084 cv
269.921 12.9727 269.715 12.917 269.426 12.917 cv
268.213 12.917 li
268.213 6.34277 li
265.629 7.01074 li
265.629 7.01074 li
cp
f
379.562 9.17383 mo
379.876 9.25391 380.199 9.29395 380.531 9.29395 cv
381.391 9.29395 382.098 9.05957 382.652 8.59082 cv
383.07 8.23535 383.279 7.76074 383.279 7.16699 cv
383.279 6.74121 383.17 6.37402 382.951 6.06543 cv
382.732 5.75684 382.458 5.53027 382.128 5.38574 cv
381.798 5.24121 381.325 5.1084 380.71 4.9873 cv
380.095 4.86621 379.721 4.77832 379.588 4.72363 cv
379.389 4.64551 379.237 4.53711 379.134 4.39844 cv
379.03 4.25977 378.979 4.11621 378.979 3.96777 cv
378.979 3.74902 379.104 3.53906 379.356 3.33789 cv
379.608 3.13672 379.951 3.03613 380.385 3.03613 cv
380.682 3.03613 380.943 3.08691 381.17 3.18848 cv
381.396 3.29004 381.566 3.41504 381.68 3.56348 cv
381.746 3.64941 381.801 3.79199 381.844 3.99121 cv
381.887 4.19043 381.951 4.32324 382.037 4.38965 cv
382.146 4.47949 382.275 4.52441 382.424 4.52441 cv
382.6 4.52441 382.743 4.46289 382.854 4.33984 cv
382.966 4.2168 383.021 4.01074 383.021 3.72168 cv
383.021 2.81934 li
383.021 2.53418 382.966 2.33008 382.854 2.20703 cv
382.743 2.08398 382.6 2.02246 382.424 2.02246 cv
382.268 2.02246 382.111 2.09863 381.955 2.25098 cv
381.74 2.11035 381.501 2.00586 381.237 1.9375 cv
380.974 1.86914 380.688 1.83496 380.379 1.83496 cv
379.609 1.83496 378.984 2.05078 378.504 2.48242 cv
378.023 2.91406 377.783 3.41699 377.783 3.99121 cv
377.783 4.35449 377.881 4.69238 378.076 5.00488 cv
378.271 5.31738 378.537 5.55957 378.873 5.73145 cv
379.209 5.90332 379.705 6.0498 380.361 6.1709 cv
380.904 6.27246 381.254 6.35254 381.41 6.41113 cv
381.648 6.49707 381.82 6.60547 381.926 6.73633 cv
382.031 6.86719 382.084 7.00684 382.084 7.15527 cv
382.084 7.37793 381.975 7.56543 381.756 7.71777 cv
381.412 7.96777 380.973 8.09277 380.438 8.09277 cv
380.094 8.09277 379.777 8.03027 379.488 7.90527 cv
379.199 7.78027 378.998 7.65723 378.885 7.53613 cv
378.83 7.47363 378.777 7.35547 378.727 7.18164 cv
378.676 7.00781 378.603 6.88379 378.507 6.80957 cv
378.411 6.73535 378.293 6.69824 378.152 6.69824 cv
377.969 6.69824 377.821 6.75977 377.71 6.88281 cv
377.599 7.00586 377.543 7.21191 377.543 7.50098 cv
377.543 8.30957 li
377.543 8.59473 377.599 8.79883 377.71 8.92188 cv
377.821 9.04492 377.969 9.10645 378.152 9.10645 cv
378.246 9.10645 378.325 9.08887 378.39 9.05371 cv
378.454 9.01855 378.539 8.93848 378.645 8.81348 cv
378.941 8.97363 379.247 9.09375 379.562 9.17383 cv
379.562 9.17383 li
cp
f
388.898 10.7959 mo
389.426 10.2959 389.759 9.9043 389.897 9.62109 cv
390.036 9.33789 390.105 9.03027 390.105 8.69824 cv
390.105 8.0459 389.863 7.49023 389.379 7.03125 cv
388.895 6.57227 388.273 6.34277 387.516 6.34277 cv
387.027 6.34277 386.575 6.44824 386.159 6.65918 cv
385.743 6.87012 385.427 7.15137 385.21 7.50293 cv
384.993 7.85449 384.885 8.14746 384.885 8.38184 cv
384.885 8.53809 384.944 8.6748 385.063 8.79199 cv
385.183 8.90918 385.324 8.96777 385.488 8.96777 cv
385.629 8.96777 385.747 8.93262 385.843 8.8623 cv
385.938 8.79199 386.014 8.6748 386.068 8.51074 cv
386.158 8.24902 386.277 8.05176 386.426 7.91895 cv
386.711 7.66895 387.068 7.54395 387.498 7.54395 cv
387.924 7.54395 388.265 7.65625 388.521 7.88086 cv
388.776 8.10547 388.904 8.36426 388.904 8.65723 cv
388.904 8.8916 388.791 9.13965 388.564 9.40137 cv
388.115 9.91309 386.809 11.0615 384.645 12.8467 cv
384.645 14.1182 li
390.117 14.1182 li
390.117 13.5439 li
390.117 13.251 390.063 13.0439 389.956 12.9229 cv
389.849 12.8018 389.703 12.7412 389.52 12.7412 cv
389.391 12.7412 389.254 12.7998 389.109 12.917 cv
386.479 12.917 li
387.678 11.8975 388.484 11.1904 388.898 10.7959 cv
388.898 10.7959 li
388.898 10.7959 li
cp
f
88.5 27.1182 mo
88.5 18.1182 li
205.5 18.1182 li
205.5 27.1182 li
205.5 18.1182 li
322.5 18.1182 li
322.5 27.1182 li
322.5 18.1182 li
439.5 18.1182 li
439.5 27.1182 li
439.5 21.1182 li
@
%ADOBeginSubsetFont: MyriadPro-Regular Initial
%ADOt1write: (1.0.24)12 dict dup begin/FontType 1 def/FontName /MyriadPro-Regular def/FontInfo 7 dict dup begin/Notice (Copyright 1992, 1994, 1997, 2000, 2004 Adobe Systems Incorporated. All rights reserved. Protected by U.S. Patents D454,582. Myriad is either a registered trademark or a trademark of Adobe Systems Incorporated in the United States and/or other countries.) def/Weight (Regular) def/ItalicAngle 0 def/FSType 8 defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 32 /space putdup 44 /comma putdup 51 /three putdup 53 /five putdup 61 /equal putdup 98 /b putdup 102 /f putdef/FontBBox {-157 -250 1126 952} defendsystemdict begindup /Private12 dict dup begin/|- {def} def/| {put} def/BlueValues [-11 -0 674 686 484 495 650 661 710 721 241 248] def/OtherBlues [438 444 260 266 -209 -198 -153 -147 -118 -112] def/BlueScale 0.0604582 def/StdHW [67] def/StdVW [88] def/StemSnapV [88 92] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings8 dict dup begin/space <1C60D8A8C9B896187A> |-/comma <1C60D8A8C9B89DB7C9B4756630BFB06276234AECCA3BC685A5120ED7E73C100A605F362E52A669> |-/three <1C60D8A8C9B7BA8F622456C4A5B0CA9B1BA284AF806928062A6B7B09FB3F0AFA0642E6C0751425F2912B774695F4573A7ED10CC8657328CADE6CD5BA97A6C5BF6C1485B23CC65AC596605B697818C329637772F63BFEC9BF78A141357498BBAC8062C44F8B28D5A5EFBE38074FF4A38C9291B6291D33E32B9904245459FFD3AE6CFBA6472FEF21B7BFBB29FDDBA248755ED07D6E4AD20219> |-/five <1C60D8A8C9B7BA8F622456C4991FA35B552AABDBA410C5FE2A289D1C4B46CC6EA81B6F378E0E9FBB887620926C1C295BED9DF5CC60E1506BC8F14C40DD7EC5F146AE0B602E11477020F8E0DC1E61B7E5001ACA3564CDADF4245B4EB166D458A0663DB06F2579480E048AFCB0FC> |-/equal <1C60D8A8C9B7C7F3AB181AB0C0D4CCBD039E0B840C2FD0290F361F5FADEFB5C66FFFF03997F6A3C47D6E28F621A8DA> |-/b <1C60D8A8C9B7E2CE503F0CE2BC5634A8F8728B9E7DF78E9EB37EA1AAF5A6E14429B2FFC30BA7B2B7F7056F226E2401F24ABDAD5426247AC27BE4FA97CE94C91E5B97490DDD42E9AC1499720E52A641A6B5FD3039B53C33A6C3FB59A9FDC5809A26029808C985DEBED644B28F1427AE3990CDC08FE3F67389E1C6D971D03C58C4203806687562D626FE9888BA19E8E374C457B0F0CAD2096A35C2A25CA9F88F3E7B91EC8C23BC> |-/f <1C60D8A8C9B8469EE0EEFD5AEC6CA97A72064EDB5F8138E6D1529C05D71AD800DE9767801FDF34CB86E1E21FD9D405698D46905E6F519DDB7CBC96570BA09B7E74CE45A9784C89ACE8876894AF309C859106C75B1212CD> |-/.notdef <1C60D8A8C9B7A73DC56ED86B010528A4AE924D9B6A4AEB6B57364CBBC1FC7743E3F5B16223C8BD8911534CBC6ED69BD6AA5A2C449B7A6EF268B5A0D64C6C74FC81FE7341B7ED82094E8390BB44FFD88AB4DB74763338FA8306E917B17192> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/IXDWIM+MyriadPro-Regular /MyriadPro-Regular findfont ct_VMDictPut/IXDWIM+MyriadPro-Regular*1 [32{/.notdef}rp /space 11{/.notdef}rp /comma 6{/.notdef}rp /three /.notdef /five 7{/.notdef}rp /equal 36{/.notdef}rp /b 3{/.notdef}rp /f 153{/.notdef}rp]IXDWIM+MyriadPro-Regular nfIXDWIM+MyriadPro-Regular*1 [12 0 0 -12 0 0 ]msf88.5 68.2842 mo(b = 5, f = 3)sh%ADOBeginSubsetFont: Helvetica-Bold Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /Helvetica-Bold def/FontInfo 5 dict dup begin/ItalicAngle 0 def/FSType 0 defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 83 /S putdup 98 /b putdup 99 /c putdup 101 /e putdup 107 /k putdup 108 /l putdup 111 /o putdup 112 /p putdup 114 /r putdup 115 /s putdup 117 /u putdef/FontBBox {-1018 -481 1437 1159} defendsystemdict begindup /Private7 dict dup begin/|- {def} def/| {put} def/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings12 dict dup begin/.notdef <1C60D8A8C9B6079F6C9C5B6880C89408E8AD9743F80D45518E28653C59C8B376144C36> |-/S <1C60D8A8C9B64EDFB7523A7CB42EDAFEB7A57D7E602730D163703AB2E3742CE0B6B5031548F45E27EFEFB540FE387F8D57A682608C79329F4A9151F797C0BCE8B604F7FE451B11641163326012E74FF90725FC4946BE08E582C7990A27F05BF122930EF15C33C6A81641E7FDAB6583B2FA7DF36B61736BAEC2A282E5FA64D01E02E9F2034809BFCF9FB16CEAD631B349973A1734AC0C894FE2F2A758604EB0CD036EAE9087D8FFE9EBB3F6918A69E2C9D04BA54611686354B12441475A72B74E> |-/b <1C60D8A8C9B7D8BE16D22FCDD8FCF7194897CFC30BADA8F67F8875F9903B2ED36E82921D56167F38453B5A93340C5020D0611F38DBB18C6CAE74187506B2AF43DE20531EE5B49E1D8D8134DC87926A1D91F0E7502F24D2D9AC69DFFC6772A16DFD269EEF9B0FFC983C0D5F96843F43A9E372C7BC2A591AC769DFAD44A51C3D5BF85580D46E4063D60C7F3300CA1AC9E39BEF> |-/c <1C60D8A8C9B7EF3224D14587A8B37D54D8F0D79949CF14C9CC9890F2A6EDAA42FBA7117A612E13E7903C5A9C5F0200507E43E4C5E8B577504A53EA8A3E180CB569C8E885144F7728A2CCF0AEA32AD779FCECF91E377BD59B10FB864AC6580EFC92CA06227EB092EEEA6F0A41DE0D0DA52550ED7973070D2B3954AFC87D3BB2A46D25> |-/e <1C60D8A8C9B7EF322BA45AA2EF7BD5EAECAF85AF93C215781DFD7DA13F94BB4115BE9214BE159174D684F62C2005A0180C6808F64A08B396F763189FED746BF18ED4EE6E66DDE691142C37E3D614F8DB7B75C14A9F846CCAD13261BA0F086A233499153D3DE84AE55E921B6458DA81ABE3A274371E0DC1724FB71E09D7A2DF5E64CCD5B0577B8A6829193E633FA6CD7C2838A9AF9E8E0D8892F0FE> |-/k <1C60D8A8C9B7EF32163099A13BFF6ECE644B73CCB6EAF163A77769F3EF6E6E4A947F32B52406D9A57B126D470E8673A1E00E32E52E> |-/l <1C60D8A8C9B854D0F4508A7EF0C5E0071B71FDC5CEA748F1> |-/o <1C60D8A8C9B7D8BE16E0CC961AEF519BE656EC753A8172FD3365F902B7C752134E0D6062F2934F0088DB7D58C66CCBA57D3D7D362C8679BD71F98F68353DF00A6FE4BC9DC38D8621ADC978F735588AE608451BBF7B1F36DE1ABDB4D743E861A8CEED1A56243288AD7237419D7149DAF8582921DC7F71072F99464BF4B424500A0E0A81AC> |-/p <1C60D8A8C9B7D8BE19C9920B65BF569755CBC7004398C5F3E07B367F0E7B21E557936DCBD9EF9335D9341C63852CE0C6CD4F49B90122A57276DE63D17D21D54F902070BE3CE79ECEAFFF0AA566ECBAB31BF348C6D8C56B9E07D665CEA291F28872C6AD93B413125AA4075F806569703377C307FA20494A67837D4FC26FAB7DC94721A0B384A23590E20FBFB60312165FBB83> |-/r <1C60D8A8C9B7361F024500926F06869CAF414F7868F5156DB8CC460EA9477D01645E9A011D9746CB6993BDF7B2650628B9E15EAC73BA376BEC45E761AF9B7A77C8C55B8EEDEF93F167A7A94770404E8E1F0D41C5ED2E00F6> |-/s <1C60D8A8C9B7EF3276785A356AF9DD9181F27C4252E9DACE79B7DB0370DCA0F85F2A56C0E905F3608D53B08547BCFA1E15664D76297FA3EA82E19324C21C3817083D0B133768886E32780B3693CC1A54C69A839D656ADAACCF3EF0C2DED6AEA97A43D9D5150EF29F02BAE794D0AAD927DFAE8C63D2C80CFCA65FDAAC0B332AC718C253D1D2EC2E3CF8D5C07F36B7AE5922387582C705BE031EB76063A112BF895DE22DA9D9C7170534EB3741A864E522B78EF0730F66150AFF> |-/u <1C60D8A8C9B7D8BE298ED182A3F33DCB7BE539E6C3399DF0FB84931D328A058718BA576345AB2E09C6F45BA11DD49FF63E46039F6DCA1460946638F085A9C4202F8E676A0955411ED6C0E7E9A212C6F8002DEB99D3B9D78F19BAB4F5709645F4B6BE5E366BC1C978> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/IXDWIN+Helvetica-Bold /Helvetica-Bold findfont ct_VMDictPut/IXDWIN+Helvetica-Bold*1 [83{/.notdef}rp /S 14{/.notdef}rp /b /c /.notdef /e 5{/.notdef}rp /k /l 2{/.notdef}rp /o /p /.notdef /r /s /.notdef /u 138{/.notdef}rp]IXDWIN+Helvetica-Bold nfIXDWIN+Helvetica-Bold*1 [12 0 0 -12 0 0 ]msf0 10.3184 mo(Superblocks)sh%ADOBeginSubsetFont: Helvetica-Bold AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.systemdict beginIXDWIN+Helvetica-Bold dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/B <1C60D8A8C9B6079F6D86D2961CAF81439F91370DD118B66018550AD01E9FB9B811FB259D586568107A41A9FC4447F7E941703E573C108ACEFF9EEDCC441475625059AB6F9DE01EE73B9E3B5A59D72DF9A62E0B93E3EC5CC78FB4B07333FEB5838906C427072CD8963E0047555D77242142A6A1CFE1F8DA50B582E38A720E5C3B2BAF84E910386279078C5309261DF084C30054C5F7785118231EF63C44D47C5D3A0E12F0CD98913A840F49DFFA5D> |-systemdict /gcheck known {setglobal} if end {end} ifendIXDWIN+Helvetica-Bold /Encoding getdup 66 /B putpop%ADOEndSubsetFont
/IXDWIN+Helvetica-Bold*1 [66{/.notdef}rp /B 16{/.notdef}rp /S 14{/.notdef}rp /b /c /.notdef /e 5{/.notdef}rp /k /l 2{/.notdef}rp /o /p /.notdef /r /s /.notdef /u 138{/.notdef}rp]IXDWIN+Helvetica-Bold nfIXDWIN+Helvetica-Bold*1 [12 0 0 -12 0 0 ]msf32.667 46.293 mo(Blocks)sh%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
/IXDWIM+MyriadPro-Regular*1 uf/IXDWIM+MyriadPro-Regular uf/MyriadPro-Regular uf/IXDWIN+Helvetica-Bold*1 uf/IXDWIN+Helvetica-Bold uf/Helvetica-Bold ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 14.0%%AI8_CreatorVersion: 14.0.0%%For: (Alex Bowe) ()%%Title: (blocks.eps)%%CreationDate: 30/10/10 7:29 PM%%Canvassize: 16383%AI9_DataStream%Gb!Q;kuo%<ddFXHhh)B*a^Fj*5_(PV3=r&Q84&8P^qnZ`LUD??+6V@=8ns>K\38p+q`@s,13U'/.[?f-kuF"5cgS4GX]hLmZIAgI%>1V-.VP@]SccB:eRE=V&)jg5hP,)bYU7u:(-mAMo9V\QPSq5>Y[B"rSHE2PCD--&:hJTsYme55;]72<4lriER4fMu\lcj&=?eLu^%V>;OO;Jru?.-Y0Rq+n]]W)crCg<CO^?HA`:kr("KPi_1ArFO?WFG73,#+\Mq;6PuOp@aXI=Dft]j`^C3da.2^;$3P14RNUrc.])3%qbt2?L2,rSfmL`g\EP19;,uO9+Wn+lbsAI\JLXR$*PJ5g4a>mKipTtAINJk*0r6*YG0fSP7%p\n[A%GPL5u6oY4$T^rh:9bJ\LoJ%mTA/]#K1VWfC)c:NHXXb;SYu8h0H2Ghb_<2qTmQKXQphdfld8,e#`3-\>;mDadTq2rrsoK[II255qSur=kg:1(YAE'F5DH?IiA!0%XeAdr2Hp'&n!-H&U/<6-g[=d=)ZPEmU0Eq\O\bQ/EmUn3Dd!T`&'UA9?9N)Ul:ighi;I]&ne0FRA\^N%K'Q&'V;=_uYMC0`rR\=r%/HI`UC#r.(gC&&n+4!%Aeogj*F0'^(lC93dQbHDJ*=$`=XKK0)ec@rt>__9LFi.i\lh$D%&%Ou4Zk1^rne\5rcb#1'7VaS`d=".@%2JTmm;$e<>^pPS:_Z)guT<O5ghXB'#!W/hQm@Niq1p)"G71-PR7:!/uBn4hE05FZm&$`EmH:;VQd]]<%p'_CQqL<.%rq)oYC$;1'%_PcG0VshOdmOk?)-N#_qG\W]:e25:rEZ*^\D`J<'EZFl930;:&+I1uOb;<#PLGZ^UBm_#6&,_,\^(74$)gjuPh-ERZ]*iQFm_Y1D%>t@mH_p`YZET$5))4m2<j;l)liKs%$8gI3k:&5hD'mr=tW"XPF.]=#_.<u+TJkno>21eW&2jFMk([;-qn-`t6T9'_K'?M,,"J8M/%p^:'"'9l(a8]lff:bVTs2!$L>B_qem7)hWP6qZr?hBXs+g_8NNDkqL5S@0#(62j/"W#pCR:8A%bXiWBI@dk1362bI)'<.(;TmlJ;%^S#bGrS`rZ%M\\k<)>gS,csU`$'?_e+%i>W!'$nTLUJ)ZO%:9h&\1cLOI?jNJTJ[E.@9*hgP_l#ru_d#NqQ/F*P>*]9qF]Mi"K"N%rXJNF1*Q,'-_u=IAb*3@e$27c7nOo;S+^:E=(lLSc:LeTI=[Cdg87:+KKCB#;D+(NE)'VjerB//WG(NAGOdqC:AtjNaiGa@RC"u:%%EY<&s,m<(7ltuDPGb1@O";b.hY0V1VZ!+\5Br[l+Ze%s.oRngFo[Q$,iNSm%E^3_Q^1;8-#`([LB#(sU)!@ZT4*g/r%IjNo,%>b%J'#H!hR3`Es!@\MQi,uqaZn)r^HIXDm03Nu\&f<_Qi,Uk+i!h[nh63agERF3Qi,Uq-boIankWcqLd$U&K29puj>[$+rhB6,euiS&%HgY3c:\2`jD=[^uAs'j>"+T:!TpNsjT(ic&basi810iS<%@i&\)i!\H_68AugBL8]P#UXN%J#/?n2B?,p.2@%'"eB.d/Q[D,_(t5%V;njYY,#SV$*kc:P4.-HH%NTZ7g)d=T\0NgNpD@6!WTuCr]eLBSeI^gII`<W?f&ue8cJ3!I[aZVN6jL"T(8%8fcgT>k)-pkJ*Hud%o5KTG3Q.2Rr\(F`:MRJcHV3T'Tks]9nVmJo]cfS+hr_JFirsNqr);D15&3M[rJ#[!(5rKjr.Xj(qHMgq4`-gP,W$-XjW5PQ/,Z==%5Oj6WhK!AbhW)6hmdG/+aD^\M;<^7bX#s/p=2@h:4#2(P60U(Hi&gi?XhaP'cT*(H[qHP,O8i#>poadL.1a3/9b1gqP"9;)nD'n;%;6FVYZpmHqJ6!pV#KfBnQYAh3U,k^keI&ZYTRGa8_BVbWIn;7\bE?tS7^O-Z:Z.c(:Sc20'm$.rk[1(W1mc@TQV-RuAWOuGHJ'Kj%S$iEa)Jq.$Xf[EQ[s1Qnp7lPi;9@Qjr2'*TZ+W0T]J#-1ao+oYJb2oHYO/!Zm,5';28?*#G\Y;1CBl,]J1@B?qLQk$gE)tUT_FR*%7&Nq3E!i)KV<12@-fng>ZOLKhBunpJrgU:(RenL_nJFnM/,6`cm1O-E3gmZI$G\[jpI&4!8\)YW&+qkd1<-;rL>RR+EGjhrGo"Wb%Ac<XFn`9E!F,A_9hf%%Q'hl@/[bh+pkgB(n7CV)h^Q<*p4+;c^g4N/_+_1AFhh*gj2PXi-Z_$i\dS%(?:E<KiV<qH]hF14dV<om]%>hZ=2CQ2r4;VJ<R#Q8u5;np_]eP#'^=f-;YhPcM]'qAL-;JgNVKD4P@rSOFY:IF!Bi685Yo/_=V;lZ$_lb]]Fp1f4jh]QVO6CJ*O%e&'dN8o9a":"$J(Zu),;9ir9pU]Zd%^lrA&".$ArH$QB59/XXq]j@]_H'`jUHFF3gkgc^6e!-F.c"=Xrl;Y>;J^/$;^%#ECeXi4#%8mMj=U"jCZC:j)8gN\#2QhoN1XU^FnM=A<</%411>5c"=]jEhh2(QAl$mTn`KALsM2;j>Th`pd7l$]4f1SJp_DnB5#Y+r':XZCiZ%YOniI-N'MC.Yo.1rd.K15p^=6J$hoAIoi,)GPi3KY"#hI6nbdRSssTH\7%:%#,nNen*PS1rnQ\OLa;91AtoGcmr^,1H>/j*`cf_^%Jj9./2Y<,4%C&m4^Z.Pg,9mf\9^*(N-iV*LKNN$fdsqqFKZ7POcb;Pd/#5W.#Mh<#'TWsJ2u\N;bESS;W5:jp5UDaXW18#?3XBV=%50f`L]fKX7s$00QYO+UdFcf@3>NhgY_Y7oq1\M]-qa<82KRP1if-?UFLa5#/M9^hQBYD_`MAq`<7a1"L4K:\?om2U\n2>!:pI_h$%rOlD_aXU:Q+NTWk,<AbL*OK-&h8+HE1?bKQfP]6s9%=8p06=gf_++=sn[^Z(YHMM%Tn`c(`G0/&<G_j'^6X23;/I'/IOHWO8kOD]%EaF5AR3R,NZd)m$#PICISU,$G6=>*B]T2an&PM(!$1]"ReTS(n7+ch4*Bhb-=ktr.W7C1J#F-Y4iKP7_B/FB#Ifs$W/VOi\<F2jo%hh*!gh:"Y9+I1Gp<1:57o5b4<oGtj7V,"L*)cVs:C7lRDTR'K/SmOO.YJ4&B);Vbp83ar[cK`,JWcZSqrslR.^!^6#frnoqh$V.9%dKTYLDnXZ,L8@2q-5pHV=+B)!g<IYNq("=Y9k=0XA:B*@%Ud)?:E=]>4^KrMkg;]*4m3lnT%fZ%//crPJB>Q:c_#Y0S\(+l$jcdc%eY(<n(FtKj;IW+,e.2.&H&,eH5O%(aDsu5KgYI)Q3hbuNri%j2*?eWV5pJMhV:+`>chaA=Bq[/2kq)#H#+D&8.S*#kDb`rfBr1iu%h.\(Pfjf;jT5oC62E\aT.Y.<MlqVcOHd,m+gJ+!9r.sGUO>.Kus*']IJR<)][toRO,m=V)P.&"$s12*)lM)"=_uJlSG:RA#a!O`[%)HB&@F&ip!2G2$,R]+V\kP[uF>_&]Q2X=FoOKnMNPT*-qWSnc\Lfin\DVOV#fJh)^]iI1:S7hl0N)O&f$uOAgU?Yrg:"G.G^Yk;'%YZof\K;ODtl(j"a2Z+f3Q<AT#>-'Jmp:i7l9:m^&p$>;JFObV+C7?QtZKE+-Lc;,;ZSqLbq<tJ<?F\2fhqTN!^tj0gDLJ6$J'a6d%o]6l5r@;Ypca")=[;6:Lmk-CUG@Vm0%Ci"OU8d;nrPb$i;W1Uq.]813ZI$uc!t)_d9$OHK+,qZ;]Dp!+p8K^FR>W**"ta\VFui(F%M2`1K,u--hLX7pLLidj^k5PQpP`\:kaZSLHDO$DCk[TJK7XYJi26cUUl2JN6[;9O^%88T>Nr3\uNJMJ\f6Bf?&0tFG]e9>`B1kbY%D4CZe^Sc7O>K^&UkF=ZdK'2%lY`6krD,e;8Fn,qm;nEcBd\<&(s62tX(D([doYpJ4qUO!Hf-U>un-]\YX$.B*39,.T4=DC]eM0o[%U$U3bmoEWl<-mI;&29s%^bp^FC7RhV,d@CXW[=nq&JSE)]d]`a;GTteK[f=pqh/K@g!XFP=_3M^9!,Ni\_fTnD@cU2lt$@OSW($H%h(#-;o?&]"D',%jdZmkq[bgBphU0fF13[B/TA$]!AF#t1rr%kCJ$o,&R`2jt-a]?+Kj*VWB/,,<KiHT([*%XaK?d&XN]r/Xrgs[c%k'X6(peRa@>8IDl-N0jj*72&Xn&;)<+Vi4i/kEMC^Krrs%I?<UV[s=Ni`3\l$&`6%KZ)A=lD3IkZ%^bf.I,N$=5W;N1j,QBVptVX%em;.RIB%I-<1]QO1`_'Z9E&iJk\L3o*pSjZ5MV0jHIY<bhgYUOC9kV+&(c+BY\q9j6)l/HGPpde!qGhg`6/)jUU9dnYQ*V8pcgkL%HHeqPJ%I>QT%JV9)r%s'>4t1_G,[S!ONRJm;jflMl,m+o2QS,&C=N*`BdscAr6JEbeVf/p)8drs>)05Q1ps&,s0L6b9?=UM4gk1.%%QLRTpPIdOR];)!q(J-,Z*LuV&%^:P%d!JH:\na>qG4He?LLs1a9J)t%t?o0AnqG(OJ[4.M=Jb"BD#G<n=J`-&ccFuZl2s:-I$E)%8Ct0VS&3G]fc^9ehT]AKlb.U/bEn<ND4>]"&s_"R:Q0Q"dm?K"hQh&OZuTpmqUl[jI?Tc"JbZD?lR:(??6KPjCGQD,*1YQ+Y7/.]%GaVB:nqM!`L)81CObFgoZt[-oeS/b2+6S9*#Lt;l'19jOhlX83SI4X4eN\kB7P3A)psW%l\<r&[LetXUBj'P>WC:bbkl+N,?J#55%cgKC'rQ8'6g$&HEbnjn.mRsICf#s`W;U8[V41)Q;bdHdnlYRYG9`(H.[f`;'MWZEA<1AjWiZ2&Ns3?5f8=S>+>0Iqaj+6qo[Z;o$%/nM6DD8/qrXD:..`RJ2Km&U09X*l87Vb4;DWj7bDH:bO#Xjq2TVi0#+[e-QT+6>4/^Vm%-d]`@C&[`a?'j:L7M6KZ(c).Li6Kq=!%U#,T#,eMo;U[s.RqR2X0)L+MhHZc8S2][CT?NsD8%'(uQ:&9U[ofDEOYTn2DIY'/N/4`iS![=_OgIKq<V:3OYC&d0"L,eT6f<"T-%@aE(d&pc/Z--5+=lrI:p.]F]-6dTT>+d-]Ln.9:-)RT<M1r#^SE?PX'5/d.IN3qDKUg8j&c*\9H&e.sS,su*2*"%ko-E.NkHNM\#%D#Y/SY38PNc]XVi5rPsB$85hYUqSZj"Ji_/b((at(IC)uA35^T,0<^jM^0BE>3)gEiYk2KF?85%_8>3P1o.+59tF_=o@]R39d_K(%K]RlU8mE>ema[q,c"bq05M<_fiucW#8U:Hpk6@+c<CBjG,X.@38<e@<,!<iBemT20i=)43i]DHJM6Us#f^?Hf':BBZr$+mKdA_HB%9!_:a)Og)d"O;"]::'dE^8I&LeQ+=pUaSsPd:@u>A?UB+Ik15#$[>2\A5cB1-T4],g[<"dr7pQRCJCd",1H/g:UF/7<(Xc4'2=S5%KMg5L4uH_]-Eu5T[d#L\^>g/rW7l.^nP2bER\gSD8YmNW-VCu,CS_6,P`5.R<+$oXl9/,JMQ-U2.7seCPRLA,0_XKD7g[n?C3rL'%?:*1^K%aUs`KTk=nc2/!#nk:O<DB;$E9^&r7JF!\NA[5@Qklj=$]8HaVKc+bI]5Q*M%&'q[HtBAX"WWPhj1SJ(s*bkCc^DGF+XrS%,J#;mP&0VFW8Kq)PW,mSM1`;ps+^+5op^%i_8[!C.#/'A?453Q2G3R9VZr<"[Sep3WMRn11`Ld/pYt>J#+QK,"NTeL.Jm([frgg7%ZHMDb:Q$:1/1n]@L<c@WkN?0b5:kKgOt:W2:oj=/0<Iikoc1MYGRC[UU`=A@TaN6FX7Vu%rV&p9c@Mc:9inTti[/W?J!$/I#Ifp#%<Zrcqn"8M\PiPE@h$':P18K/Zn/84Pf66n<K'j57$83^D]OIrJ`*p"#)/a9okn5NM4PSFkYe???r/g.\%j9_tC#2-Meo11`q\P6*%HPDX;+Uo4"C^ik?%dW3\>$VV0eeS,@L7'(_a?3J6]`d;73sLZk5sM/9bZ$ufZsCf#*L9l.'2E@aHpWh:Fc++rlP+%:Y#D,3\W/M_%UcK!3ot>Nk#C\"Y@U^F&]$KbEdU:*rffNl/??3M?(0A1&Ro?1"A&ralKnL8+;(5l#W%P<gM!!uXTTA;Y">q--$qV[-Er$q;;m8a[%p#8Wa`X+pAX7(P$oHd;cm_;Zs6,nejBlX5+>1B=Oo;g"uoeSGn2`f4[2?g383<gc04-<+DS'@up=?aT*,k2$B.B6$_mcc5`SjKi@%6RjYbl*F%ikTU1rrS(Dc7n9/a=,0C7Y(]UIVd%fbI4As-_HES:p"D@`Rpga?]OnGST@l1$@,9VLmdKL*qZh%pZ^2Vr]k?_]P<Cc1%)jeicDXh.\0"5kEGG!"?$J"-)DT+$mjpITm^?-3o*Z!_^6.%gf&a:DsDtV>bca\48lhoqCG51ZR$^gMmS'LTk?G3s,fIrbcIb?eC%b$EDmHZ-l$cT^uN?6<uoo(ud;lB`Sc]pB7Fh_3:Q]ruceYNoE(=56r)T>0+YIam0-J,!0Fkf_^ubKfK-I1?T)Tk[,-\8htJlef7<%f3a;0[<ulRZ1\1j]?2]Hp/^,7I8I>2:7bO(Za9:tKD7WZ%k:_mgl\U0.eF[hb>fpSkcqkVo?+1NA'r&`dq\J8Y/WI<HM:Y4`Btqu%K0ZA)mu1lE*LL3bB:mStK-kp=ILh\V<;j2UmB62tG/(4fS80G:C/JdQ>j-b<c+86b?&:-)qod8nCn[90A,Ih<Gd2:_:Yd+h_O'IQ%5OC#HhK53a;2+^UIlKO&cqIaup2KW0gU`@se69F6XB3`o+q'qjs0,r?c/c;'cH4+o\iR0=XmXV,9VM2F[.<gdX6;k\EZaH:j2Yq?%BI9nsWuW/uf<GB8^2@9W`.aqGrNn59pIk88@.P'>>uD$SjO(StpZ=hA?UD_8m80jTC/htb$O]S#[f-3XM(A5'qu*pFN=1G(VKSes%'uqoPl&g]!f_Tk2=6SV5\[_VjWmFGRg\m62hOAqq?UiSRkC)2mgAF,.IMu4"@D04[),mIi48XBoe]!5SntEWupCCI'jMODsTekeS%5Atu(q]&V7<c0jVUC,9,EO#+JkOjI@!F,;@mGRU&fBAZPqP**/9".m#:q*20RY?Aa',Luok'hGMWN6!pmHTiK])V0"//A#(;`d/5%9dk*D<7AaohlaAnALW<;g/:"\J$'$!%2\<#mJhEg/+eU?hE8Q10(`]5lUe>eLG;9K<P(:Jh:P%i&$-EpVU,Q@]0<f0;@5jh"N:lI%=/Q96DIfHM>/(YRk]Qi&kr#Wj,OP3F!gF=#f2I1XFtr`*/$dMTX1.]*Kmq]]>b>"'Ki3M3)qro/N??Q%IQFM/b#OcE,7FJL1ijF:%khB9^i>BmM;0DiGV>^1oD+,7e?C9t.UG3WhkYLef;(33G&emEKs'rSR?0I&KY1kO8]Kr6Fd%EBX4r.bC%olTmg2Bt=%J84')O7,N%2h+u0lgI@<]o*7U(,cs>jdG8*Yh&726_Q$hOa:<UT/Y%J;5#(Y\55#?n[e.<l=`JWrN1[G$M3!,,8i>Xp\rmOX<'Q@qti<`.(#oe%g)^+8k;)jeqP&=tMCf?<<Obn0rB^kIdSEo/6>*H^YDIQZ[r+r:`BoQ5.qe5BX&,aL$Uo1Ml?[5pqfTCB@2Tf+S5TUHmHteSoQKc-%4O"cCd<"YQA6YMQUXe#[a8g!7':rOSG@R7[q]BQ'9NrQCWRcTCqXO'+^3pqun>DW)NsSTt5HDq*WV+SXc'S47c`FZdr6t8RgTT8-%B^B*^qL8@s=0MK_nP?>AgZPh;]DWK)QqQd0X<)<8ht6;Sl9Ng9?Zl\E:VY+ZbUH=6M1'BX/LJ,Yppq:AoW.peLjb.+pAJju4T=^i%Mq21Ne!D0LfV`D'hq[9*$U;+<="EfZD\Sg^ih,Z6QB`RIrR7XsNdps(pY'r[e$]!Hq_:BG\bX+F9qOXneM042[eWCb54q5e?JBgf%I9QDRSF1BR76Fql/B_sUYX/[tI+AW_&MMhCDdHV9S[F\^(X2d)C3/E]mnM]q.33okS#mc>m;3T@Y.`B@quD.,\G01k0C5"n^6NJI%2ON18YFuA:(F%GYZ_b[]dh:pI1](R>J(hJue9,uT=P1,c%@0)bpD6.j2eUA=]T=CsS[I:/H`jGCB3o@>.rF&Nn6uV/j7reLpVgUh%I'BKg(93Y-jg1=@d:1/0>l#LA-s5N\rAS&a;CF;Z4(`l6#I@cU@LHI$H7HYuH2jNdf(DCJ8M&B&RM-&$/o3m'Zo1-5.u8DcS`cQn%jFq&YgjWO4gj3Y^]#o_19Aeb;SLIWtZ%_2&K.ncLV67%Gp_d#orF80f#BNX>U!t!9[6mo!M.(rdP"JuQQO2[MFE/nVqat/1,*?)P%%\Bi-Dl\Go[Cf@/OUh&hJ[qhX8?)Pm?JA5;%NB.f>G+%7>?"g]L[G50cDH(NpC$`p:&j-hf3$\RN^,:qMOn[fm&p[:];s,e$t&e"%#nS:K^#\2[M:Go^m'M,3#S6.R*\@?cEQJQ&KSmOT5X4F?OYU%9"V:d)^g%lH!IcZ`4#G@88"9`aHeP`qch!4Bc=60%YdY@+%OFS\%If)p'E"-;2Q?Ps)ot<J8bVJE6Ms?[1(Y.GP:Tqto*&7PPEo5[-cNbOBBC3o^VTM'I<!5k#qT=f3!Zqps?5)hI<j,Wh>DrA+_h=%7%.X-5e9cd;!F)Ls;<2gt%QrHHJLhK)Rr>'!CZlb7Q0,2#@.jCsIZr:8C-OMAHqk:UNJ(8I-&QX9k>.s\(,q:FpqSTqWgtCHYrqG88%MOqfa<@/g:Zdt$Z8No`6O'UJ'-^D@<]N]c>Q$XiB6s,?3g&JLk/?>@j<V<TMo<u`9CQ84VXs?9PZE/B;(WCZ/PXUSSI9;=J-1LLc%=?sIrCk]uK0h-=Np5SNnSJ+G/-]^lOk!`6dF_7GL"mDo?1%kuZCS/q97?'Ksk4':GPAuA;0U#ZVOa[5eA3O]*LsEa7D/V:KKqKfK%>Dr3Gqi9=TfeAZeq)j%0`\s%SXO#Z,<o50S8XcK"(3-7ojP`mk<h2KBd@'BLooG:mMp3`8=3"TXk+EiX]5idKQTXP8:OY&'a_b0q%bc\)+O$F(BD9G5SW6@BL.*Y=8-)j3%Ud5.q44H43=:<.ANK78VIoG?SZ$HAk>`.M,b_WB3l*XgL#[:_8lU$5[HV).RPa^Z@Qkbo^%p#&uSG+^MWr$k349M%-PW%Yl1rMXE:FRlBtMjXN!(s.*@#^j^B$A9_kl*.CX`JHOFV><m`>ksNP1W6(6/0u-TkEf`GYG@XMC'RT_%SZ$(Sf_f1dqY=[>@YFHe-#+C.bN,'#0mGGuAQB_UP4D@WOI8!iM<WKRQn_<lR?L2nR$NAb[LuoV^)UmqL!'BcehQ?QiV^LYc<W#)%EsMteZl\OOjbE"S_8)'PPqRp`*'_QDlu1..\5:2W\IgF(F4Vd2KU)>rd[<nCp^h77<B=<snp$?27Yil0;-b59_o>?,Ar9mR.?#rR%.@Lu7on"`\OcXE?Q;!$l<&XI'g9<?]5DY]$%P`&gb0$r]5hqM5ak#HX(Cfni?%Lc!]pJ^H"[mq\fS93E1udLUDLd-'rLSjTM6-JM%1PJsM>lbLnKn^SQ'o#E*W>35Cro3ihli$VTR9R/PB<h-QN$@oG+Z$E]B.utbl=6as7sI[G3q^sn(Ok6F[UhM$1M0@AqL1X4XI)R0%/8Ipf8\8nlYXTSk9?Ie^#Io6<ir_E2/'U)h1Dmjk*f_kd+3OaK(*Q8d'$Rno`OSBS+sGW1K]H7Ci1kjR'Th\Y0t,trf1gJrT=Sdg%@L@?)P>;6>hN-3$H$"95on*9iWJO9jYq"i72Ii*$_(:n2dZJ-nXl2ij+$@:\_*"nQIN8FkM8<sm3`1,r6r2sF5XHB";n<Z$V)p'1%.4kfiP>>U\$Z3+j;j\S2Fs;*\q+3i`Ot>RRm++?Rn/``W8u#.7W+p+3O-e.K49pnqcaRf_H7#9>dtd\hPL-rYY#&^i_MS+!S+O^"%!2(pq53M#&DG7l+Z!ti9,H&*i>P9=!d1)S#$A*C4Rd+:e9(q0;9PAG+/pYs#:^'\4Kh6X0/nu_+fbI4?ho0-7Q9p,t9FAEI1>D"g%XHW+UVQ`VmXVNkWaa8CanrX`O.CkT8`$(aE7pqDd>#"Qm`&7+Aq2@#riDSZY.WB"j%cKsB.,1X*]PV)HG>VL@!j.hPEmg[gA04rI%1CT%72iuR1e23Q*`tp8KX&^]I;Y-*2I<BrjBscW<=JI%n-lS*@o1.?GpQg+A034iVQO8$23ke'NR@V>N9eq+f.#g\`%k_l9>=s)u%e'Md,eRXXtk1GH:7aPg'fEKQ5$5s@oRDRf2c:?H!dalTSgjRQG"o^n7>B5?BXe;Mm_m#+e,hA(Z%[RN2KDt:^OptN)I_"o8/YknB%bb-sr]dP)o,H4he/:P31;6lTuC)1A=AC6c2c!Wc4Ddt>GjM#UQEb^K\0Z3K"B%k;f'$QUtT8?hrE%[gfFl^jFn9j:kpS%(sltumM%Cbi(qo'LuHL1`kA)pc5/F]*Xb2#3#I(FbNZA8H*@cspd%_[(aL[,)KH"q-h^9g!g;.!+@7ZP[Gb;'<!n=Uaj=bJ%&!J[oaZ=Uak`%m/&bL\.n`ISILeG6:&M:R:J47Qj[!k>UYhW2mGFWXo2a2R1&,e;KSL&@11ik:j3boQRGH].N]98Md9<G;mJhP`6oBB11^*I@R-fq%FAZ(WF$icX,[Don/<.3`p0JD67$$/'j#h&M'\*?rL114+4k-#tALV)Mnt%skGc?V.Vd=UOHKmpn98Rn6m)688e75DQ.*o<^p&7lC%!<aBNE"TJ?IVR`J.'&0;)r<1lmG:*?qT7uD&<`qt.Qf_'B0bn,]>YD,^E&VCN/7T7"Rua'=Kk,a(rd8%.:nPO#+%.kPG&p($YY>p%2sKCh+Bm'=IX$&1^6W]@5*l%,Vu,9l)imSo>p_e,(qSc6\kIQ60m(MLFP$hI$8HYE&Tjs(;i.1u,Y$.Cq.9+6]&X,X*%a.((qO[[%@K]t)[,>%@FNG,:3*L8.0m&P3Z3WL+>tc/(QQ/;HrEuN76`7M#cu09mFtoO)]&X,X_&aO66`2mha%)M6F;/M;W"49',gcMT6!BQe%OC#lTDXt)^<`8GWnP['EP^JT\8?]t[BLqT`3npQK]$MK?.c;f)dqiPT[FH[p#Z%e5G.M(cX4D5$7Gd&taD?YSer]__$T:H7>jD1-%aAp0'8M0S.c@$m0acVWOOK/MMA6jg\)*)@_V68MOG1;d?LW9ap9'Zi$a*q9tao,slik;n<9+=nh4pC^=Uh[03]BjYr/D+gpNIRWL%mn\NPo*Rp'gI/0,L'>2KmKsTXQ:N_"$^$R;+cqs-B/*k-Z4#6(GfQ[Zk%jOtaN%7@X.4@\$^T5&AT+Cb'kB@'LoCs+pH(eL@liNV%#ts-u<fgW"-A_iMADkfAU\A\5="u&AhQ]DT\r-eR'j_!359Vk#R+X>h*8_;Lj4&'rrm:EVkdl[$6ITIPa#'KDE<uK359"AJnto(3%IW'9pI,NJ"&KI_TAiSp92(V`h(`!buP80:KP$.?)#UAliHi&sCR5.BHb,d@d`"[`E15R;nKoB8.UsUNNQid3Z2h.m51HTeFH:&me%db1r)c,$Vq()lJSr">2^FM(kC[YW+7ApECs`LW#RL5bPk]AI\OMjR2l`SP&"`Eq=;&VnI8+up#LL6Z^78gZ4#oT2n[0j=p0EdtE^%&19*"1ss2B6JR<VrSc`A/`Pd$IEX<>MC:K1HAf+7TL(A'ShT&!AU0PK7gcl![")LRa\f=2O<#4fPE/1bGEeqe'O;Xo+;^eq@O%W@%e_,=tHgH)DT-C"hN-BRhCoj-rK6Lf&OAI%rhCgER6V_uVGo+MW=BDBe!i$no!DDBrA/rlQ&gEOT;D=Kec=.*#8qG&oiksb$VFEm_%,aQrd43T_bXX#,Ha4!=b13mqYD.Z\uir(hSOi`OnSthq%O,:r2f))C\qSL0N;\0i"]-D_@=t1W`jR\UrVh)oS&=ON"3aR2?>!s\\%jrFS7V\%)Ai1/ic%+WbCF!?V*XgO)$@Oskp;/VcYGT('0flFF@F\WU6GVZNO"%V<2-PM+nXD3[2I!X7@D.EnFM"tWLF"WaD_Q`Ma%_8o9,(*")kQelF7ejC23lA#0$%3)fJ/@\1YNt`WBJqA+"<'<7<X57=<GeL^]1"")tn$17b'?7qP[?qjE2skk"ER,^G/KQP$$[S93%E"dSsVM^.%iLr;dGW7h#KHfEQ*=is5,3W"di?Gq.BG[%F4C%NhUXP6Y'D<tTc<]JK_^SHQJkOuXj5FIu@PQUu]?5uLj2['PbpW(:%qa;dcQ>(^jDc6?uVAT3>m>8aH+c<W#<g_O0^q%C0#,gA;-2EK9JL/uZ31icPlu=Z#\iJUPI^mES"P:Vb!A+,`Vt5/Imt?H>U(%FI%Tn?1Ur?l%k19ZH&=(QTb:s-/"iGIqd1@]ZAFr9)5E_RTaNJ"kk*elA(YGcnBj5uR!Cmft,/'2EBJWLGf1%?rNI"pZ8ktHGe=o>^D%dOHF2[)RfU,Cq#VlZ@q3*P7tF,#Z2SSjGg.1MZ!f";.X09WB5`F:kMKN&A`*Kgqk=B'RK.=/?8'RncB:QRPA!I[NerlB`qgUjbmb%%(+sE(Djh$4pG22=;]$!Lj7`,6lZ:<d9&?L'3Mh?@!i>I_D%K`-lehtdWkCX'FGY+(A'FNiNRP&>Dc9<;(15`lcO36iPK4=rJaX`%=B&_/Tl>k`=M"0.kRc^W.Yp&K3?dm+g_8YAm'3JFPR^[1=TNn4*)TCLnH;7`8I(AR@`.OJLVT+Yi++5S*Obj#?m%g4kCr+eC!'B7%?;gtc.kIO]&XdlPOm.E96uZpHA9SO;!+1i@Hc`Cu5!S11DL_$9<k$<q\^b2>+7;VUI+sADpMcc"210e)9>us5.smVpn,X>GqK&`(%k7s;8Dc-R;\#8DC9D>)3;QuWJA$#LREG$A*k*(DQMQ:39;'P?6+,lQ4U8j<LZ/AgQLU^a$Y=[?brCW*SHiA+%>:<aW?&^AA()r0c%n)N05''cJ"]>7LrXAJR&27RCiePs47mQMf2%LIA)5/L&Fqq@s86Clf?bBMu:CkUVm@YA%5MD+U0jl^JsTl?4^C]&U.`M>gr(Ldd>%p22d0;2#4`A*6%)?bMb/[I2N'n[G/7Q?L$ohUA:t0mIVn5.r["S_;mbp@$:^k%ML6r@XHu+lqkA[UP'`PDpBr7iIZun[Bd?E4Jt#%fSD\bLV7-:rhg4m\QC6j5<D$aV-h?Y/Rb9PGc#!rGa'U@EV2A`S)f1b2$mP$mhHiX?&H?fD@@4s0>39SZ9JcQMmaV;jGNHm9=jjL%`d'TdKcB%b\_-bthtsiCV>:Y7CERa*lM;(<d`_tj-/BY%dWen:EZINC];lRT)\G_uG7pel9fE@gP<PEfC)nFlE79W?Mi+?h59FLm%BY#Tc0P7sk&5C4"S/_Hk76[U)`m3YC*DI=n(+nMCYq`$<`]bPVUhI>A+2t3Kdm`ZQ.!r-rLo-)fV2NtDR4t'^$>0[9$TE&^>nkj2%+='mEVMd3I"Jg66d<&6jF:l6^'1UG>9h%NT:,A=kc6$Z0d<&7Q-et(FV.dH=p5ATu)EXB?.]_NP$BH*"QY9Su/XgQVM2`<G(F-16%8(10TYn<_pU/kB2N7I":FA[Ti/@Kk>d<&5'0X&d$7FO]mQ:1Sb:D?M>'h]@JHCZaY/h26"I-9Ocd<&6jFA_YQAC5Kr_GIN-aeS*p%@d,([hC"8ZMcsB%//D`[!`Sg2$UEa!n#8ii0tmcQ)Y*$gpfkC73I-lHFs()g@#qZIVKlNSN--l:qs&o=(FeIQ0FDp-,`EO>:;[O!%P[33)`I4puVBT.]XpS(a/iQ[AXND1MmJs,==TE0tU^lN1)CA$NVq/>a.T;_Rj;$'3?X470:t76YlPL1,=]\("F>m[Q>54PucoG/V%:%H]7\P(L-_*rP]<m=ef'$6CgOD_R\`)-JE*(W$Q20TVN3V9&XM6FH_M^V>Dc(/C_`*IJO2HD:#RQE7t/Zg+6+t@]/U'BYJF+l0o%+Xd,aO0^OLDVPrBY:3_@:9_i'@4Vqhg/<h-R2I&:Qf*4XY((UiLd1oMa7/-Tkn97t-C$4;]#gk,J/o8fG*;'43/S@e";urf^PJID%oS+sq#3a-^:cqV:0sWURT+)OEhZMhgiGk4>P#:(4([k;oL-f$;cPu0/4f():Ee$X@0cjXC.IqIM%IY=n%2j1h*nL0:o,2%J-KNh`%q5d8d<l2:[6DSQ-cS!9iNO)dc%I?\pm8A0njR.>OVZNU:-G@K&nE@S]WQ`;k.oqnBH)$V(?,VG-Je>9'%qCnLn^\?NqF:"K^29c*%h30$]d.C?Wh3*STI7pD#dR7pFhBH5@7i_E"F-"A%I%8u^^pt_9FcMX2'M\tMq+Ps929c=&q."X!7e0O_D[J'3&f>,6G9Oi0![@/X%irqCL!^HYnG7pneEQ?n&_bdo&DR+Vie)#%&`#@O(c4+t`AGsIB,f^RXFAq&KnO1MoH'8cVa;aOkj-!<YLQ$Do?&JMca1L:_jf.AR%rH+Ie5bF_N=iefY>eR!FXSn;uk%+$3$lq(/;$1U/,9Nfp=KBcL.adYDS9'DU)%"QF3?nUg1Q?Y)<U>8kHn@65T7h%jl<8fb\Pe)8%_0(%finL4t1e::\L6(0[0LW8SE%U2.[tiUgAL'&S71dr%U7O&s-&43D7>.L>[aW^gL+V1XAeR.6.AQI=RgQ#f&]D&bkY,btM-BI.%blughj=mIC`0iNk@2PXE^f8Gaj&-bL`m3E=.Q7cM.B7I/\EgK!?Beo.IMX6K\DF-smSQ(O4t.]B/U:K`B#fX!m!">ke5Y$_mbIKc%m?Va/R/=8B4n;n+KU_NZ^?uTj7gDln;i5Q`/B+/6'oI<4N,dq`41Nn6p*.We9Kre]at96elSq9cPD?rfX5(j-m5h_(^$WVEM]fIs%jO)ONGAh@QnSGSi7#=c_8WK<EN/ED.E>J<j[ZVt0</QIs/^1Uai^>0M_m]=sGPN"uboO?7:=.+'(uC>KfKZLNj.+.(lHIP]bk4K&%:`0'q(uC=,fY<'/*FJ$H62-rcWWqG,rcSM'3-M!MVBs0uH(R<YpB\p8Bnc6BN>dJ*2,#.Njc<c74)pV%h'^1Z]kF[)C?=o>QN@@1%]'/RaFScbRBI2o34)I\@<4qt-gNtrPN@d!]D:Z7S'CSOk9onFJcS!_I0Jlic"8EhK&8tB<Q0s%.*gI6$0e)5.q*lu*NnqP3Rs5t^%e2_&]dXd<L=]n^#PpDmpr%_`i96-N7R"'lhV#;D>4WWh,'RufW8$S;5]*uZ6,^iAHd`*LSigC_MjZ[d]$Z#`s^$3%-!DARCV-scj%7A.rsp-ikpVMi'Sj^KC@$ehgM3VDITnY=M>aXh!mktgUqA(FFAXWbV7Xioi\QAWT"9DYU!FC&.='QT)OM+8O=8Uak+2po@EMRpB+%BrT74@Ee8(>j9bgrCVHFFD;5-IlaLI@>Xs8T2mesrT['UeOJ<TfcTf2=sYM8V5$b2DBm)tWU&\$cF)LN*EeEn*JGoWM%?:K@S%Rn%2K[INRDjMeV8:3:W7gZCETOP^ZU6TDA`bW=:nA9NaQ88&]kLp]\-r2Xn_JlG%_F2<*egdaG*s&VhM&0961&(DW=,F`Jo/]`kVfV'%SNnsca(2PtJns'!Na<PM`bM<M?85*8nLk+YR<'?,W=?8TAX4#pV/\j'@1&GB*l"=.'X0I_[<eikcU!FRSb/J(hJ8X#bKL6[%D,%V%'O@2mftD]apEU@j(<\K8?]X"l8o3..3[74t*igMPiPMmC-qS79.)<4@+h9+?gaKtF0n>[KU&`Z^!!ZK]Qr/AGm2$WB.!qnQ)?lKd%##IRea+sdr<F&i<@'h"l9FHi.UE5cS3)P4+4QH''A;jOR.)<d/T<]t.IM?2D(r4K:3T)8iX%=r*)u2t3YqG,G8#6-D9DRRDL$;pd%QV!l--GPe+lES*N.3I;9r2Z1T`Lq0K^6EQgrQ*HuP])f`/'#Dh:QA'LVBi62[[d^`6UHF#DY9LMfhff"qPB86RbHFk'AVmiY*sU9%hjE9/TmQaXnP^A)?GD;&.GX2Iak9MM]me)%:t"#nUYP1%&7=]%[M-r@)X1SC6mtFhaV3LrQOF-KaOSr;qPB/3RaO&9dC8too?6q'%qB]2p'"]"@?GEG;4)OO-5a6WoOt-[AfJN$hMf#?P;p@hFf.VF--Cb5k95!%4Za&hQCg2pLY@$ig7or9GhWm[!Y+fk-)rh($aF!lK%Qb(fkAd\;/`Hb1?>Q(F>+5c-6mj[_u96hW:K_P<X&o[GA:21gH?GGR:g$"7AdI6ad2)Xp+INcIa1%4dn%d]q!qXJVt-AW<3<F8LH%PL5'XqShjN']e)Z$1IO[G.8#NUlK`(?h1=JiqY8Qa$&4Rh<<!Tl!D+=@t+j[qBb%a2sPg=j.50A^5m3l\;,D*<kko63U5RMrK=XG%PJ(h^hs6VFa\rUkdX1qW@AjT$*1&L9Hi9,PH$fk8'^kWehJ\GF+rKKL^SihX4pWOJO"[W!`mFVX-9Y%XhT%R?Hi9,ZdcjMF#iFs7%qC94`L7-t+^SkNJm\q@!$r(cGT@CP@\,)('Pr9n:>qpC+$9.doI`Z13S8LBIHi9+Goc*-Z^9OGPQ2C?r^=Q0'-+($#o00l#UMqHc%Ab]TH$%h-p<kh?+iJ(j\4N6.A2rp40eG&echs*`$Z,uJ-96PE7`0A9Of.V=#Nc4S`F"U^tR&@l,rJ'?ul0e3`I9ekY]m_+F.,F/I%WV7OKf.X[)"Pt.4hs6VF(eQ1@9Q71BE^6]g,EI>X?W?f&U0$M[p\G=h'W5rSh^CD,q"OW=>OkYaJPXE>ApgWQqBZBbVMO5*Fg#0C%j<.Ps$ht9BFaEi>H\mgK-3H3nnY)I'V$2"(U"tJLBQo9m]c=I_QLu)W$-09!k*sf'#Et/C&/3#&LgWfA2)jo\2OA'tK*YrD%_^EJ%r*]QJcBfNF?$1`eO7h=HGJi(d]_R#kR*2sD/%;a[Q#k.9X3We9mHUdWhH\eaCi4>Z(2clR(UX-:*E+Kcq]E6:p[<mk_91[K=ad49%c@^<:n?o9e/bb.VebXm">s3)mBK*\tC>/&AlW(P[eUMADS`;`tbLY.6pAOpV7/PgohJ&$@X"E`%nmu/)q;K@l\,0l^U"e?$mW<gC%q4m@cXoHb;mHcrJnjW0")[*F:0C=ZlB-DJBZ]d?'`QCOG@eTN]p#]M[>:Rr<f&NZ^T3#gbbk5su[;]Ec=P3QLU$`Us+Q1+FrS.=O%HTM072+aJM@;i3WDW?'mPL#j[c7ZB4+#3-$psQ!.e'Abten=4S8@VID>.QA7poq=F,qLSU,V`9WH0seJiod8OnsU?FWtp"cgY10"%f3c\S_/0"Cg[i//E$Qk?%_XK2PZI<[PVXR3EI\!)W_9hqXh>4o=iFo!UP'/Mc&IbADFD^*!,k$n`BBWn*&@?Fo(V\Tm`)ma(MKtA%IC[NQY#]-W`:b$3f&9NOMqi&]rWe6r'5lS&"rD"M^mm*[M)A6#J+R\aD83PUHeToT^AL5ZH#Fun-ncV_*MF53qmZ.Vd_cA0e+Yb&%*-7c]d";/Xlmc-uD;*lnn?WfW@Jb"pI9V@Dr0i->_502Jb9Z?hc.D_q"oE6b+RBl%n?^2B//@ksmgao@Ds#VfB4n\N.Ht#Mdop:@%Ib/=mMeht$g+n/Nn,HMeJ02RUjlXSurWl5;Vjm=LE`%)NIIQ8AI;l4V#@d3.CJ.LQ-*cN`O+g9!995F!*gKh&")LgZg1cDf$`/Js%%8MO+Qui7R+8ri,+R`m;=8IB-_8U9mP,t;e[fpob3*N04A3ba5&FHi\'B*_Cd*G>o1q&E.C@LhTA8?'g[u.![QKF&tGYtE)mZ2<[%U/H1-FXFBjo-,g+h!n'V^&DO+H2#i<TC4VM=\n7E\7n7&P0DG+/(OPG^WVe'?RA!GN].m&dCIq4gYKT3?iR\6lCN++YI@_Cn7Y-=%Mk,Xb+/Joh<UUhJf2$Hne@i"Zf"HNimJD"J]1N59c/LgZ>o#^o.hK_,7(uZ5DHH?e,kA!I]ONf,\;5D9KDcj6V%6)k>L9`Q0/ak)%Gg=]/D`:*M5'5:hh?&.Vo%m[uh^W]Z)Z_m9'n^Mt"EjNdZUGtL=QOtk%#41O4/g>n2Cm"Yo#-FV7X^,nRC--SK17.aq@RISl-n6Q%UfS=nRMi3cR/Y"Yb0nj`KUPbVkm_t:`r.+LJJ]CR'jda^ri-VWWr*'Va*Y2?\?HaV;L]98_df<>(R,=&:"OmF+fsaD#tG.$1514P%O8ChQYQ\-1Ia!5\XUc=^"g;uej-1I+r?>CS2ceK:=@FG:F8n3,JjCF<dg>9#liS<aTMjPtehHNTTR:.K,2,M;Z@#!G*3;Du/gj1e%]!mI,5Mrnb@[eRDUY/EjJ8(Y>JdO]oq<_R*r8en]qR"I]\3t45,pVDWGD4Bn1Il,a3]JUP2G_pLpcZ8%;\(k9BZCqP@-DFlqT@NS%O,YT7RHsB)fPR6L!#YmRO55(8e-`%l_9IOSI.q_%NK=DuRm4[c4GS)_eXfQP)ZctNEGkk&(:H?eAMaTtB(V?1'kGk?ma(4"q5p\W%T.=?bi7F0t[.S40Y[oArXJKieMJq9W"Z)VV&T7:]]!7n)N,6l<T1d3'o&3"C:DT3p#U6*K%Q^\!L_@V0oF&,>2B]F(N*R(V.kro"%IG4S"eafh*Pe:33X+mtUJ?$o$3;U']jB5khD"He/)4%LnICP+17QPGHZj6=M)nfCjoUGkq*"+)KZ$&=$o.3'U=WlE`b2@7<OPAk>%&UHnLm]4Eps(&oBN+g/5*#@I:OjQd[VP.p0^HiTVpT&5II8*osIT8353HHDE+nme&\!gPF%9J_!o00m^Z!eZG#A=s3h#^qF$l-(6%i%tjQBju/Q_ts8,<[p>rk\\kk[$+;"@!bJT6#jO'/=eKDp[ENLk1:'NHHD0*Y]dh;/1ka&1t?q:Z,B?1r%0T[NId+lbWmO#oCVrS%/"P:)PhWN1#g7f2*kLJI]g[9Bk9>FLTRTcMaS2&$[!lL\80W^/U(E9McV+UO73Ndk6Er)`,,fnaKNgYPK)*dC4lrgcZ-^;Crm"7*%6kL,Yhp:BPEp_:=&OL^)rZPQ3pc+oeH][83aB?33Gp\,)/cnugkmS8Ypg$]FIZ*MaG>VY&AoQ9u18(bA4q$^`0Hq$J>S>^.*G7de%%.MZ)+WaHcdT6Mm9/hkZq$o%^ng:>*]cYE"N0cBOGTEnb.2h'WUh4M-/<G%dD'b6[d/;"\qr5=QR<lC<esTLT>Wi"Gc9UY,(qYTh%`)Cl)(137\W08ifkK;H.=Ip23f\6;[QEkapmo2o#1<m"CnMZb.c!7Vs>Rj/2UQ1=lmL7A"rgd\p*M2(g`H:k3g.Yu,]tc3`b=P>%%fGWO3P%o.>,gKk/$0JrCdm9d).ebZoS)1pR-6',^Dga7C0rr\?U`F6FFWk>DSP\Y-%qaht=P=AeF`qpF%n?#W3$[T%DI9Tc/=rG2%FK-T-T'F'**p=M&Nf,S%YA$%__Ljrq5J?_:le#"8IZu7C`)8+gVr)!!SPFoKJc2\PX>Xnr%MdS*rRK]YT!nhE\Qo-gnp@Od1bWnX%V]V4FoB#:q$nXkT(BLt%$32#7>^=u@"`!2aJE>WHnPXtA7*ut4D!)[bHc$\,cfE?Qli+Hd\N[KZQh;3iiF%oIWNroD!'S5#ciN8:%b6K>[9R_EQo(E_M((1#!@1pBPMXlC`!;W#\J/6,MKamE;0<E#SX+oRKJuIXVW3`P^VKVl\Z\>LJq?f]p8rLM@]CPh,WOfMpk@mCq%E!TVAU.r.;^PI.@cji=22XT8V'NOqm'fI(ZQ0b**FYdJU_jN:Q_V<cK@c1#1&+kp@+PSst!K8t%!9tt?>60'h't0E?qH@am.f_9U%`[`okj$Ag*<e"?NR)p:?&$#qK76g76\h:.$a%nonF5D!Kl$iM>+!R8iC<niH9pBP7d-;E;HcFp_S70_+r8U]8l(s?i##D\AEqAdO%C`(]Pe_eKKZXd95)-MVg7C9E^0#1q>O_lLh"<`4OZEu\>5)@n\5biA!dG2mHr9g'Vic^Jh3P2oI'gBt1k>o9]e)YKkNIoon3!q.M%4k:dEcW()MU]AiTmgK!o@)Vcj:qIPJBj^4G6!B9i^LR17n@R>03pr2KJF)RE41.48"P.<p\*f60NQ^3of@5isf#]L?C<V#=IY:?(%Y]6Lts(ic*isnQ7=k%uo&+9b]eQJ<n?:*JKkaV/c%R&;h2HGdU(Pip[Ip#Ca0/Ze3D>eGA,9DT_V8gK84h^^fk%Aqch"s&]<Yr:,%Lr(D@L'?EGn5^J)jT*mW52"aSB?kaLcY_qt]9U(Hk$(hE*c%f(=O>()f(&j#Qc$*6nW7O"T]HF@r7T73h#$dW`^\6ur;+fqV].H\%r*)r$c>7QKff[fVGCRHu=Y?IHSmTsIWuEZ(ILij*ro#Te/I;7I"L2*5s+#m<3PXp1.Q--\_S,6FY8uNXI7,XT_^<j%D>Z686dDeh%!qH'7%o.V>nPRPEr*?Cu\j0[8'!"`H)!2Us*qFi5+2QX=2eZ19lu(,T8(`Q.Z!b_)ISc9K`pN5n4_#*&I&uf1Eo.],YW!9\o:@q3%.DQeG4*o[.O#e161tK0@:4_-YP&Xd)0^b)o*JraGI,*\jX4TEB@X4,K3EE)8L;bnfaS!a;4L0f]+&4-7N#c=d@OQP]+Xo?';(3SG%NMWhFCOD'M+(:bOj3N0@\\+0c2IdQCbG\oeoFXP;+8H`e2\!"R?U:DMpjtGV(53b>@12b@h?s%hHWr?K%r3\?LPTbWIdatQP23Sk%Sue%IRN[#BF;k:0!uE7g/,U(2jWdrjg1tr]?3pD<rGe,#"KMfX1ZprLp_dlgrV6/Naj[B0'9UZWXn@l@=;E"Fk+C:Y(%K,"?=OM'%ie*SWB;$#6GdKMUoL^3Q=sA;b#H'?m7Os;,76cZ0p0^mJcrnhJ<apO<p*U:[3W7;b"fV>43L!`tqN5E9IkHg.:E:JFld)V*f?>*?%Ru?3\q70%Z<1R=9jg,-r*-@<tW?.X@6BH'Wl[qsAS]_2da50MBMC"a%`fd[J"ERi_[70[:^VAb]rV3n*h9LkW#FU3\lmpgJJPTFq%mnf%@ZoLV;Q\ij^'/a96[eHJ7Zefg_Dlcahme>EZ0ft]8?KHe<HiLm*F+<cKALn:*Dn+eOQ1RN//B6Q*#,'[W8FJJ1^)lO7j.e=L%pgWSIDiEW/i8Fp/hY3?dO23d8`J+e;Oo\H?79mu:PiItT2BJ?cA;O\V%PECHIkKQ^hY,J2\G<[Aqo'UYC]jWme`A<K-a'\;(qKH(%`N<LG9?cPe'XrOD1K:,-J#BgLMb8i\r#L:Q\+bA21Tooo76BhgSr<T4/dKXIpUo7*Bsb/rRIs6fqaf=W>.&Oa>H_Dcs4uRJ<sS3e%<^43^/T"k^*Z]P"?G5'qe[*2,kGQL&5TsMXYaWeG,mcJ/GP7X,K=AbObDj[$ZZa)$o'nIG2din3M<ld(Y^QS%"!:ZQ%J8lIEtOoP%Y$`9WQWr"c$o1UKGZ5#f+^^f7Y9-epQJ:gD;l_@e(8,H4)c,3=SPR9J:]0(HGPL,iZ/#=nh<oL%IF\&*QLD$#)qu<3goB>kfO<'/%fS:Z7T8Ku+I&sXimOFY&?Zt#;Y$)ZLq4#Z5fMtT6V><:!=u\5djmP6G@95&CGPnq?[BQ]4:s.[:f#%5onpf=q$bL/IT)<f'[I?-A%9D(67[BOPpjSuNl<g$8BoUN=.FbuC^(S.u'Hl]TnhfIAco<kN*ree#tT!.Zhq)=hOM"rKiM66gbb_?jpp"i3d/&uOo't9b7fa-AZ%DBh;sQGb=T)Z*,BL#';AII;_r/Gf+<m!j+:1UFW75TQ6GbDHC#-Jt:AQh.Ig:mcEMGHoDuBIlb@#jT!G+c4rls4dCM3PYQd,8osP%^p7W"\8qaNdCa^.,h2:r7ha4,ZjQk//4b55@<A];N9Y*$m_l)$f,W1"$2f@ga*=Ep>-WE^.=Dcs2$Drd-XkNrTF_B;YBM;KPJi,.%GW9>&\<C3>$7WWO1AN3q,e#jW1GW\5$5TF>"P>@9(Fr`h<(S59EnjukMjDd%aNgpIT2aejHS"W]i#F$1kSDs*21hT-E0Ion/!lcW%H5b9'kZPtE'V`T7aBpT76nGI!aTJliIP.`t>)d"XYf<+r9f5P,n3D.'Zq3?ESt#iO4AF%/ALYU^:)_k;bF/:(=\Pu,<`W\88D>@i%8='Z/(7U#rK:54`7<=n>5;+WuSIAY#[a*tc-L+Ql!UioW@cM$nV[t-r)0kMK=Vrt'B9j(3hTWgXY*?)rbgXDqH5H3g[<Fu5=%Ll^%P%muhUNJ?f`%4q:m,t4>d)X-FnYO_UK_;TH(>>S7&@B`M^:GV#,T^nH;n4T;O1%Dkis[O*0b<)7gQXHI<3=&NjKt((<^u7<R?<J#%4-`[%l4G7dcl6\X)m$O`[Dcch6VH/e'cukM%k[fGp.3slhd=6t47"V_ea'_,9PO6f81ETe0W!T4U0-;t4%sA_QV^JL@#$2urY!f(%A+)+Jh-UM.b;"4.ddAd9(#RM]N8.d_j<rVh.\tj,b2ar'@4J).?QqR/j6eUth-\>&7D+MQ<TLU@^OoU-ZjP,4IgN;.0XQ`$Yn;/H%eh_U(7!dX,e\hom9KnLc=7uQc!t">7Sbc!SF^"T>mq22Cq+jBX_5HU3Fi2B@[Z,ag5WsP</E4$>I49N#(*\g9m;@EW;=-<rX\/=`%Fq$udB;[[YHeGeX8c+=lY%JO_2qfKKN?0[fY14cVn1g\L\'b5"s2ka*b6.D(18>Ri>;K+O7E>'Acbs0I__BFR?dg#'o7u1R(NoT7%&*!R*rVVBKs&W7QZ=hjGmom.(R9sPWbK--dPC:bZSrUQCaZ%OrDt'!@_bYWr4'.j3)rOK;m\0!mdrSVWacFi9?Wen+L,-,o]&B;U%c(_AO(3!bd7F/549[c[:cN;)U%1?$lU2N*o7FqeK-a)J'Cr8%`c#jI7Vm8FO:`RYU.$j&CpDD0)23Q+j#XNZnTK#Qk/3S7$F_ou@%0D`9Kj$]L-g6gmQ^6ODpBpS4-8sNB.Zs>\WJ[cp=%s9Lt=JeH+ndXKqml<g@o/t6KTkci0)+sMUU7phI[8:bTmAi'<F+eY&=%snR%h6KVC*S5Eg75Ie&#84ErTK.f=K@J<>9`n=!f/I8uUR=$*.&C($l"-]]%+d;Snf/oc2g?o^ash'`P**PiP8.ipi7&h,$%>2]I3]Ta%&!HcX9:%F);2a^;@=HUD!`Hgr?UVTI$+SQ7R:?%GI?2bes5Z>/;]mAiRNP5F&X,06QaI.#:dBT`gnLjmD+Q-hCq-Wb"g'9aTh*UQ%`j/IL*%0r9*b+FUdr`eqN$B:$;T)eeZZ,q$Mh^>%K!"?l?m5%bXq41FD21ZB"+B&rUVYJsc50<M0(_*8"n-5]Qj+;*"_Ci8#U#MM%"WkOLL.,LF0qc&])%<)CYN\Kr1WY)$9JhP/MT0n:,gSsnf5Mhj1p:TQ[liG=>r6Lp#8aS5)JK6$d'7aZ1^f$\DK!_=M-S4Ic#")U%+[(NQ+4@dJ^nm=HE?>0n5g@9I49HCT,]"UnK8@kfLJn9%>+e9.._>rg%;5+n^a89M<m]_dhn^NId2_%%1$=S"RlH[Oi4=/h:!b\d%&kI\g7qdJ3RNb<nS]A,-M_<-m;dAOmiN?.>k[)X#1c.AR)X+%pn@M6_MO*QfUn:f"!^rT2,d>]e'[,%ri'S.KSRBh./gqK'EL]:0%)*u"FKGmZXA,(d+V*Z3S%()SnBEk>9VFB@J!hB].laW0.,]_[M4jtWlH^5sU"K>:f+B:lt;Dh.rBl',X@PhYZ%Us-q0^T^K+)p/"%f`JaYmGV#8[5s[a]0SA"HBD*]T[<>sbGg<]+=GXIM1?Vm&#M@ZNbmH,aC''[DkdaFN0BjP.%6e?j;)W&d[m_SJDQt524sLQc#=Xm%R.LtZo.=%2oRW_UXu,Ct*Z8:3dROu^%1?Um(FaIS(MRF.LR]o"SFrR<gMt/7+-CZc'./.cgD?c4TV0leV+DbDCjN[_$MRa_k9C%Q%&PI2ZK5;n\F(rp41gs.0b^@`5BpRlh1sDt3lG=MD'dSZp:K/G@>Fb7M;SHuU;nber;nbdI;ne>*R9t5RC_Gk]d>=<um::osiF1i8%81WF!Sak*'8%20Te,es:R6jZ)ihI);(?\e54?JkE';D-@jU6.D8>1+=80`2iQkL&F0945=1IWV8H)@^\/&c.L#PC>Y&n62CRP=>g%##[8ec2A,]h!f/pa>oot>u);XLr(tT)0.tcA"=,j7+4ld'8@L$BYNU86VaH(+Xb^ZOFs&SD!04i#NaXA-Or.)1*'^<`gd-CY;hm\%_6H^5)KJYadl6AfT&U^*Quc)&=n7C?W0DuJk=)`^9YJ0:d`@l1[k3cIAkDBNlK@E/ge3_CCspL@?NNeZXt\p)$6=.2N=7g%VkAOG%o(X>89X0_s(jE8Pc1%*A2:S0f7u'."T:Tp*8R3@]VReA?KIAl:5/lLma`(KTi!E7S_q0Ss-W9/q'5;"$M)c/.n`%&83E&o>S7gP.%]McV6o22DBD7N(a9c.rFOVCMWA'Xb)R]Dj>^$R$0*S5kqgPCI4!X?-C&OG#c6aX=.PWs%SAoAoO$&/aBV-TSCYbJsnBZQca`Dfm2%?)b[-,-Brtju/sd]&j@^2PM%[UC63BV_AL/OTZ&Be$-CMJq[djK"[-lY%_%%]o?.D9Y/(DHQ*PjbBF)9)c7U$F<l2PlDb)t1pOM%%`A6r:O]p1h&knkOh?MB]\sNc.!_,&V[h6TcJs@gn[o(luI^&Aip,8Yt#-J?A[lK.HL5a,(6VaBL2PQSA.@Ak`SlC^5?-M)Y)X+>#%m^l#bju.<;bB*l>)aluS");d"RdC5fLD\f!$tINtChYM&DK3;<NYGD0Q>QsD2`)C1M?JjlV04Aq\6Y!;0T2E!"M$8rLWbsF!fJ#g%G'%#o\:Fa>WDJKlpa#G8[CC3^**oeFnR1r?al:<\Yq.UEPo[3@6,G<aMAA.X"3#m4g>>G*0oMN"pio^V\J[tc%Ucj[5t$GHC4O^j%?A?'(K)u4$&DK/1)[-T%44=6<FU`&7gQAkBjs08)pjtCm'F2qi<1@VdYr)Z$WZf:0%@.o#Rj*aWpk!>d'\"jJr'EaaKB8#J?nMor%_qJ(Bq);DB:jo@;AWR[@:SLVs`U\+Dd&3DNg6[qTp>n-4:XMsnU(p(g,)T1#$Ed/::PRi]>b<3lD-=TG:D(Qe4^ZX8:g"fk;,j/3%MIRKtW^K2%2*?k=I1!h[2Q`>R)5M]]`Y!o^RZ\R3<1b@tjTgkbdAMf[lF8HGT5k8\pPd,44XX*TMC>pn=b8sLFf&nA#@e)UC4Op,%JjSQUW_fCei<:3"W#uI4:jH$6,+@h2Y+ST'"kg\_TIRKW\O&a5G7@VQ]8/d=@\utqc-0Q%65:uWXlC7M6A8`=5qo$03J@j,dC<RE%.8Zt)2aQc.63Rk+!)B<s(%Z-"JjP1&R(B4G@CX^m5#nO`0"rj6,-k\c'dW,Kb6=nBEB?uSO8Bl3/#H-'Kb$/NOdhK?!5d+=0UA`N%.[I(r$C6PT.[Gr_$C7^H.[I*h.[I)=.[I*($C6PT+Y6VP<%Jb]'J,MJQu!U2O:A*rAV>NT==PdaKV]l]N27_MJu,3!Ks4OTXGiu"%MLqZK&V[Gg&?UnflAgIml>@G375P0@72,nujV0us\KNMhPF*tC<@g#WQ)YGPMs2FaJVp:E)V%:'cU9<!,b\\H87DplMC:6Gb([tQ%&JDd/V':eKV*]g6==Q//N28k%Q*F:`&Ys/rYZ+@)'G9CXA#[7pMPXcG,qKer,%IU`*QCuC/2EO67)ouR#[#&DTb1fdPr07S7%BtX%$6b)!7aM3*A8#C&e^.8H'i>Yr'dtPtWr"93MC8gt.T.\!,LQk%"$+J*.[6i=WJDg0WPH!%V&EMS98+;-==U&d==PMJYZ*t#A#YD6%XSF"q'h\]gA1SHtQ*F;eTSfRt(aLXI,UHs",)$([,)lRa6:M)FiMA9%KsO1p(s]RR($^L.Q!m6dWaQ39WaVl/.\`kDWaVr1WaVr1%W^rhnN^tD)NgLIl'/,BhOu('&DQ-_fY8#$"$o<k!0q*XYKEb=2m5\[EW1+AaP0a)_Aimh>9BL[kJLR3crME'6ShTg^P)UEC:&TmB%]AceNZmU!Ei01q7Te[&(5X6#NoD%*ZTNT8E(:J>Q7l3%E42Td6.%4cV;a2K\AOIu!/n-(gmi,YU"qV94p^tJ'"&j_Fr.sKlQk&+W%[ld<NpC3Jl$qm&`Tq6S7^**#2P(l7\hs$)[.'ANmJ5if&"\XK:673F-Sb<X!X#"bL2j%S?K5$9<qhS\o.t^UoSAHX%7cP-r-dcWM%;05n6KkWd$MlI@PMbX(F"l0atIMZ^?g4qk()</RF_SD%9R.q9<F=8Vu-[nJ2nG8Krku=a3hD_B9/Z&j$DDLNFF.&%Ac2%W%in:CD%?'U"nACfoX/lY=#6KP"Nf#N%DF$>hl"kY;qo79Ce=jT/Nf>A@NF+\?c#ua"n`&.]:(E/e66+!dik;])oB]#UZd@NfGM,!f9_F@\,%FdnN#@*1D[3_f2phZRaG^amKjDh8L[Ws_ii:iop1nI`l"7?8l2p6#kn^)%&s\ednJ[YJ*A5g!\c-n;HqK#o'2C][\dfcF!q9q9sh%in9XU5XjQ$X^I>>87`$sPth!"KbfC,hK1/fc_l+Z';bj'Y-)K!9LF3k\r[D[=0ok?"fS,-aAWeo_=kj)%#^!;Fthg3'KY-01c!sH%3K_FKQcE]Gc4lhH3TEk8W#8H2*X**GpO^)#`sIo\=uBP>-T"FH>Op'+,g5^?OXJf3%dX<RiJSC2iJTNJiJT]"EaluodUZ$+R5:F;%]6G;1TbG.sjr`DW>*RHg#sU8*U1kT5h4"[=26h9hYTo$hEpOK)jkg+RQ+o+$'\.;1e_SZlgS1FS,uA,r99\`SEnpaQg"d8hZFcr$%$.O_u,LA"&,e@4>iad7++Na&;QuC+&d_snNZF_EcYiK[.'\V:T.&snUl$+@q92=M1$g4Cs>@KcAG>$/\jDKgTW46&@3CrS(=B:Ts%V*kX^LIB&V6co^r<M;N9TEV3E;(jWkA;-J'r\.VPFLO)81R>UV_@OcE&dYeT,uA,r9;'AoQ4bLj*YJot%k/mC&M&j!P&WnOc2"2Q%_CNQH#I7YMG=tQeH6Y8","^+:"YTuj!_nCT9t\"b5_MC!+@73m&>=q>P!k*;-o+2(_Z$G9&XojK6\I^$+[QicKI)Ec-o+1=:c-1e%)1i+t)CuW]VZ[SunL?p41^P?/Jd`5X`DhX)=&snYJKdI7+<hOE`1iM>6D-j\+gdXE&HY[]#_=0eKE?jq[@G7\>(IBh'n@JqK]0(5%NTa\jXak2[5_K1j==`<Y-EIoc,SZ%G,UPm35`m0U6)\V!!2>f'6D2C2+`8t;,/ap@6%lbg8e@[]&Ys0@&>;?5MZoW[";,)Q'Sqk?%.7/]t/eUQC7[a_t@^/H8+Vu/)044f2&0Yoo#pSF>7FqnK72$Ae$3s&JaEdk=ImO\ict%qD-o+2H.1/IVHC=mI!_%hL,mp4872hTd%+X[R?`9#)P+cmt*&G%J>KKrBX6<n",+p<c+&HY7P#a,'#Jd=A2QkLSu"X:m$8.ZqV<ItKr"Vlh)Ma<"%Z(rY$:nl;c?_if5?c\&I%YIl\M$$2Er7*XD.Z9l7oYX0g:J-b*]K*[=F'HofEG\)[B5Ed3Vr(M\J,mp4772hTc`LHuafcc/J@#@P2<Zj`&;LI'iX:Re@Bu8(9%)G&742"u?'aP@K00Zi,`.'gH2VC:ku5a1"UJKh^18ea2E4N6+hk9RTBippW(90@\qmZr+ketg.CL"n8"N?rdATZHPeTUB>792K?&%]-XA3Xl4uh/MS')]-WcIjDKh?Vmor?.7ilm6rKbkV*n`Zc;WLMV4</:mA]N>!`Np2Ghh+QW#6Xt0Rn%c9ABuT]-Zl(P.N%.?*_'g%2BsMl9;'AoQ4en33KZeNS<stP'/,A=P;>X=c?Z;S_CNUG*9mYV(;jkGQr?LQ2!l0_V6uDsV<Rl7]-U9!G=s&,mZsa=.INKeOk_N_%h[R,#!_mjI6q_aWh%JBAMRt02A9U\>aR5>qKinD7,Zk&:L<XSm<no9XU:OP1Mit[u&7fuXTW%:E\?;",,uA,r9;&6OQ<:Mg]-W8?%G..THaPBbC<-Lu0;r'#c7IXd66LL/07'V#*OkhTV4fK@I]9p,<2,N'["WB8-TpnXAQ<4iY]-Yg7G>"UMmZrH,\]*sJMRt02A9U]%%A;[uFDHb0<&pIL#h,9nbMjr,(`Q^u*`=7)cmZs4B`SD0u.CiZG\qod?A?a2DQ:*@"]-WdaZa`<<MRt0P#Kbeb[hZ6Z3JEMQ[?6r@%Zt[$SR[@U?N>N?X^k:8>@,EA/aPN=#:hUajG>$E7'mE:an"U3WQ9\:%/PXk2Ok_O>,.h%\7<Q'r@BWIK[knOiG..U+l>C=QcDT`@%#o)(K;P:8fAL*st3=Y:QoM]qB"H)J^#s:fIQ9^Pf/V0Y->N3dtmZp,#h(:o`Wk0PmY2jI,/KhZ06;oB%Q9^Vh/V,+X>7)'.mMV"F%HVU=1"es*+QJp+gNTabDTgB2&G>!KV'e8i4ak[TQ6?0I;Rd=nu'\V;?O=OD2Yl?/_>676:\&<-\\6It$Q/!s2YEdlp"UZ%sUN++j%;P6kV[_M$DM)eDf/IA&D]-XV<jDKg0S)S<Wj<D0>EnN1$$5-Cp/P/$[mZtMfQpTmK2W-o]gl/$4&;CLl[K))ZlRBIWBNr?"$F[^*%TgRF1CdUlu:VjaiYo`.U$9$<pcPG)1,)*1t6lOHmOHW,PO4R<T#;\&cKCopp.6/#q!K?oI,:o*f"4NPZ%&bo;9G\A)Nm$!P-:QI<%'p\"t>oCHa."\!!3Vd*PTnuth^nkWKG!4@"%0df[r]pTDfcpdR#TtGNU:YiHj@'D]98PL2Q4e6_lP<eJ>MLp(kQ6Q[m::oS&QOP]%OMM]1YiVesj<G$s*8ME>&4AfihN5lHAuK3tM`X>sM1nS=;BgfIUdQ,(8;T>16=Rn?U1?qPJMWm#S'X4dFd2-FnL6p@ekr+Q'MWr"%+Pfmo[k0-:_6aY[i^X^-EdU(@>7g0B//!RYN_$#d9^60J\'S5rF`E+g:C>L'9aZ+U-+A#:[=p#>?]*/,(=H'g/$G`[:"Ou2LWo[^%c9Yhno5b7;7#WB>,#6$35K[+bV4@u^;-]WA'UT-A`/b0pa-sl`Dj^Yf&5<!u=hOZC'0d+d7b0;98r(;_aM&mkpd)D*6fN&7P^uUh%h68(mNFZ2#4S)dn=$H4[Y^$t66"K-@'L"f;)P<Z^M9c#IF5IEBZXi3"4&\#l^Y$10(!m+kZZgsgB78uUFBLu<.1!d$(05P.LZ;/M%$GGG%+.k"CM$kR]<'KVP&EiHX@Oa0aM:ntKd1[CN=W\R5n`\sBg&QG8i$:f>I7=c9C.d?+9n<r$plI.Kj.eCoPcb0OG'(aE4?C21%j$Pt'dhCka9CN.[1Hrmu28k1aP8g"]nJKj@'^*qbm:*\_c1nZ6fS%QVR\1(b`be2-K%V2?8l6QZJL3H\!_%481i5U&YQU-U?jRP#%_:!um@2&r>e(,3<9;%(NQ6r+'Uc;HX9m3`DMWA0e$!]*sl<q_*7/?V8K-a>n#>:_H%[Oo6lsL,6e\MmM;f])FBugdM5`m'<YuE"S%95"[c_%J/rK;E9dMM!3OA-YbY_T)tXnU\PK<:qAklsL_!7Fd3c`KUm46#j+CBN4pq+-RZqYqQjs9;'B:Q9^QQ/=BVNo!*>V_%J/j%K-bCf`PE0GX5mZF];jq".8U/@C8uo_5RQ!Oc<F+/:qkpsM0Y=*/4hu-#>6hhA-YaY&BVbO$]XBl&?Xr"M&S^#YiLe^PRj[r;&3p&%AgEB$+"-,W#rL>O&h(&<-)N)K%7H@!/:ep(=Gd6mdL\r[T`M\p%[OUQah\T<Z@aH"A-Yc#W",-'ZBBhdRbSS^9;&3nQDX&'*%X*E%0LjI%We2V[6ZTELiftK7E=EWf9.U=i_30UHFKguXFL`RCaDsYlM-0Mb4LPCN9[RtaBACT928^Z]d6n44e'Y^Y-2`iF/:jNT=9;';%YQTjM?n"t:MF42%'o//Ti(0`#*%V8jQrBHV3*6NQi_'b@@7G7@j>:;e&K4-dZtVO&)L+i5'fSKL3Eh<4no"PHb28U"DJJ*81Dr,/%5X@rNWI[RSJ=@HnW&*JQJ?^H[VEg8`;kU)!WI_FJKUX/S/`W]n:iTD9p=(ACeA0OgLmn_cW`V9<.oCj%"q:EoEDrO/\1-nmiMJl%%EDrO/\1+S^KUW$3`_?nY,KRAD(9W=[64:lE.5[lQRfZ1$9n=MKV?2Ir[[b?L>CdKU0L1b?dr8s"7W^>!_Vc=\\>__$9GlR6,hs*W%6GZBI-KCsgO`=;cY0;\&l-$Rc:h8>q\!_i;ijP+k;qu.7gf0qc_(loF/12#c#3RSsVO.Gh2^Nj/\1+S=KU^u[VVn=>/g>2UAOe<i%/7A]@-1)i7VS'%0,pQ7=J."5T1Qk3Y)$;d<(#0L:12^k%[XsuXMLq<!9u]nY,3,O5-*Uu,)V/mf-OD`NjiP$3J[`cjg_;OsiMJk;%E)U"O#r`$FN10l;`D+aXJt#XFTB'rdI[DJ@VO1!g2oTo<E)S:g#rfh$P&O?V&f<A:%3%'#:=s4kb+k7+k:*W!37go+W"h4#1ekn_%d4^NLU)s_[MC9rlMF\(lWbEr#.T32[,LVA_,N_Cq(g\2k@Q7<9MW$Zr.u)T2))6m7KlBscj$l^e"@^e2&L20!2antq2q;.:2q=E0%DQ5]HD@5R<aLEZ="f((SR\f#@La(lVRMj+>2,hIg2+,>W2'[dDC?i@-9p(1($dDXj;aaKF$dDXi;pA9];cJ_fD@2YoEDn+q"ZJl7%&8hilQ#T_j;/fGnYscQ*2-7akiKP)q2rtafc=SoIcK6AZ?D,LWgf3Z7eStOtcimB6_+bf(!Z05.AD@k%U#MqgIZ]SY+qZ<7.2OIh%/i6eO9i:L1\>a(oEDpOQ))m6j/)d@a+GeNFEDo=5J.'G"`_E.K'fX)o9"6>"6cMhX4,fY\9OuqCac0^FGRQ+4.C=YbS'knXcikY-%Jhg/BdkE5d/`9SB'fSQ<"ZJja#rgDZ&8m@r$>p3K\]D90SH#>CVRiqiVReD?VJnMYMOPfYJt'UX;%dch#YZk8,05J#Yk!A*S7LCh%Ne(*9O06U7WNN;3.ADK7;lHUQRj)Pp\>aAE\1'sK`_B</.(C^r;53'I\ujthE%['-RrSiX-]H%M$7A^$UY@89)X9cALn;SM%obj6%9f\35+6[2iD@46WEDnj%8B+AH;oMJ1=Ln"M%2ChP%2h*Yk#-1t>uu#Ekc-CUashp=oal#`8V-`SGmhb"b#`R]i).KgEBQ_F'TXpO%2[+cR\1&(0dlegW'fUgNOE"4M85/hu$6NholS]u%<<'I:gf/Jtg_A$lP&XEn.(C]Mag`c>e0O"M!eK@.!f;FVOGf'e6;]LUMC8gL%$:cqp\1+/*E)W^:N19+(MOWm;(cU"D0Q*nGc^oi76b"T7+lfFB?5Y\U)QL:ra?dg?Z)Ar'<2<@G<2:,]<6U2$pUiVs"Q2u$FTQ42%aU0mMY"uW^Ri7$3Ri7$=Rj*`IRj+#IRj*`ARu.okiXfg7`?FA3jMZu:dc=)!R<+s6]C8F4g_<MI;/oN('6)FI0T)`%%6)7V#"FLf%1+Jrn=@]]9'K9Ul9FEe5%8/]8h1.X_.52bjEaUr*."UVJP699b+pXu<'FIfq1]gY7HX)482-cXkQjtB%0HKa:"f=ZKeA-02@4<lN%-ur]V:t3:&_q%2+l's(OAg')Z0HKa."f>d9V8.1X73sW.b<ZJ/a0Lj0dj5?T.mt;,/&[q`>f"TnE!9m3iY@u'-S*[T6\+rP%i1OM%^hjoF0HGU5Ja#F]"4I^,JVY/1%MUoW?(qJU6_\#V+lu+f`(K'aA/nHlF+.hmn-X0F_DY@I.\I&DKfXl28^A7VmgdH1"jl>GFMlMe%^iU\IJa#F_"4I_6<s$h[HpNLs8jLCV&t!RhXrNf=">qmhJ?:%F0HDQ^@(JU3J>oXlDV>e=G_Z?DogG/KMH9o/JL1Pt"$mDjLPi'^%l+"#s?oh-F^iU-M)OQOR.g;dP71)_D2H'_,JL1W!"%<\n(FU7nB/GXDEt[<%E-*B[4ku=&&`&@^:d>JS^iY,s2^k>k#qH01#ph8G%,UNbn)tZ</[dV"cb',5k8eNR,*@Pr93c6Vt0HE*R'UXo-X;%$S:q0IBND#P#K&$aS>7+'E*%6C&KMO<V*S3^e9ID&Z%SXoPOTO"B%kh,<VUP/cuE?e#*l+E_BmKBG$JjN:dd%b9jmY'W"LaeEr`"XU4@VRm*MO4H:7SF93;%QY.+-IfmVM8S2Lac.G`"Yqe+iG(.11FuX%VLk0B'J:BuFOR*X_j\ZO'Z:\6$>';a#r)U8N0lph<5]JP<^KJG,VihD3)0`6`PRlO;kV3f.5[3FQi]uO9F]$D&6"-(W$5S;9Ec&-%7@o*uL,r6jgqU?CE`L&BPF*8/'uUdo6:":r-6oAl]4H`](rlq+VEg=W;eR3i0uXU!+JuYW-,^Ml=:m:L"@8ilJs^RNTS4Lq#r0Dq%.u5Y5;++)t4X@t1N&)>+`A3Pe;_C#3L"m5KMVCB_9Na/k-0-P3BrH$@;5?GZ_'(N?@L=q00fAIN'c\qc>Y@LZJKuJ;5`lXW"-18r%&6$J('Z:\6,%><&!D!Q,$8`VT"c@u#EWVF4V$M*M,clCOLa39]"cA2)!_l'VJR99L"cA2)id+4Q.7cfq9S"B4VHBi2@L>gQ,Gm_'%&Q?Si'Z:\611D_0pc)\=5#=4qWZKbh&CYSOW^cV3VL5$D$=YL3W;;'/-6]6g(^a^Z1`8"OMN!oXZ#\sdRL3L2'G3(=c(uP[\61,r%'R*O`0bl*g:^n-o'hEoP_0HF2#Kg*Z;p;"iR$)b$Laa3M11H+E+sEggBMA/NBGJH"2h6RKnj[*2LK!sr;d6^K8IP0OB84\_0K_]_%ZN)E%R0>iPc7D5e]lI]c:o#lT%")ZGHtEE+j>./Pf9af70]7I2g&?OAMki-:J0LUg+AfR]e8nrc,)rND:H>`].-d3(^nPp_!>+<J%$\4tC=b,ffSQPq,q9/o5W+QlRd>DQPJGA4^$\4tC=TE:hT32..q9/nk,.KItlBqeWM(0Z:Oj5K`pS;Olmp\<`C7q)"+OI%sJo2p+%=b&r7S65hKq9/o5aCc7o@c^e7e!)WrJ0LUgJ=B4mZN)qdFCkRAZI5-E!_(I'%,U#jLlnVWns)!=0F,ag"di*MbQ:ZYn]V%if]4gr%Lg7kS$b5Pj.KTo,B,9EKONoE8D8fHdVf:Ne[?6r@ZtZ%55V*]+N>P8=+NG>BA)A\hbhea'L('Q\$AJud]/#,BCFY&I'GX!d2&/K5%)iA/7=enk&=elW<)01loA113hOC;3q`fPai)+3!J0STuNQ8)q&Mj,r,fSicaADIN$aG_HRN0'Nd+TifAL((`;(c#&f`K3@q15:bV%I$-0oO[:d5O[_$80dhS*o(!X!bF,*O05'(^$8o`4!FKTY0k@ctKOMs5X^K5]X^]BHiY2\dL-'cn$sBB&$sBA<$sCe'OHLX$O;UP^%hR8:bo*TIG=Z9=h3M6WpZ9!X_8^A7Vn!#9RNFAb&o)ELmg3,$XNT:oJ5P3,!'!NF>`B&-E5=nrr&0P?sZAdTu@F3Jd"n^"EU[bM[%pWJBR,pV^]CLC^=E1`LI(7@j&,"O&I*&Q_&?SpgN"V#`K;+'Kb+>RlWB@N%7&N&Qr>W$%CUT'!,[7\u2-Sg"r!P+eD@[t!i4_Vo=%jbt*u`Df4-5gYVaH.A!R=OiLQ6\oKu9=elZ0Wf*2=I'X1)/GX;6XH(W+]fq&a:jsDm(h``4/"iX=dH!0?X2j[NdHbR$VCsfjGEPt%$iJ4i-WhR-a@hC/Ekb+V9Lu$XkHkCoZ)EC^Oe<l\o;Wt/@T>dMa/XkVO_N?s9rh$f9j<^fC<4I^e<$(od?&Y4O(cU-\n];ZMAl%>%h3bW%q5PU5&l_4>'fDj?'1o>o\7is-Yf<?%gEj?Y0F_n,7"^sA$,K?&AIZIMJS9"$62I8C0cTb1JW11Xb3s%`;a:uNPkgX'VEeU0%;jLO;Rf\`1V>t(Edq.2b_+c<>`WRP&Jt"M7'&8^SQ/JMj?jLXB1\fn*[$1\P'r2B9*j[$I-"Q'%Ef7b.?'b=P4gVgb\oLqdFo($n%pc3qqieI^s"VQEV0"a!Z#<)g\_+b*tA%p!"bkEPD1S'ljVCkfbib&O7l3]C=rT/?Pq8D(0Iq_IJYr_S'i_p,#$;?)A!n#r'6pbik%?lIgBiAE_]\>^Uaaa)+!*)_sXVYm"i2[-"n9n>iS;ZJP^.8*onE)RktgiOtk"?0W/#U)96>e,TXAQg7e.<?ZK9ke#BDT_O(i23l5%"?/22q;A-%oHr`UCN;V8k24AJ&DYcHWje4\na4_hN,>_65.E%jNo6d-fgB^W+<e6D+:W2q7"^s91>889>+=86E)ZKkB?cR<@Il&R%2g'hCD%;,>_LB4U\MeYG8b]LDjq&4R$AE8P6=E;^-sXqa-sW)e'I&p(#_`P6'8=:\8"jlr5q#.^,8CQ*ons02\C<s$_MO3h^jt2K%?t,XD,;t\lKnu]BKu,\NTs+Sa.'1KY-q%3<.',rN$J0Y?$=R*M$ENuT:l&4*;(,]$-kmj`N=(@QR5;a3c'dODqL#n!.MQ2Ol044P%NTi>n&;@uXp$"Bi9SGg#+ps#0g8%&D7=n>qbrTLmCQ:a?R\N]hk,V=gVC3.].11bBEHY%mTl<>8`f7?*-q"Q>:l'M!:roqu:rpWl%KL4B]KYh001#lT,X&+Uu:n_jXeX1>PA@/g=-,86SILi,+F7ko<1o.o9&+X)j?VMr=n,,pI@E'#liK/N.71XE05BCD`*RY0(%d@W-%'$2;F+F6R#83E]?Z23\ql0!KB6i$fB+oRA-?ob"n6kAND,`PK@B\'#td%B<q*mt9+&*Y<7E_%:&*mt9+&*^F)E_%:.*n#h+iZW^g%<t=Ji#5"!@W\PRB#Gd.IJ`n8*LQ$C@Z-ht[eG<)dH:\)$9M]jPXEUTo5rb\/Yh#Mre)ZTSD%R9B"4KX65kL/PZg6gO@=:;7%n$rm%Zd-E2IFbM?d\k^>+ao,*__1J@^4WLSA_M/qT/d14oIZ^7O?Ui3L\09T_BF?6Ma+"%D:^jK=u[MM[sIP!oOhJ&%b2`/_8T#q\Vll/%OcOP1;Ltg5R^pB#Zr@#k9*M+pC?BQ"f2=DC:m&HtX.Z2`k5A72'gU8H1Y.7K9*M%nW^EY#@eACkO'-+;W0W=e7kGICBW1u291?[k%QHI(%Q3p$f<1#(KWAL_jWB`jE7@ck!'pra85ZCC!aD<U6Rn[K]]e;E=cr.'MoQ8-e7ULf]">//4]e=u03A$M^#[/]/VHRa&([d57%Af>f86s(3?/JX(VWN<=sV6XQ!9;T[dQKf%5&Y2clF\qC[\0Jk+WQ[ZT;D"MI94_6o9=:(_=t7c@>3[s#k_NX)TV\q,6qa'c2*.Ig%,hF2-h=Mc>4/2,:V#jRI'o6V(7"U_nkIhFDSdIln<'ctW,8_e49M)TjIS[B$9T?i%WQ_hbWBd2DaqBVu$:M7#!)ZD6a*uE6-T3tL%'+7tnZQWL%ZRT-.$Q-6MR_`d=[$57'Ji$n+0FBm*+_iFnCL(Un=__]1bP(Ynb/IsmrQT&Upc5]\r(ns[8C16jip)>cRb8UmQ7>GS%FTeJB,:T%Kk3&TnB;W8ZB:aIPbX)bE-_nW`okn5;f=<f8qcI]YGU[=*^f3r1U09%/TVV]g/JX(VWIjahk:pam84g0fIS[@N5cUX^%&M4__e5BFYd8GOoQC?,WBW:g??*r+<\_9;P5tbcA6qaA178%4fJsK"ZLmDeAnli%9]ubQDR[d0Qq0.[!Wlrn*.:m7nY%6,GG-@b%%kKm,uGm#]68C168WKmlZ[8]F]Rlc4f.Od5:*>^<XASTkF%pGt`e803hp!W8b\MeYG8b]J3*Ynm9M-=XtUR#'qePakBd8Eo"=t0U/%LmEp[3)N>N=O9rE%U(?V+fUcbH](ir9dshV.:'=1'P"nlG`5fUi[(RiME"7+92.E[W@:=h2<Cm)MR'7JR[0nKVWFhS_R-&6<q?PJ%(%GM&QC;\g91?K3eP[bM28=]:c#5pS922mgV-Z:Kl&Krs/JTRf>3a&;Q3oQL/JY.==t0S6WKp_MTV\OIWhlR=C8kp(>&%6D>&)2W%981QhQ9#Ujf6ktD-e,M&UodfMEY,WXjAWHcQ:811Zs:"<g-rBu@Cr50_ST/C76RT83pLHnW=t]e/QVGc?0ld_;G2<m?$**C:-lk6%cG-rV3o9\GZrF3("YI,u;+n$IC8kdVBW:)/[FB5T=t4CiM-=XsK9f\5cr*NIC8k<J;_8`BRB!)YA2("a3CYk\aqnWG>&%3C>&#KP%9._H)W>2sWW@4i_WOPSi[FAreMj=_1Wg8Nr9@ZqFg_mKKZ:?LSlqpEHaCO!,RnS/q?,*=/cr)OBoQ8-iL44[d6nNOj?,(ofWKmlq%6nPfU5t`6mm0muDg3$")]M1r(e;=A\'m1;"<7J$bWMN!7FX#,8jeASHW(@gs>I@Gk+DRn"VeE%XMe]6QG1BK)(XZ-9m=p8p$V)e6%ocRH'W2h(M9Op&k=NN4?YpNo;Sr9PDi\h4q;Rm/#[F>OO/JW&8WhjaT9sdm$dqN0BKjrS1f+bSkX?f?.'hd_iV3WoPWTCd+W?k$P%IIW\I7VC(Gf6#P@Z+MMhlC+H5]&p&ZMScBZMT&9>;R*bTC8kGj(+g8*)+7-:RX!=[f/7<B\5,Z'e;;Br1U,PC-IhpeFcBSi`Kd%_%\C]r&:kGXB:9=1Yn2%8E_@f^=`P"R;V;c55d8Hl>B1IW?F4F1?*48aF=O^5GZ)XY;@oZ0mLpLj-BW2Y[*>(5iLmEo<6nO]"'J1&2%;(ZorY$*=!U0?h9h<9Z&i2EKH&l_LE'fA%HM'U[r>dW!B=RV(>X-U?b;+n#^cr,E_/TomDQASn:<(lmT(NqoQ_@BIA/J[.N=t8r_%&hOjo<\8IMY?EDJXBOo##;()SY?L4;>d`)S)P!.N74f8-:b<Db<@nphN*7^T+Bg75`=acQ,@/slQjGi,+k'9Mf7qX-ZddNmRI0Ch%Q&Elo\#22;'mHPa/bPF)Q?p^j/X9D^LmEo[O&SdF8CquHB"F!uailS+2f1Q2eL`uVghUI:C?djhlS\,EF1TYn+l11RZU8,kE0q`7%*p*^e&+eu=\G:@Xr>!bur'9m.Ims^;E1"C<N,Y.+Ld0+U&MtsWjp.c=q16UqrX"P/kdJLKr"J)"O0DN&Qlej]bR_o>k!smn0L(YD%R%NK)_u-`n*p*^%L\YXa3R!Pad)5cHiaMh642YKU+F9F4+`i/PfGpP2e;+![k[FIk(HpUEX>0(:#iRJP_tpSJ+-XV?1e'IK%nmN*%kA_0](t6*"kI?#r_I7m9r\-R;.id\a[E;p,\uHb4GDJ%i\;L:)6Z(=cg2>-TpVUEgk"uW[><1JIIVWA<R%FSF_u.tsA&sF>_dS!p%J/m^DPr+6nM9K!9C\QpCeqSPTbR3<)JSFmX+<(6DLk\+t,iMN"8GH*oo\nXm2VRcN+!:KHT9A]A5W&Bf&.O*r,_eNp@3thcrBLX<%$7(?jc!.`35Fn/\$F]%/rfm5?n>A+HKKj#S6hjU66,K7_WI4J>62Gip0cTS08iF1s5!633^b\o;R%>2Q*aQn?U:-O%J!pt5WJ<^W%%h4!q,_SAcUu>+#B_YLlqLJ#h)t88Jbtd">r2IlhYk]'OT=RA6!?[H26MT#d\H2`YN:(1T:i.-Z(eh@*MUR;qD*[QGQ.k="@[lAs%MmKi%,(9JdSX,OtfRA\;9UgO3R)*P9f.,_<p\MHrN=(g&ZJ2O9eQNQh[V]D0a/[sEFd[YXjLhl(jagiS@HU"JE<+o;.6por]e8f*%AT+d&@;I5j[_Af@p7_P)a)3ti2GE:am!.*)!n!Wk*W-gJGsg;nHIHStb%fDGDi+\+@tc-B0KdNq/P@jlPgf@&Uk@nU6IooK%_r5Y%HYT[s^^W%\Q;<%dC3+'XIEFj/d\+9DY69%(%bhW'mK]cdi%68We1'G1_q$QF8i(IC^d)da6T>5PZ6-'QdP6t*YS.p-OCiF$`3o.W%a*J/eD$Im+17pjcQEhE*g1HjUOiQ68ZIkrW=ETeN>2g6c=TV1Q`]oENbVi5,[sEZF",m['8AXP6(3eHU:WloMa\.,c[UcFjF('K`%?FFV<F#>ne@9=]T3SN?M(^"TTXjo=uTlm[+c>p9TCTZlXQrg0Vh#()IEJf0_K)cFXgf@'p7qZE%;.sN);mrQD>B6e'Zj3E!]laE=%D:.f@1%V!!pfT-Ga?C!0Z-:dlQr0Bm.r=sn0L3q<mY]d31DQ79jXEr&M<+9ZN./tJ?EK6!e7`US9=l&u<QY=bgHN!@2&@B*l412h%`BLc4D(jaCqcNufajXJ!Ah]>7jE8sm:F2Ljnb_(tp.D3&17(sMT"$_^G')lsP`LAL!V9CboH%^q2kaEq>A;h^O(98!gU:=MhD]eY%R]Go@giq?*B!E;B.J(j=X]ahV?<\MWR;Z<Yhii1t94"_^>11[P9&!ckqUi)rZ](.$Cl-[P?ke6-nQT^U030'CS/Ki[,kW''6NU5b%<7YO%Ot7cVd]Dtm5$*+(,9Q<d>A76USQ,er3k9/;2.3i2Zh@:Lp,,u'?h\[fEkA_t/\(feaI6:FLhsC:?`er;a'!R0@lrgUi&MhB%>s0.7HYV5X)mb]e/#i6+LEToYZ5RCd.tUd0Va0pBW@\uaX:n$q]VW;A9!V]BD%Oe`>'1;o1R;UYnt'FY,>6m_F`U=?]=!rBAm:@'%oB*1*5W\c(:H!EtQ,T8t&&,)]Z:B0.`?FpnqcnE(r0[krPC^d;pA)/9rj9;[/<elII_I^aX!L?,!aE*N@6erNO_d5F+LX_*11ndD%R9t`8]_.T?EnIOQE2BL(DHj]]5)g`6>+c<]m\r*3W6!E$7T#;hAqN6?M]a=actch.4^5)c/m@ZL@_U=FRr4eWXS,V;JUQ?Y9$:s%%W3a+64#9&q#Al%3>6#NbP9/Fg+D_+d;.+5r&2sHgHh/-I)VFK`'#Js4]4Yoap=#\CSK?TfF-*i$*n?C6M;Z)-[Fo@YKF8Cc[JA0E%J/cAhktME"1n=MHBeg63n*Hj:dWD.=/0g2Xb&`@,^s[#Q9kr-.6k,h(K_[e'FWars_Q4`8Ik,#lSBPK6J"-YqIX8pb7Tg>XV!k4b%A^.Gq^S(YKL;o%*-oQcCg[N[SAm4Q(RSQr\gH6.+PG2P?-V=]@Ma:ucccEYR5nIoLG&=485nh@-\!YgrFc-Qk-3g$oPQN$T#$lW@%l&L6&0aL4h[r$ThS]=VAKA^EY[d%OQPu!=9$Y8V&5Af`ieooR;-B)U[9Coi/fQ6cFLmOHGri*eg&Z0)Cl4<J6IW'+<VSm&V,4RpK%S(l2.:-iP;e$'K)L7M.T>O$Er#QV4`oecurL82#K*nb?3;VP(+6N;&LfUF67,@g&p;1HlbD*2C,6V=e^rj6@Tr*GS?:^s8_akUa_%<,!TJ6q270<:S.;N9%@A.kq2S`"[_7duplPPW.n71$)Da6;2Bk=X9l[PaDML@OannV@GCkapZ^PQi`,_PS^M01$*8$Ss])_^HbJD%#r-"2KpVp=@LC!Z0a45gPSFac.;tIc@`hn$Kp_F+aZrON.5BpIPFe-Kd"nZ/[Ttp_@`g5*@Z%6;0a/c>'L3e<Y`]Pr!(oq96t0of%jbYFiDA6R&CE`j8A\AC)jTU]39Sk/P,p^DCL_<XtG9Ec)*?h:+7:Jl=$cJ:]!t$cZT*d:V&rA&#>_jhuP7UYY9"unI8k]CEmto!4%ARQ/!RF+c'B43j_S40$fP_KcZ9&g4425;ZV[2S_VPb-fi.@_[s;nAAEVWN]+R*o1@0f:?Q`0AM8LaeEV9U@OJ;]n\+"Ymc5:a;i&%PaF5j5YQ_X0kI58Qi[T4Pl6IeVX0t/R*mC6R*q9e9PJJiVBoN(.GLa3;`6ETVQB;Q9Wb!K@S4ELdg6Fll6-d=VC]ZMSeR![A_Rks%Eu[tL@?O/TXfM37Pbo.(b56en0kFE:`0C8_M(.abM('SkVEgB5&dcL@[gWX!,pL:W]NL(?ge3JQ*R5<s!0NWM;dr@;(1Kms(Ld_>%M('$49KgaYl%B6qoaolP9=YY`nb#1A>n.f.Ferc9e!5%e;]8&[.1df&6io*>Bn_pXbOrf<Pn]$'h*d'u>s7S3l#h1DFD&VFDhdC*%QSrdV,,WW]>[V_.@bPXFRn^f/L7enuCMak4VQDf/[I%*m#^;Ark,qoRqV?rKZ]3R-Bl+=//k<kSDS&'\DF_X9[9K]]EGt?'k"K-d%CQE\/rscn!/'d8/odQIFE\l+V&JLtrB-N+J`3`R8qL-J?j`B4HLXaU=L)e4DikT6ge4Gn\%??pMOs/iin]e4]!RGTVN5Jb:2fN2C%9_:lj*RSA?4/,NMh0hK$GDlpX8#D;qMu(N)=f%CBh/gRJl'qWfGE$&_iM-\GMd;8tV2VpNjn,1gFqB"4.;,,H=giV9X$caFL`WnG%&R@`j%a"7GC!2p@DXj.T?7W?QkI;HcST^une7Zh5Nq.4g.G`$nGQ8V>j9q?:0*"VYn4+a2r):ZQ4$=`o2PMYr1.LQNQShrB^'&02%b@*lSfWp3YZ"412`?lhjM[djn09Y-V^8NZ0nn"Zij9pd,0,RI*(B>agXFNRM+=/H3!i"``80hOVZ@mUnSDqVV!0)@47e4O:KmYUJ%JUEU$$i'iJj9n3q?a,]T0?OJc^48WBA_uOjQOR>oI#YtbOY>:TO=qQg4S^1qjGT+]0-Em$keht!d<1+i;'cnHAKA=E09.>F^?DI]%^8s1?q6Cm,-XU[b6G<S:jNCtaHjSBeX\-<4('aT')=?L#(8fQ\=l`/gBG_n"1nKd^1V/`&X&2[,kR!i._-%uXU76H!AWGur(VM\f%06;/0^4suna;9q/^<f4tq-osJj@bTsG<(g>MU+W'QujHX^m'4$;aS2Hr@7VP^Z*?O4")7Z1eJlt[&&j;>$T,b#8AIk2GNi)Mp4r:%(Mc-p05G6]HkGl/CBB-9H&1O>.1>sG-O''Pg%OLM*646rQm@hJlfpY/U+(eD_:k$!Z)\W17K;r>MtNt.Mia#R+A0A("S)^iaVPO4%?foU*^.dtgjGON2aVU9^!r8R20'$e!V$uo`Nu.B+M3<rR,+a1-TTQDa%J&U(CPt39YOV9O^0D-eq/W<F[*"YVO=qM?a;5YUKR=@<%jGTlMnmsEIPk"*4^??n1^=\g,HsLB/:NpDuS-RWZXA2:PQ*Ms2#F7OU72Gr?/_TR,Z`+G'HUZ)f[tP8B3RodI(;5j$!p0hT\CZd%%@oMkfpQgXZct</]fc%9))-P4JFjUV7^"IbSAkq\\N2rX2/Cm+o_7/".XZh[I8Bqj6^%eMj/89$<P&1DT_=oe)(,n4>Z[pf\7+##+%bBC8LB/=(:N>&Q.nBtqCF0Oo`ZHLg'Fm7(%%bZbcUW9n!SggedX4t8n_=gLm%SUR&4e?S%+4ki60e%&>g=CVG18f_V,`JWtg?)Af%euNc=j`8T5e)%,=.$k+_@rg7N2VU5m%eH'TfR'*in<UMe`jnh42/RZKG;lTd1:g)Y3q?U#P$B/!AT!9-#34dLoqQ@=$sp.jjmWdh%'s%iO.h5!f<*tf6iDOL)_q;_BQ8m22!Ejd,@KW5mfPfMk"1,]Y.@o$H:<pC1M--k\m5RpQfqdN0RFu8$=BE_tHXitf[8r>0$mWMe%HG__76[M/_Gl;?1&"!YTBY8F6oT_71_5)Od#n.=g=B"<uVsH!TaFRV!-fI<E?S8n6i>Q+d0SVQY8^2KRk--kree`*@l_O^1<g33n%6p,[.UE!K6m77%o^<P:`IG3/@IdZ;Mp;?nljM4r)kah[;)6oWgp>`@QY9#2JiV\W63jBDun+de"eZ`<YqTHbm?[eR;GL-<ao_>UI%hd?<Wj7DkLhnT-Zpb2@,c+E/BhnOU=L].4qV[jl!mD&\r+CPUZR(!U\j(FuKrmuW`r:T%!pKr=Dn^G8Oo^qCG&+AD'r3_"3ebA0+%PPOqJc-,-[?[dDeIf8]t%j+#!IeD[gn)++Bs6nF7&+;]cBtsLn`VG/DIe;BeIf.qJHST)+qqFnqoDCt&E312WRu`!liFdN&1JD6H%^X#d6O$C>XnaWrh^A@Ebl0n)TrUB%\$=aVGZ2XK:[c7;XB$C"n.&Qn)douas[(cA$iRO9%hnK->qmYIqq=XRD+9(d!lICBsq=49m%O)KJnH2dU.j"G?Mqt]d,qtDMno?[):*e4+_r(BcWq=0fdIJ=m,op,OOX&jfIpHLn?03h`30E~>%AI9_PrivateDataEnd