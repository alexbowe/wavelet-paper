%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: classoffsets.eps
%%Creator: Adobe Illustrator(R) 14.0
%%For: Alex Bowe
%%CreationDate: 30/10/10
%%BoundingBox: 0 0 502 82
%%HiResBoundingBox: 0 0 502 82
%%CropBox: 0 0 502 82
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 14.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 14.0.0 x367 R agm 4.4890 ct 5.1541%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 24 8%%BeginData: 3764 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD21FFA87DFD06A87D7DFD04A87DA8A8A852A8A8A87DA8A8A852A8%A8A87DFD04A87D7DA87DFD04A87D7DFD05A87DA8A8A8FD4AFFA8A8FD06FF%5252FD08FF7DFD06FFA827A8FD07FF7DA8FD06FF277DFD08FFA8FD4AFFA8%FD07FF527D52A8FD06FF7DFD06FFA8527D7DFD06FFA87DFD06FF527D7D7D%FD06FFA8FD4AFFA8A8FD07FFA8527DFD05FFA87DFD06FFA8FF7D52FD06FF%7DA8FD06FFA8FF27A8FD06FF7DFD4AFFA8FD09FF7DFD07FF7DFD08FFA87D%FD06FFA87DFD07FFA87DA8FD06FFA8FD4BFF7D7D7DA87DA8A8A87DA8A8A8%7DA8A8A87D7DA8A87DA8A87D7DA8A8A87DA8A8A87DA87D7DFD04A87DA8A8%A87DA8A8A87DA8A8A87DFD4AFFA8A8A8FD15FF7DFD13FFA8A8FD4FFFA8A8%7DA8FD16FF7DA8FD14FF7DFD4EFF7DA8A8FD17FFA8A8FD15FFA8FD4BFFA8%A87DFD19FFA87DFD16FF7DFD48FFA8A87DA8FD1BFFA8A8FD16FFA8FD46FF%A87DA8A8FD1CFFA8A8FD17FF7DFD44FFA8A8A8FD1FFF7DFD18FFA8FD41FF%A8A87DA8A8FD1FFF7DFD19FF7DFD40FF7DA8A8FD21FF7DFD1AFFA8FD3DFF%A8A87DA8FD22FF7DA8FD1AFF527DFD3AFFA87DA8A8FD23FF2727FD1BFF27%27FD36FFA8FF7DA8A8FD25FFA82752FD1BFF527DFD30FFA8A8FFA8A82752%7D7DA8FFA8A87DA8A8A87DFD1BA87DA8A87D52FFFD0EA87DA8A8A87DFD07%A87DA8A8A87DFD09A87DFD11A87DA8A8A87DFD0EA87DA87DA8272727FFA8%A8A8FF7D7DA8A87D7DA8FFA8A8A8FFA8FF52A8A8A852FD04A8FFA8A8A8FF%A8A8A8FF7D7DA8A8A87DA8A87DA8A8A87DA8A8FFA8A8A8FF7D7DA8A87D7D%A8FFA8A8A8FF7D7DA8A87D7DA8FFA8A8A8FFA8FF7D7DA8A87D7DA8A8A8FF%A8A87DFFA8A8A8FFA87DA8A87D7DA8FFA8A8A8FF7DA8A8FFA8A8A87DA87D%7DA8A8FFFFA852A8FFFFFF7D7D52A8A8FFFFFF527DFFFFFFA8A8527DA8FD%06FF527DFD06FFA8A852FF7D7D52A8A87D7DA8A8FFFF5252FFFFFF7DA852%A8A8FFFF7D27FFFFFFA8A852A87DFFFFFF7D52FD04FF7D7D52A8A8FD05FF%7D52FD06FF7DA852A87DFD05FFA8527DFD05FFA8A8A87DA87DFFFFFF52A8%FFFFA8FD047DA8FFFFFF7D7DFFFFFF7DFF7DA87DFD06FF7D7DFD05FFA87D%A87DA87D7DA87DA87DA87DFFFFFF7D7DFFFFA8FD047DA8FFFF7D7DFFFFA8%A8A87DA87DFFFFFFA852FFFFFFA8A87D7D7DA8FD05FFA852FD06FF7DA87D%7D7DFD06FF52A8FD05FFFD04A87D7DFD08A87DA8A87D7DFD08A87D7DA8A8%7D7DFD0DA87DA8A8A87DA8A87D7DA8A87D7DFD07A87DA8A87D7DFD07A87D%A8A8A87DFD09A87DA8A87D7DFD0DA87DA8A8A87DFD0DA87DA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.2-c063 53.352624, 2008/07/30-18:05:41        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreatorTool>Adobe Illustrator CS4</xmp:CreatorTool>
         <xmp:CreateDate>2010-10-30T21:49:25+11:00</xmp:CreateDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>44</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgALAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FUgvtK0vUPNKC/s4LsR2JMYnjSQKTNvTmDStMVRX+E/Kv/Vmsf8ApGh/5pxV5p5r0a/8ueadS8zz&#xA;aXpsnlGC3t7W1s5xb29us9zPbw/WJnEMjJHG0kjSMV+FQTyYHiqrPNA0bytq2hadqp8v2dqdQtYb&#xA;o2sltDziM0ayem3wDdeVDtiqV/mH5X8tReTtQki0myjcejR1t4gRWdB1C4qyP/CflX/qzWP/AEjQ&#xA;/wDNOKsT/MzyLdX3lr6t5Q06ytdVeZOU6w26FYgrE7svduI2II6/EAUZVW8m/wCFtbutf06bRtIF&#xA;55e1D9HTG29G59Rfq0Myyv8AuYSjFpWRk4/C6MKmmKsm/wAJ+Vf+rNY/9I0P/NOKsc8meV/LUn6d&#xA;9TSbJ+Gr3apyt4jRRwoBVemKsj/wn5V/6s1j/wBI0P8AzTiryTRFu/Kmp6bpHm3S9Jvr/wAzaq6W&#xA;cUz26zw2xWMExxpAY2VHZurpyoAqhnVAq9b/AMJ+Vf8AqzWP/SND/wA04qgrzQ9FsNX0Oax0+2tJ&#xA;WvJEaSCGONipsrk8SVANKgYqyLFXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FUs1DzHpFl&#xA;cG0eUz34Xl9Qtkae44noxiiDMqn+ZqL74qlV7pWv6zdpdIW0AIhiMokE108ZYHiY4z6EZBFVbnJ7&#xA;jFUfB5baKFI21bUZmUUaWSZeTHxPFFX7gMVVP0B/2sr7/kd/zbirv0B/2sr7/kd/zbiqH1DyfZ6j&#xA;ZyWd5fX0ttLTnGZyK8SGHQDuMVV20JVUs2p3yqoqzGegAHc7YqlOiWF5qssuorqV9Ho7gJpsZlHK&#xA;da1NyxK1Cv8A7qA6r8R+0Aqqb/oD/tZX3/I7/m3FXfoD/tZX3/I7/m3FUPZ+T7Oy9f6tfX0f1mZr&#xA;iak5PKV6cm3HemKoj9Af9rK+/wCR3/NuKpfNpc6a/aWY1O++rz2lzM6+sPtwyQKpB416TNiqYfoD&#xA;/tZX3/I7/m3FV0GgwR3UFzJc3Ny9sxeBZ5Syq7I0ZagA34Ow38cVTPFXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYqp3Fxb20Dz3EqQwRAtJLIwRFUdSzGgAxVKW8xy3QpodjJqPL7N25+rWY2qD67qWkU&#xA;9mhjkGKu/Q2qXu+r6i/pn/jy08taxU7cpVY3DMPFZEU90xVMrHTtP0+D6vY20VrDyLmOFFRSx6sQ&#xA;oFSe5xVEYq7FXYq7FXYqx+/r5gvZNLjJ/Q1o1NVlHS4kG/1NT3QdZj/zz3q/FVkAAAoNgOgxV2Ku&#xA;xV2KuxVKdRHpeYNHuP8AfoubKu3+7Y1uPn/x6Yqm2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVL&#xA;7/zBpNjOLaafnesAy2UCtPcFTty9GIPJw8WpxHc4qhfW8z3+0EEej25/3bclbi6I7gQxN6Kf5LGV&#xA;/dMVVLXyxp0cyXN40mp3qEMl1fMJWVxtyijAWGE0/wB9RriqbYq7FXYq7FXYq7FXYqwbV/zK0ebz&#xA;yfy4065aDzPLCk7zsq+nFCyPI/p1J5TrEgYKVp8StuAwxVmVhYWthZxWdonp28K8UWpJ8SWY1LMx&#xA;3ZjuTud8VV8VdirsVdirsVYF+aHnq38qal5QE2mXuoNqWq/VoDaJGyLNLBJBHG7yPHxZzcVXxCt0&#xA;xVnuKuxV2KuxV2KuxV2KuxV2KuxV2KuxV5W/nTVVe30z9IakdSn0gakbsppywBzavP8ADG0HqOga&#xA;PizKKAkDFUHpvkr8zrzUk816355u59Fl08n9CaZAtvN6bIJkVGQ8DNzAq4QM32RRdsVZD+W7W2te&#xA;XjfaRc6hpNuZnjeBodNBd1Ckyc47dlkryozVJ5Ag7jFUv13zfqegXGpi71DU71ItUSws1gTTYwqn&#xA;T7a6Id5YFXmzzMEXqxoMVZD5aj1zUf0r9Y128/0PUbi0h4x2I/dxceNf9G674qg49fuH88yeUfr2&#xA;sC4jh9f696WnegQEV609Dnx+PiH48eYK9RiqYazBrVnqOg28OvXvp6jfPbXHKOxJ9NbG5uBx/wBG&#xA;2POBfoxVjeg+btU8wS6W1pqGp2MNxqj2FzHdJprSFBp1xdjaOBvTkV4lV0f4lNRTvirOf0NqP/V+&#xA;vv8AgLH/ALJsVYyPMFwfPR8oi/1f11h9Y3vpaf6P2OfT6vz4U+HnSnP4euKsm/Q2o/8AV+vv+Asf&#xA;+ybFWC+YvN+p+XE1ie81DU76K11RNPtY7dNNjop0yG9/eSSwIgLO7Im+7FV98VSy81Gz8o+Zdbuy&#xA;2o3F/qmrx2cl5aQae07ounWcoWSSSDk7AzERRL1APEbHFU0m83anp0Vgt7qOpXMuo6nqVjHLCumx&#xA;RRx2eoPax8mlgUNIU4kIvxMFcjpTFWSeWYNa1HTpri41289RL7ULZeMdiB6drfTW8f8Ax7deEQr7&#xA;4ql/krX7jzXHfyW9/rFktjP6B+tRaeOZIr+zbtxdejo1GU9cVSvXfN+p6BPqYu9Q1O9SLVU0+0WB&#xA;NNj4qdPt7s83lgVSzPMyoo3Y0HvirIPLUeuaj+lfrGu3n+h6jcWkPGOxH7uLjxr/AKN13xVB+U9f&#xA;ufMeoaxZRX2sWb6PN6MklxHpwWQmSWP4eEDFW/ccijUIVkb9rFUk83as2nwanca1dX2qwaTrdvDp&#xA;kaRaapikTTob5Jmklt1RGDu6o1RVmVP2sVZRoC61qF3rUcuuXqx2N5HBbqI7HkI3sLW5IYi2IJ53&#xA;DYqgrrX7i3882flE32sPcXkPrLfLFp3oKOEr1NYOfEfVyrMFoGZF/axVMPM0Gtadp0Nxb69e+o99&#xA;p9s3KOxI9O6vobeT/j268JTT3xVjFv5x1XUrs29lqGpWn1bV7fTbk3KacWZJXlR/gSAtG/7nlR9+&#xA;LKe+yrPP0NqP/V+vv+Asf+ybFWM3/mCez872PlNr/WJJ76L1lvUi0/0Vqsrbg2/Mqv1ch2AopZAf&#xA;tYqyb9Daj/1fr7/gLH/smxVhHmDzTqnl+51t7vVNRu7Wwls4baOFNPQg3MTSM0ssluqKvwUBPeg7&#xA;4qnfllta1aXVml1q+jjtbqGK2jMdgHWOXT7W6KuRbEFg9w3TFU4uNM1CC3lnbW9QdYkZyiRWTOQo&#xA;rRVFtufAYqkXkbWLrzbop1SDUdVsoxKYhHcJp5LURX5KyW7KwHqcWodnDL1XFUz12y1ex0TUL2HX&#xA;b0zWttNNFyjsSvKOMstR9WG1RiqVj/A36GFP0x+iPq21P036P1bh93Dh+GKq1l/hL6nB9T/TX1T0&#xA;0+r8P05x9PiOHH249MVV/wDnXP8Atef9zzFUJZf4K+s3/wBU/TP1j11/SPD9OcvX9CLj6n+V6Hp/&#xA;RTFVum/4I/0r9H/pj/eiT656X6b/AN6NvU50/a6VxVG/865/2vP+55iqEvf8FfWbD63+mfrHrt+j&#xA;uf6c5ev6EvL0/wDK9D1Porirr3/Bf1mw+t/pn6x67fo/n+m+Xr+hLy9P/K9D1P8AY1xVF/8AOuf9&#xA;rz/ueYq7/nXP+15/3PMVd/zrn/a8/wC55iqEsv8ABf1m/wDqn6Z+seuv6Q4fpvl6/oRcfU/yvQ9P&#xA;/Y0xV1l/gr6zf/VP0z9Y9df0jw/TnL1/Qi4+p/leh6f0UxV2mf4K+rP+jv0z9X9e45+l+nOPr+u/&#xA;1iv+V6/Pl71xV2mf4L+rP+jv0z9X9e45+l+m+Pr+u/1iv+V6/Pl/lVxVF/8AOuf9rz/ueYqhLL/B&#xA;X1m/+qfpn6x66/pHh+nOXr+hFx9T/K9D0/opiq3Tf8Ef6V+j/wBMf70SfXPS/Tf+9G3qc6ftdK4q&#xA;jf8AnXP+15/3PMVQll/gr6zf/VP0z9Y9df0jw/TnL1/Qi4+p/leh6f0UxV1l/gv6zf8A1T9M/WPX&#xA;X9IcP03y9f0IuPqf5Xoen/saYqi/+dc/7Xn/AHPMVQmp/wCCvqyfpH9M/V/Xt+Hq/pzj6/rp9Xp/&#xA;levw4+9MVW6l/gj/AEX9Ifpj/eiP6n6v6b/3o39PhX9rrTFUb/zrn/a8/wC55irv+dc/7Xn/AHPM&#xA;Vd/zrn/a8/7nmKoK1/wR+kb36t+mPr/7r6/x/TfP7P7rn/semKrrL/BX1m/+qfpn6x66/pHh+nOX&#xA;r+hFx9T/ACvQ9P6KYqi/+dc/7Xn/AHPMVd/zrn/a8/7nmKqF9/hH6lcfXf019T9N/rPqfpvh6XE8&#xA;+Vf2eNa4q//Z</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>612.000000</stDim:w>
            <stDim:h>792.000000</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -82 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 82 li
502 82 li
502 0 li
cp
clp
[1 0 0 1 0 0 ]ct
1 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
270.833 .5 mo
339.5 .5 li
339.5 19.5 li
270.833 19.5 li
270.833 .5 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
.75021 .679683 .670222 .90164 cmyk
@
300.729 10.5557 mo
301.043 10.6357 301.366 10.6758 301.698 10.6758 cv
302.558 10.6758 303.265 10.4414 303.819 9.97266 cv
304.237 9.61719 304.446 9.14258 304.446 8.54883 cv
304.446 8.12305 304.337 7.75586 304.118 7.44727 cv
303.899 7.13867 303.625 6.91211 303.295 6.76758 cv
302.965 6.62305 302.492 6.49023 301.877 6.36914 cv
301.262 6.24805 300.888 6.16016 300.755 6.10547 cv
300.556 6.02734 300.404 5.91895 300.301 5.78027 cv
300.197 5.6416 300.146 5.49805 300.146 5.34961 cv
300.146 5.13086 300.271 4.9209 300.523 4.71973 cv
300.775 4.51855 301.118 4.41797 301.552 4.41797 cv
301.849 4.41797 302.11 4.46875 302.337 4.57031 cv
302.563 4.67188 302.733 4.79688 302.847 4.94531 cv
302.913 5.03125 302.968 5.17383 303.011 5.37305 cv
303.054 5.57227 303.118 5.70508 303.204 5.77148 cv
303.313 5.86133 303.442 5.90625 303.591 5.90625 cv
303.767 5.90625 303.91 5.84473 304.021 5.72168 cv
304.133 5.59863 304.188 5.39258 304.188 5.10352 cv
304.188 4.20117 li
304.188 3.91602 304.133 3.71191 304.021 3.58887 cv
303.91 3.46582 303.767 3.4043 303.591 3.4043 cv
303.435 3.4043 303.278 3.48047 303.122 3.63281 cv
302.907 3.49219 302.668 3.3877 302.404 3.31934 cv
302.141 3.25098 301.854 3.2168 301.546 3.2168 cv
300.776 3.2168 300.151 3.43262 299.671 3.86426 cv
299.19 4.2959 298.95 4.79883 298.95 5.37305 cv
298.95 5.73633 299.048 6.07422 299.243 6.38672 cv
299.438 6.69922 299.704 6.94141 300.04 7.11328 cv
300.376 7.28516 300.872 7.43164 301.528 7.55273 cv
302.071 7.6543 302.421 7.73438 302.577 7.79297 cv
302.815 7.87891 302.987 7.9873 303.093 8.11816 cv
303.198 8.24902 303.251 8.38867 303.251 8.53711 cv
303.251 8.75977 303.142 8.94727 302.923 9.09961 cv
302.579 9.34961 302.14 9.47461 301.604 9.47461 cv
301.261 9.47461 300.944 9.41211 300.655 9.28711 cv
300.366 9.16211 300.165 9.03906 300.052 8.91797 cv
299.997 8.85547 299.944 8.7373 299.894 8.56348 cv
299.843 8.38965 299.77 8.26563 299.674 8.19141 cv
299.578 8.11719 299.46 8.08008 299.319 8.08008 cv
299.136 8.08008 298.988 8.1416 298.877 8.26465 cv
298.766 8.3877 298.71 8.59375 298.71 8.88281 cv
298.71 9.69141 li
298.71 9.97656 298.766 10.1807 298.877 10.3037 cv
298.988 10.4268 299.136 10.4883 299.319 10.4883 cv
299.413 10.4883 299.492 10.4707 299.557 10.4355 cv
299.621 10.4004 299.706 10.3203 299.812 10.1953 cv
300.108 10.3555 300.414 10.4756 300.729 10.5557 cv
300.729 10.5557 li
cp
f
310.065 12.1777 mo
310.593 11.6777 310.926 11.2861 311.064 11.0029 cv
311.203 10.7197 311.272 10.4121 311.272 10.0801 cv
311.272 9.42773 311.03 8.87207 310.546 8.41309 cv
310.062 7.9541 309.44 7.72461 308.683 7.72461 cv
308.194 7.72461 307.742 7.83008 307.326 8.04102 cv
306.91 8.25195 306.594 8.5332 306.377 8.88477 cv
306.16 9.23633 306.052 9.5293 306.052 9.76367 cv
306.052 9.91992 306.111 10.0566 306.23 10.1738 cv
306.35 10.291 306.491 10.3496 306.655 10.3496 cv
306.796 10.3496 306.914 10.3145 307.01 10.2441 cv
307.105 10.1738 307.181 10.0566 307.235 9.89258 cv
307.325 9.63086 307.444 9.43359 307.593 9.30078 cv
307.878 9.05078 308.235 8.92578 308.665 8.92578 cv
309.091 8.92578 309.432 9.03809 309.688 9.2627 cv
309.943 9.4873 310.071 9.74609 310.071 10.0391 cv
310.071 10.2734 309.958 10.5215 309.731 10.7832 cv
309.282 11.2949 307.976 12.4434 305.812 14.2285 cv
305.812 15.5 li
311.284 15.5 li
311.284 14.9258 li
311.284 14.6328 311.23 14.4258 311.123 14.3047 cv
311.016 14.1836 310.87 14.123 310.687 14.123 cv
310.558 14.123 310.421 14.1816 310.276 14.2988 cv
307.646 14.2988 li
308.845 13.2793 309.651 12.5723 310.065 12.1777 cv
310.065 12.1777 li
310.065 12.1777 li
cp
f
202.167 .5 mo
270.833 .5 li
270.833 19.5 li
202.167 19.5 li
202.167 .5 li
cp
@
232.062 10.5557 mo
232.376 10.6357 232.699 10.6758 233.031 10.6758 cv
233.891 10.6758 234.598 10.4414 235.152 9.97266 cv
235.57 9.61719 235.779 9.14258 235.779 8.54883 cv
235.779 8.12305 235.67 7.75586 235.451 7.44727 cv
235.232 7.13867 234.958 6.91211 234.628 6.76758 cv
234.298 6.62305 233.825 6.49023 233.21 6.36914 cv
232.595 6.24805 232.221 6.16016 232.088 6.10547 cv
231.889 6.02734 231.737 5.91895 231.634 5.78027 cv
231.53 5.6416 231.479 5.49805 231.479 5.34961 cv
231.479 5.13086 231.604 4.9209 231.856 4.71973 cv
232.108 4.51855 232.451 4.41797 232.885 4.41797 cv
233.182 4.41797 233.443 4.46875 233.67 4.57031 cv
233.896 4.67188 234.066 4.79688 234.18 4.94531 cv
234.246 5.03125 234.301 5.17383 234.344 5.37305 cv
234.387 5.57227 234.451 5.70508 234.537 5.77148 cv
234.646 5.86133 234.775 5.90625 234.924 5.90625 cv
235.1 5.90625 235.243 5.84473 235.354 5.72168 cv
235.466 5.59863 235.521 5.39258 235.521 5.10352 cv
235.521 4.20117 li
235.521 3.91602 235.466 3.71191 235.354 3.58887 cv
235.243 3.46582 235.1 3.4043 234.924 3.4043 cv
234.768 3.4043 234.611 3.48047 234.455 3.63281 cv
234.24 3.49219 234.001 3.3877 233.737 3.31934 cv
233.474 3.25098 233.188 3.2168 232.879 3.2168 cv
232.109 3.2168 231.484 3.43262 231.004 3.86426 cv
230.523 4.2959 230.283 4.79883 230.283 5.37305 cv
230.283 5.73633 230.381 6.07422 230.576 6.38672 cv
230.771 6.69922 231.037 6.94141 231.373 7.11328 cv
231.709 7.28516 232.205 7.43164 232.861 7.55273 cv
233.404 7.6543 233.754 7.73438 233.91 7.79297 cv
234.148 7.87891 234.32 7.9873 234.426 8.11816 cv
234.531 8.24902 234.584 8.38867 234.584 8.53711 cv
234.584 8.75977 234.475 8.94727 234.256 9.09961 cv
233.912 9.34961 233.473 9.47461 232.938 9.47461 cv
232.594 9.47461 232.277 9.41211 231.988 9.28711 cv
231.699 9.16211 231.498 9.03906 231.385 8.91797 cv
231.33 8.85547 231.277 8.7373 231.227 8.56348 cv
231.176 8.38965 231.103 8.26563 231.007 8.19141 cv
230.911 8.11719 230.793 8.08008 230.652 8.08008 cv
230.469 8.08008 230.321 8.1416 230.21 8.26465 cv
230.099 8.3877 230.043 8.59375 230.043 8.88281 cv
230.043 9.69141 li
230.043 9.97656 230.099 10.1807 230.21 10.3037 cv
230.321 10.4268 230.469 10.4883 230.652 10.4883 cv
230.746 10.4883 230.825 10.4707 230.89 10.4355 cv
230.954 10.4004 231.039 10.3203 231.145 10.1953 cv
231.441 10.3555 231.747 10.4756 232.062 10.5557 cv
232.062 10.5557 li
cp
f
238.129 8.39258 mo
237.867 8.46289 237.695 8.54395 237.613 8.63574 cv
237.531 8.72754 237.49 8.85352 237.49 9.01367 cv
237.49 9.18945 237.546 9.33789 237.657 9.45898 cv
237.769 9.58008 237.9 9.64063 238.053 9.64063 cv
238.139 9.64063 238.268 9.61719 238.439 9.57031 cv
239.512 9.28906 li
239.512 14.2988 li
238.299 14.2988 li
238.01 14.2988 237.804 14.3545 237.681 14.4658 cv
237.558 14.5771 237.496 14.7207 237.496 14.8965 cv
237.496 15.0762 237.558 15.2217 237.681 15.333 cv
237.804 15.4443 238.01 15.5 238.299 15.5 cv
241.926 15.5 li
242.215 15.5 242.421 15.4443 242.544 15.333 cv
242.667 15.2217 242.729 15.0781 242.729 14.9023 cv
242.729 14.7227 242.667 14.5771 242.544 14.4658 cv
242.421 14.3545 242.215 14.2988 241.926 14.2988 cv
240.713 14.2988 li
240.713 7.72461 li
238.129 8.39258 li
238.129 8.39258 li
cp
f
133.5 .5 mo
202.167 .5 li
202.167 19.5 li
133.5 19.5 li
133.5 .5 li
cp
@
163.395 10.5557 mo
163.709 10.6357 164.033 10.6758 164.365 10.6758 cv
165.224 10.6758 165.931 10.4414 166.486 9.97266 cv
166.904 9.61719 167.113 9.14258 167.113 8.54883 cv
167.113 8.12305 167.003 7.75586 166.785 7.44727 cv
166.566 7.13867 166.292 6.91211 165.961 6.76758 cv
165.631 6.62305 165.159 6.49023 164.543 6.36914 cv
163.928 6.24805 163.554 6.16016 163.421 6.10547 cv
163.222 6.02734 163.071 5.91895 162.967 5.78027 cv
162.864 5.6416 162.812 5.49805 162.812 5.34961 cv
162.812 5.13086 162.938 4.9209 163.19 4.71973 cv
163.442 4.51855 163.785 4.41797 164.218 4.41797 cv
164.515 4.41797 164.777 4.46875 165.003 4.57031 cv
165.23 4.67188 165.4 4.79688 165.513 4.94531 cv
165.58 5.03125 165.634 5.17383 165.677 5.37305 cv
165.72 5.57227 165.785 5.70508 165.871 5.77148 cv
165.98 5.86133 166.109 5.90625 166.257 5.90625 cv
166.433 5.90625 166.577 5.84473 166.688 5.72168 cv
166.799 5.59863 166.855 5.39258 166.855 5.10352 cv
166.855 4.20117 li
166.855 3.91602 166.799 3.71191 166.688 3.58887 cv
166.577 3.46582 166.433 3.4043 166.257 3.4043 cv
166.101 3.4043 165.945 3.48047 165.789 3.63281 cv
165.574 3.49219 165.334 3.3877 165.071 3.31934 cv
164.807 3.25098 164.521 3.2168 164.212 3.2168 cv
163.443 3.2168 162.818 3.43262 162.337 3.86426 cv
161.857 4.2959 161.617 4.79883 161.617 5.37305 cv
161.617 5.73633 161.714 6.07422 161.91 6.38672 cv
162.105 6.69922 162.371 6.94141 162.707 7.11328 cv
163.042 7.28516 163.539 7.43164 164.195 7.55273 cv
164.738 7.6543 165.087 7.73438 165.244 7.79297 cv
165.482 7.87891 165.654 7.9873 165.759 8.11816 cv
165.865 8.24902 165.917 8.38867 165.917 8.53711 cv
165.917 8.75977 165.808 8.94727 165.589 9.09961 cv
165.246 9.34961 164.806 9.47461 164.271 9.47461 cv
163.927 9.47461 163.611 9.41211 163.322 9.28711 cv
163.033 9.16211 162.832 9.03906 162.718 8.91797 cv
162.664 8.85547 162.611 8.7373 162.56 8.56348 cv
162.509 8.38965 162.436 8.26563 162.34 8.19141 cv
162.245 8.11719 162.126 8.08008 161.986 8.08008 cv
161.802 8.08008 161.655 8.1416 161.543 8.26465 cv
161.432 8.3877 161.376 8.59375 161.376 8.88281 cv
161.376 9.69141 li
161.376 9.97656 161.432 10.1807 161.543 10.3037 cv
161.655 10.4268 161.802 10.4883 161.986 10.4883 cv
162.08 10.4883 162.159 10.4707 162.223 10.4355 cv
162.288 10.4004 162.373 10.3203 162.478 10.1953 cv
162.775 10.3555 163.081 10.4756 163.395 10.5557 cv
163.395 10.5557 li
cp
f
172.849 12.3594 mo
172.849 13.0234 172.675 13.5801 172.328 14.0293 cv
172.097 14.3262 171.802 14.4746 171.443 14.4746 cv
171.064 14.4746 170.773 14.3398 170.57 14.0703 cv
170.203 13.5859 170.019 13.0156 170.019 12.3594 cv
170.019 11.041 li
170.019 10.377 170.193 9.82031 170.541 9.37109 cv
170.771 9.07422 171.068 8.92578 171.431 8.92578 cv
171.806 8.92578 172.097 9.06055 172.304 9.33008 cv
172.667 9.81836 172.849 10.3887 172.849 11.041 cv
172.849 12.3594 li
172.849 12.3594 li
cp
173.602 9.21582 mo
173.299 8.64355 172.981 8.25195 172.647 8.04102 cv
172.313 7.83008 171.906 7.72461 171.425 7.72461 cv
170.585 7.72461 169.941 8.08301 169.492 8.7998 cv
169.042 9.5166 168.818 10.2637 168.818 11.041 cv
168.818 12.3594 li
168.818 13 168.967 13.6064 169.266 14.1787 cv
169.565 14.751 169.881 15.1436 170.215 15.3564 cv
170.549 15.5693 170.958 15.6758 171.443 15.6758 cv
172.283 15.6758 172.928 15.3184 173.379 14.6035 cv
173.831 13.8887 174.056 13.1406 174.056 12.3594 cv
174.056 11.041 li
174.056 10.3965 173.905 9.78809 173.602 9.21582 cv
173.602 9.21582 li
cp
f
143.83 19.687 mo
25.1445 67.5859 li
@
17.7256 70.5801 mo
26.2671 70.3682 li
24.0215 64.8042 li
17.7256 70.5801 li
cp
f
0 lc
0 lj
17.7256 70.5801 mo
26.2671 70.3682 li
24.0215 64.8042 li
17.7256 70.5801 li
cp
@
1 lc
1 lj
15.5 67.5 mo
51.5 67.5 li
51.5 81.5 li
15.5 81.5 li
15.5 67.5 li
cp
@
34.8682 76.0029 mo
34.501 76.3291 34.0479 76.4922 33.5088 76.4922 cv
32.9736 76.4922 32.5225 76.3291 32.1553 76.0029 cv
31.7881 75.6768 31.6045 75.3262 31.6045 74.9512 cv
31.6045 74.4941 31.7861 74.0918 32.1494 73.7441 cv
32.5127 73.3965 32.9658 73.2227 33.5088 73.2227 cv
34.126 73.2227 34.624 73.4414 35.0029 73.8789 cv
35.2803 74.2031 35.4189 74.5586 35.4189 74.9453 cv
35.4189 75.3242 35.2354 75.6768 34.8682 76.0029 cv
34.8682 76.0029 li
cp
36.2334 73.5244 mo
35.9756 73.0654 35.5938 72.7002 35.0879 72.4287 cv
34.582 72.1572 34.0557 72.0215 33.5088 72.0215 cv
32.9658 72.0215 32.4453 72.1543 31.9473 72.4199 cv
31.4492 72.6855 31.0674 73.0498 30.8018 73.5127 cv
30.5361 73.9756 30.4033 74.4473 30.4033 74.9277 cv
30.4033 75.4004 30.5342 75.8535 30.7959 76.2871 cv
31.0576 76.7207 31.4385 77.0635 31.9385 77.3154 cv
32.4385 77.5674 32.9619 77.6934 33.5088 77.6934 cv
34.0596 77.6934 34.5879 77.5654 35.0938 77.3096 cv
35.5996 77.0537 35.9805 76.71 36.2363 76.2783 cv
36.4922 75.8467 36.6201 75.4004 36.6201 74.9395 cv
36.6201 74.4551 36.4912 73.9834 36.2334 73.5244 cv
36.2334 73.5244 li
cp
f
.5 67.5 mo
15.5 67.5 li
15.5 81.5 li
.5 81.5 li
.5 67.5 li
cp
@
9.08105 72.1152 mo
8.7959 72.0527 8.4873 72.0215 8.15527 72.0215 cv
7.2373 72.0215 6.49316 72.3018 5.92285 72.8623 cv
5.35254 73.4229 5.06738 74.1309 5.06738 74.9863 cv
5.06738 75.8887 5.41895 76.5996 6.12207 77.1191 cv
6.6416 77.5059 7.36816 77.6992 8.30176 77.6992 cv
9.34082 77.6992 10.1299 77.5215 10.6689 77.166 cv
11.0322 76.9277 11.2139 76.6758 11.2139 76.4102 cv
11.2139 76.2461 11.1543 76.1035 11.0352 75.9824 cv
10.916 75.8613 10.7744 75.8008 10.6104 75.8008 cv
10.4736 75.8008 10.3213 75.876 10.1533 76.0264 cv
9.98535 76.1768 9.80762 76.2832 9.62012 76.3457 cv
9.30371 76.4473 8.89551 76.498 8.39551 76.498 cv
7.63379 76.498 7.08887 76.3623 6.76074 76.0908 cv
6.43262 75.8193 6.26855 75.4492 6.26855 74.9805 cv
6.26855 74.4727 6.43945 74.0527 6.78125 73.7207 cv
7.12305 73.3887 7.57715 73.2227 8.14355 73.2227 cv
8.63574 73.2227 9.04004 73.3164 9.35645 73.5039 cv
9.53613 73.6094 9.64941 73.7705 9.69629 73.9873 cv
9.74316 74.2041 9.80762 74.3477 9.88965 74.418 cv
10.0029 74.5117 10.1416 74.5586 10.3057 74.5586 cv
10.4854 74.5586 10.6309 74.498 10.7422 74.377 cv
10.8535 74.2559 10.9092 74.0508 10.9092 73.7617 cv
10.9092 72.9883 li
10.9092 72.7031 10.8535 72.499 10.7422 72.376 cv
10.6309 72.2529 10.4893 72.1914 10.3174 72.1914 cv
10.165 72.1914 10.0166 72.2598 9.87207 72.3965 cv
9.62988 72.2715 9.36621 72.1777 9.08105 72.1152 cv
9.08105 72.1152 li
cp
f
66.5 67.5 mo
105.5 67.5 li
105.5 81.5 li
66.5 81.5 li
66.5 67.5 li
cp
@
87.3682 76.0029 mo
87.001 76.3291 86.5479 76.4922 86.0088 76.4922 cv
85.4736 76.4922 85.0225 76.3291 84.6553 76.0029 cv
84.2881 75.6768 84.1045 75.3262 84.1045 74.9512 cv
84.1045 74.4941 84.2861 74.0918 84.6494 73.7441 cv
85.0127 73.3965 85.4658 73.2227 86.0088 73.2227 cv
86.626 73.2227 87.124 73.4414 87.5029 73.8789 cv
87.7803 74.2031 87.9189 74.5586 87.9189 74.9453 cv
87.9189 75.3242 87.7354 75.6768 87.3682 76.0029 cv
87.3682 76.0029 li
cp
88.7334 73.5244 mo
88.4756 73.0654 88.0938 72.7002 87.5879 72.4287 cv
87.082 72.1572 86.5557 72.0215 86.0088 72.0215 cv
85.4658 72.0215 84.9453 72.1543 84.4473 72.4199 cv
83.9492 72.6855 83.5674 73.0498 83.3018 73.5127 cv
83.0361 73.9756 82.9033 74.4473 82.9033 74.9277 cv
82.9033 75.4004 83.0342 75.8535 83.2959 76.2871 cv
83.5576 76.7207 83.9385 77.0635 84.4385 77.3154 cv
84.9385 77.5674 85.4619 77.6934 86.0088 77.6934 cv
86.5596 77.6934 87.0879 77.5654 87.5938 77.3096 cv
88.0996 77.0537 88.4805 76.71 88.7363 76.2783 cv
88.9922 75.8467 89.1201 75.4004 89.1201 74.9395 cv
89.1201 74.4551 88.9912 73.9834 88.7334 73.5244 cv
88.7334 73.5244 li
cp
f
51.5 67.5 mo
66.5 67.5 li
66.5 81.5 li
51.5 81.5 li
51.5 67.5 li
cp
@
60.0811 72.1152 mo
59.7959 72.0527 59.4873 72.0215 59.1553 72.0215 cv
58.2373 72.0215 57.4932 72.3018 56.9229 72.8623 cv
56.3525 73.4229 56.0674 74.1309 56.0674 74.9863 cv
56.0674 75.8887 56.4189 76.5996 57.1221 77.1191 cv
57.6416 77.5059 58.3682 77.6992 59.3018 77.6992 cv
60.3408 77.6992 61.1299 77.5215 61.6689 77.166 cv
62.0322 76.9277 62.2139 76.6758 62.2139 76.4102 cv
62.2139 76.2461 62.1543 76.1035 62.0352 75.9824 cv
61.916 75.8613 61.7744 75.8008 61.6104 75.8008 cv
61.4736 75.8008 61.3213 75.876 61.1533 76.0264 cv
60.9854 76.1768 60.8076 76.2832 60.6201 76.3457 cv
60.3037 76.4473 59.8955 76.498 59.3955 76.498 cv
58.6338 76.498 58.0889 76.3623 57.7607 76.0908 cv
57.4326 75.8193 57.2686 75.4492 57.2686 74.9805 cv
57.2686 74.4727 57.4395 74.0527 57.7813 73.7207 cv
58.123 73.3887 58.5771 73.2227 59.1436 73.2227 cv
59.6357 73.2227 60.04 73.3164 60.3564 73.5039 cv
60.5361 73.6094 60.6494 73.7705 60.6963 73.9873 cv
60.7432 74.2041 60.8076 74.3477 60.8896 74.418 cv
61.0029 74.5117 61.1416 74.5586 61.3057 74.5586 cv
61.4854 74.5586 61.6309 74.498 61.7422 74.377 cv
61.8535 74.2559 61.9092 74.0508 61.9092 73.7617 cv
61.9092 72.9883 li
61.9092 72.7031 61.8535 72.499 61.7422 72.376 cv
61.6309 72.2529 61.4893 72.1914 61.3174 72.1914 cv
61.165 72.1914 61.0166 72.2598 60.8721 72.3965 cv
60.6299 72.2715 60.3662 72.1777 60.0811 72.1152 cv
60.0811 72.1152 li
cp
f
120.5 67.5 mo
177.5 67.5 li
177.5 81.5 li
120.5 81.5 li
120.5 67.5 li
cp
@
150.368 76.0029 mo
150.001 76.3291 149.548 76.4922 149.009 76.4922 cv
148.474 76.4922 148.022 76.3291 147.655 76.0029 cv
147.288 75.6768 147.104 75.3262 147.104 74.9512 cv
147.104 74.4941 147.286 74.0918 147.649 73.7441 cv
148.013 73.3965 148.466 73.2227 149.009 73.2227 cv
149.626 73.2227 150.124 73.4414 150.503 73.8789 cv
150.78 74.2031 150.919 74.5586 150.919 74.9453 cv
150.919 75.3242 150.735 75.6768 150.368 76.0029 cv
150.368 76.0029 li
cp
151.733 73.5244 mo
151.476 73.0654 151.094 72.7002 150.588 72.4287 cv
150.082 72.1572 149.556 72.0215 149.009 72.0215 cv
148.466 72.0215 147.945 72.1543 147.447 72.4199 cv
146.949 72.6855 146.567 73.0498 146.302 73.5127 cv
146.036 73.9756 145.903 74.4473 145.903 74.9277 cv
145.903 75.4004 146.034 75.8535 146.296 76.2871 cv
146.558 76.7207 146.938 77.0635 147.438 77.3154 cv
147.938 77.5674 148.462 77.6934 149.009 77.6934 cv
149.56 77.6934 150.088 77.5654 150.594 77.3096 cv
151.1 77.0537 151.48 76.71 151.736 76.2783 cv
151.992 75.8467 152.12 75.4004 152.12 74.9395 cv
152.12 74.4551 151.991 73.9834 151.733 73.5244 cv
151.733 73.5244 li
cp
f
105.5 67.5 mo
120.5 67.5 li
120.5 81.5 li
105.5 81.5 li
105.5 67.5 li
cp
@
114.081 72.1152 mo
113.796 72.0527 113.487 72.0215 113.155 72.0215 cv
112.237 72.0215 111.493 72.3018 110.923 72.8623 cv
110.353 73.4229 110.067 74.1309 110.067 74.9863 cv
110.067 75.8887 110.419 76.5996 111.122 77.1191 cv
111.642 77.5059 112.368 77.6992 113.302 77.6992 cv
114.341 77.6992 115.13 77.5215 115.669 77.166 cv
116.032 76.9277 116.214 76.6758 116.214 76.4102 cv
116.214 76.2461 116.154 76.1035 116.035 75.9824 cv
115.916 75.8613 115.774 75.8008 115.61 75.8008 cv
115.474 75.8008 115.321 75.876 115.153 76.0264 cv
114.985 76.1768 114.808 76.2832 114.62 76.3457 cv
114.304 76.4473 113.896 76.498 113.396 76.498 cv
112.634 76.498 112.089 76.3623 111.761 76.0908 cv
111.433 75.8193 111.269 75.4492 111.269 74.9805 cv
111.269 74.4727 111.439 74.0527 111.781 73.7207 cv
112.123 73.3887 112.577 73.2227 113.144 73.2227 cv
113.636 73.2227 114.04 73.3164 114.356 73.5039 cv
114.536 73.6094 114.649 73.7705 114.696 73.9873 cv
114.743 74.2041 114.808 74.3477 114.89 74.418 cv
115.003 74.5117 115.142 74.5586 115.306 74.5586 cv
115.485 74.5586 115.631 74.498 115.742 74.377 cv
115.854 74.2559 115.909 74.0508 115.909 73.7617 cv
115.909 72.9883 li
115.909 72.7031 115.854 72.499 115.742 72.376 cv
115.631 72.2529 115.489 72.1914 115.317 72.1914 cv
115.165 72.1914 115.017 72.2598 114.872 72.3965 cv
114.63 72.2715 114.366 72.1777 114.081 72.1152 cv
114.081 72.1152 li
cp
f
192.5 67.5 mo
207.5 67.5 li
207.5 81.5 li
192.5 81.5 li
192.5 67.5 li
cp
@
201.368 76.0029 mo
201.001 76.3291 200.548 76.4922 200.009 76.4922 cv
199.474 76.4922 199.022 76.3291 198.655 76.0029 cv
198.288 75.6768 198.104 75.3262 198.104 74.9512 cv
198.104 74.4941 198.286 74.0918 198.649 73.7441 cv
199.013 73.3965 199.466 73.2227 200.009 73.2227 cv
200.626 73.2227 201.124 73.4414 201.503 73.8789 cv
201.78 74.2031 201.919 74.5586 201.919 74.9453 cv
201.919 75.3242 201.735 75.6768 201.368 76.0029 cv
201.368 76.0029 li
cp
202.733 73.5244 mo
202.476 73.0654 202.094 72.7002 201.588 72.4287 cv
201.082 72.1572 200.556 72.0215 200.009 72.0215 cv
199.466 72.0215 198.945 72.1543 198.447 72.4199 cv
197.949 72.6855 197.567 73.0498 197.302 73.5127 cv
197.036 73.9756 196.903 74.4473 196.903 74.9277 cv
196.903 75.4004 197.034 75.8535 197.296 76.2871 cv
197.558 76.7207 197.938 77.0635 198.438 77.3154 cv
198.938 77.5674 199.462 77.6934 200.009 77.6934 cv
200.56 77.6934 201.088 77.5654 201.594 77.3096 cv
202.1 77.0537 202.48 76.71 202.736 76.2783 cv
202.992 75.8467 203.12 75.4004 203.12 74.9395 cv
203.12 74.4551 202.991 73.9834 202.733 73.5244 cv
202.733 73.5244 li
cp
f
177.5 67.5 mo
192.5 67.5 li
192.5 81.5 li
177.5 81.5 li
177.5 67.5 li
cp
@
186.081 72.1152 mo
185.796 72.0527 185.487 72.0215 185.155 72.0215 cv
184.237 72.0215 183.493 72.3018 182.923 72.8623 cv
182.353 73.4229 182.067 74.1309 182.067 74.9863 cv
182.067 75.8887 182.419 76.5996 183.122 77.1191 cv
183.642 77.5059 184.368 77.6992 185.302 77.6992 cv
186.341 77.6992 187.13 77.5215 187.669 77.166 cv
188.032 76.9277 188.214 76.6758 188.214 76.4102 cv
188.214 76.2461 188.154 76.1035 188.035 75.9824 cv
187.916 75.8613 187.774 75.8008 187.61 75.8008 cv
187.474 75.8008 187.321 75.876 187.153 76.0264 cv
186.985 76.1768 186.808 76.2832 186.62 76.3457 cv
186.304 76.4473 185.896 76.498 185.396 76.498 cv
184.634 76.498 184.089 76.3623 183.761 76.0908 cv
183.433 75.8193 183.269 75.4492 183.269 74.9805 cv
183.269 74.4727 183.439 74.0527 183.781 73.7207 cv
184.123 73.3887 184.577 73.2227 185.144 73.2227 cv
185.636 73.2227 186.04 73.3164 186.356 73.5039 cv
186.536 73.6094 186.649 73.7705 186.696 73.9873 cv
186.743 74.2041 186.808 74.3477 186.89 74.418 cv
187.003 74.5117 187.142 74.5586 187.306 74.5586 cv
187.485 74.5586 187.631 74.498 187.742 74.377 cv
187.854 74.2559 187.909 74.0508 187.909 73.7617 cv
187.909 72.9883 li
187.909 72.7031 187.854 72.499 187.742 72.376 cv
187.631 72.2529 187.489 72.1914 187.317 72.1914 cv
187.165 72.1914 187.017 72.2598 186.872 72.3965 cv
186.63 72.2715 186.366 72.1777 186.081 72.1152 cv
186.081 72.1152 li
cp
f
222.5 67.5 mo
255.5 67.5 li
255.5 81.5 li
222.5 81.5 li
222.5 67.5 li
cp
@
240.368 76.0029 mo
240.001 76.3291 239.548 76.4922 239.009 76.4922 cv
238.474 76.4922 238.022 76.3291 237.655 76.0029 cv
237.288 75.6768 237.104 75.3262 237.104 74.9512 cv
237.104 74.4941 237.286 74.0918 237.649 73.7441 cv
238.013 73.3965 238.466 73.2227 239.009 73.2227 cv
239.626 73.2227 240.124 73.4414 240.503 73.8789 cv
240.78 74.2031 240.919 74.5586 240.919 74.9453 cv
240.919 75.3242 240.735 75.6768 240.368 76.0029 cv
240.368 76.0029 li
cp
241.733 73.5244 mo
241.476 73.0654 241.094 72.7002 240.588 72.4287 cv
240.082 72.1572 239.556 72.0215 239.009 72.0215 cv
238.466 72.0215 237.945 72.1543 237.447 72.4199 cv
236.949 72.6855 236.567 73.0498 236.302 73.5127 cv
236.036 73.9756 235.903 74.4473 235.903 74.9277 cv
235.903 75.4004 236.034 75.8535 236.296 76.2871 cv
236.558 76.7207 236.938 77.0635 237.438 77.3154 cv
237.938 77.5674 238.462 77.6934 239.009 77.6934 cv
239.56 77.6934 240.088 77.5654 240.594 77.3096 cv
241.1 77.0537 241.48 76.71 241.736 76.2783 cv
241.992 75.8467 242.12 75.4004 242.12 74.9395 cv
242.12 74.4551 241.991 73.9834 241.733 73.5244 cv
241.733 73.5244 li
cp
f
207.5 67.5 mo
222.5 67.5 li
222.5 81.5 li
207.5 81.5 li
207.5 67.5 li
cp
@
216.081 72.1152 mo
215.796 72.0527 215.487 72.0215 215.155 72.0215 cv
214.237 72.0215 213.493 72.3018 212.923 72.8623 cv
212.353 73.4229 212.067 74.1309 212.067 74.9863 cv
212.067 75.8887 212.419 76.5996 213.122 77.1191 cv
213.642 77.5059 214.368 77.6992 215.302 77.6992 cv
216.341 77.6992 217.13 77.5215 217.669 77.166 cv
218.032 76.9277 218.214 76.6758 218.214 76.4102 cv
218.214 76.2461 218.154 76.1035 218.035 75.9824 cv
217.916 75.8613 217.774 75.8008 217.61 75.8008 cv
217.474 75.8008 217.321 75.876 217.153 76.0264 cv
216.985 76.1768 216.808 76.2832 216.62 76.3457 cv
216.304 76.4473 215.896 76.498 215.396 76.498 cv
214.634 76.498 214.089 76.3623 213.761 76.0908 cv
213.433 75.8193 213.269 75.4492 213.269 74.9805 cv
213.269 74.4727 213.439 74.0527 213.781 73.7207 cv
214.123 73.3887 214.577 73.2227 215.144 73.2227 cv
215.636 73.2227 216.04 73.3164 216.356 73.5039 cv
216.536 73.6094 216.649 73.7705 216.696 73.9873 cv
216.743 74.2041 216.808 74.3477 216.89 74.418 cv
217.003 74.5117 217.142 74.5586 217.306 74.5586 cv
217.485 74.5586 217.631 74.498 217.742 74.377 cv
217.854 74.2559 217.909 74.0508 217.909 73.7617 cv
217.909 72.9883 li
217.909 72.7031 217.854 72.499 217.742 72.376 cv
217.631 72.2529 217.489 72.1914 217.317 72.1914 cv
217.165 72.1914 217.017 72.2598 216.872 72.3965 cv
216.63 72.2715 216.366 72.1777 216.081 72.1152 cv
216.081 72.1152 li
cp
f
270.5 67.5 mo
303.5 67.5 li
303.5 81.5 li
270.5 81.5 li
270.5 67.5 li
cp
@
288.368 76.0029 mo
288.001 76.3291 287.548 76.4922 287.009 76.4922 cv
286.474 76.4922 286.022 76.3291 285.655 76.0029 cv
285.288 75.6768 285.104 75.3262 285.104 74.9512 cv
285.104 74.4941 285.286 74.0918 285.649 73.7441 cv
286.013 73.3965 286.466 73.2227 287.009 73.2227 cv
287.626 73.2227 288.124 73.4414 288.503 73.8789 cv
288.78 74.2031 288.919 74.5586 288.919 74.9453 cv
288.919 75.3242 288.735 75.6768 288.368 76.0029 cv
288.368 76.0029 li
cp
289.733 73.5244 mo
289.476 73.0654 289.094 72.7002 288.588 72.4287 cv
288.082 72.1572 287.556 72.0215 287.009 72.0215 cv
286.466 72.0215 285.945 72.1543 285.447 72.4199 cv
284.949 72.6855 284.567 73.0498 284.302 73.5127 cv
284.036 73.9756 283.903 74.4473 283.903 74.9277 cv
283.903 75.4004 284.034 75.8535 284.296 76.2871 cv
284.558 76.7207 284.938 77.0635 285.438 77.3154 cv
285.938 77.5674 286.462 77.6934 287.009 77.6934 cv
287.56 77.6934 288.088 77.5654 288.594 77.3096 cv
289.1 77.0537 289.48 76.71 289.736 76.2783 cv
289.992 75.8467 290.12 75.4004 290.12 74.9395 cv
290.12 74.4551 289.991 73.9834 289.733 73.5244 cv
289.733 73.5244 li
cp
f
255.5 67.5 mo
270.5 67.5 li
270.5 81.5 li
255.5 81.5 li
255.5 67.5 li
cp
@
264.081 72.1152 mo
263.796 72.0527 263.487 72.0215 263.155 72.0215 cv
262.237 72.0215 261.493 72.3018 260.923 72.8623 cv
260.353 73.4229 260.067 74.1309 260.067 74.9863 cv
260.067 75.8887 260.419 76.5996 261.122 77.1191 cv
261.642 77.5059 262.368 77.6992 263.302 77.6992 cv
264.341 77.6992 265.13 77.5215 265.669 77.166 cv
266.032 76.9277 266.214 76.6758 266.214 76.4102 cv
266.214 76.2461 266.154 76.1035 266.035 75.9824 cv
265.916 75.8613 265.774 75.8008 265.61 75.8008 cv
265.474 75.8008 265.321 75.876 265.153 76.0264 cv
264.985 76.1768 264.808 76.2832 264.62 76.3457 cv
264.304 76.4473 263.896 76.498 263.396 76.498 cv
262.634 76.498 262.089 76.3623 261.761 76.0908 cv
261.433 75.8193 261.269 75.4492 261.269 74.9805 cv
261.269 74.4727 261.439 74.0527 261.781 73.7207 cv
262.123 73.3887 262.577 73.2227 263.144 73.2227 cv
263.636 73.2227 264.04 73.3164 264.356 73.5039 cv
264.536 73.6094 264.649 73.7705 264.696 73.9873 cv
264.743 74.2041 264.808 74.3477 264.89 74.418 cv
265.003 74.5117 265.142 74.5586 265.306 74.5586 cv
265.485 74.5586 265.631 74.498 265.742 74.377 cv
265.854 74.2559 265.909 74.0508 265.909 73.7617 cv
265.909 72.9883 li
265.909 72.7031 265.854 72.499 265.742 72.376 cv
265.631 72.2529 265.489 72.1914 265.317 72.1914 cv
265.165 72.1914 265.017 72.2598 264.872 72.3965 cv
264.63 72.2715 264.366 72.1777 264.081 72.1152 cv
264.081 72.1152 li
cp
f
318.5 67.5 mo
357.5 67.5 li
357.5 81.5 li
318.5 81.5 li
318.5 67.5 li
cp
@
339.368 76.0029 mo
339.001 76.3291 338.548 76.4922 338.009 76.4922 cv
337.474 76.4922 337.022 76.3291 336.655 76.0029 cv
336.288 75.6768 336.104 75.3262 336.104 74.9512 cv
336.104 74.4941 336.286 74.0918 336.649 73.7441 cv
337.013 73.3965 337.466 73.2227 338.009 73.2227 cv
338.626 73.2227 339.124 73.4414 339.503 73.8789 cv
339.78 74.2031 339.919 74.5586 339.919 74.9453 cv
339.919 75.3242 339.735 75.6768 339.368 76.0029 cv
339.368 76.0029 li
cp
340.733 73.5244 mo
340.476 73.0654 340.094 72.7002 339.588 72.4287 cv
339.082 72.1572 338.556 72.0215 338.009 72.0215 cv
337.466 72.0215 336.945 72.1543 336.447 72.4199 cv
335.949 72.6855 335.567 73.0498 335.302 73.5127 cv
335.036 73.9756 334.903 74.4473 334.903 74.9277 cv
334.903 75.4004 335.034 75.8535 335.296 76.2871 cv
335.558 76.7207 335.938 77.0635 336.438 77.3154 cv
336.938 77.5674 337.462 77.6934 338.009 77.6934 cv
338.56 77.6934 339.088 77.5654 339.594 77.3096 cv
340.1 77.0537 340.48 76.71 340.736 76.2783 cv
340.992 75.8467 341.12 75.4004 341.12 74.9395 cv
341.12 74.4551 340.991 73.9834 340.733 73.5244 cv
340.733 73.5244 li
cp
f
303.5 67.5 mo
318.5 67.5 li
318.5 81.5 li
303.5 81.5 li
303.5 67.5 li
cp
@
312.081 72.1152 mo
311.796 72.0527 311.487 72.0215 311.155 72.0215 cv
310.237 72.0215 309.493 72.3018 308.923 72.8623 cv
308.353 73.4229 308.067 74.1309 308.067 74.9863 cv
308.067 75.8887 308.419 76.5996 309.122 77.1191 cv
309.642 77.5059 310.368 77.6992 311.302 77.6992 cv
312.341 77.6992 313.13 77.5215 313.669 77.166 cv
314.032 76.9277 314.214 76.6758 314.214 76.4102 cv
314.214 76.2461 314.154 76.1035 314.035 75.9824 cv
313.916 75.8613 313.774 75.8008 313.61 75.8008 cv
313.474 75.8008 313.321 75.876 313.153 76.0264 cv
312.985 76.1768 312.808 76.2832 312.62 76.3457 cv
312.304 76.4473 311.896 76.498 311.396 76.498 cv
310.634 76.498 310.089 76.3623 309.761 76.0908 cv
309.433 75.8193 309.269 75.4492 309.269 74.9805 cv
309.269 74.4727 309.439 74.0527 309.781 73.7207 cv
310.123 73.3887 310.577 73.2227 311.144 73.2227 cv
311.636 73.2227 312.04 73.3164 312.356 73.5039 cv
312.536 73.6094 312.649 73.7705 312.696 73.9873 cv
312.743 74.2041 312.808 74.3477 312.89 74.418 cv
313.003 74.5117 313.142 74.5586 313.306 74.5586 cv
313.485 74.5586 313.631 74.498 313.742 74.377 cv
313.854 74.2559 313.909 74.0508 313.909 73.7617 cv
313.909 72.9883 li
313.909 72.7031 313.854 72.499 313.742 72.376 cv
313.631 72.2529 313.489 72.1914 313.317 72.1914 cv
313.165 72.1914 313.017 72.2598 312.872 72.3965 cv
312.63 72.2715 312.366 72.1777 312.081 72.1152 cv
312.081 72.1152 li
cp
f
372.5 67.5 mo
429.5 67.5 li
429.5 81.5 li
372.5 81.5 li
372.5 67.5 li
cp
@
402.368 76.0029 mo
402.001 76.3291 401.548 76.4922 401.009 76.4922 cv
400.474 76.4922 400.022 76.3291 399.655 76.0029 cv
399.288 75.6768 399.104 75.3262 399.104 74.9512 cv
399.104 74.4941 399.286 74.0918 399.649 73.7441 cv
400.013 73.3965 400.466 73.2227 401.009 73.2227 cv
401.626 73.2227 402.124 73.4414 402.503 73.8789 cv
402.78 74.2031 402.919 74.5586 402.919 74.9453 cv
402.919 75.3242 402.735 75.6768 402.368 76.0029 cv
402.368 76.0029 li
cp
403.733 73.5244 mo
403.476 73.0654 403.094 72.7002 402.588 72.4287 cv
402.082 72.1572 401.556 72.0215 401.009 72.0215 cv
400.466 72.0215 399.945 72.1543 399.447 72.4199 cv
398.949 72.6855 398.567 73.0498 398.302 73.5127 cv
398.036 73.9756 397.903 74.4473 397.903 74.9277 cv
397.903 75.4004 398.034 75.8535 398.296 76.2871 cv
398.558 76.7207 398.938 77.0635 399.438 77.3154 cv
399.938 77.5674 400.462 77.6934 401.009 77.6934 cv
401.56 77.6934 402.088 77.5654 402.594 77.3096 cv
403.1 77.0537 403.48 76.71 403.736 76.2783 cv
403.992 75.8467 404.12 75.4004 404.12 74.9395 cv
404.12 74.4551 403.991 73.9834 403.733 73.5244 cv
403.733 73.5244 li
cp
f
357.5 67.5 mo
372.5 67.5 li
372.5 81.5 li
357.5 81.5 li
357.5 67.5 li
cp
@
366.081 72.1152 mo
365.796 72.0527 365.487 72.0215 365.155 72.0215 cv
364.237 72.0215 363.493 72.3018 362.923 72.8623 cv
362.353 73.4229 362.067 74.1309 362.067 74.9863 cv
362.067 75.8887 362.419 76.5996 363.122 77.1191 cv
363.642 77.5059 364.368 77.6992 365.302 77.6992 cv
366.341 77.6992 367.13 77.5215 367.669 77.166 cv
368.032 76.9277 368.214 76.6758 368.214 76.4102 cv
368.214 76.2461 368.154 76.1035 368.035 75.9824 cv
367.916 75.8613 367.774 75.8008 367.61 75.8008 cv
367.474 75.8008 367.321 75.876 367.153 76.0264 cv
366.985 76.1768 366.808 76.2832 366.62 76.3457 cv
366.304 76.4473 365.896 76.498 365.396 76.498 cv
364.634 76.498 364.089 76.3623 363.761 76.0908 cv
363.433 75.8193 363.269 75.4492 363.269 74.9805 cv
363.269 74.4727 363.439 74.0527 363.781 73.7207 cv
364.123 73.3887 364.577 73.2227 365.144 73.2227 cv
365.636 73.2227 366.04 73.3164 366.356 73.5039 cv
366.536 73.6094 366.649 73.7705 366.696 73.9873 cv
366.743 74.2041 366.808 74.3477 366.89 74.418 cv
367.003 74.5117 367.142 74.5586 367.306 74.5586 cv
367.485 74.5586 367.631 74.498 367.742 74.377 cv
367.854 74.2559 367.909 74.0508 367.909 73.7617 cv
367.909 72.9883 li
367.909 72.7031 367.854 72.499 367.742 72.376 cv
367.631 72.2529 367.489 72.1914 367.317 72.1914 cv
367.165 72.1914 367.017 72.2598 366.872 72.3965 cv
366.63 72.2715 366.366 72.1777 366.081 72.1152 cv
366.081 72.1152 li
cp
f
444.5 67.5 mo
501.5 67.5 li
501.5 81.5 li
444.5 81.5 li
444.5 67.5 li
cp
@
474.368 76.0029 mo
474.001 76.3291 473.548 76.4922 473.009 76.4922 cv
472.474 76.4922 472.022 76.3291 471.655 76.0029 cv
471.288 75.6768 471.104 75.3262 471.104 74.9512 cv
471.104 74.4941 471.286 74.0918 471.649 73.7441 cv
472.013 73.3965 472.466 73.2227 473.009 73.2227 cv
473.626 73.2227 474.124 73.4414 474.503 73.8789 cv
474.78 74.2031 474.919 74.5586 474.919 74.9453 cv
474.919 75.3242 474.735 75.6768 474.368 76.0029 cv
474.368 76.0029 li
cp
475.733 73.5244 mo
475.476 73.0654 475.094 72.7002 474.588 72.4287 cv
474.082 72.1572 473.556 72.0215 473.009 72.0215 cv
472.466 72.0215 471.945 72.1543 471.447 72.4199 cv
470.949 72.6855 470.567 73.0498 470.302 73.5127 cv
470.036 73.9756 469.903 74.4473 469.903 74.9277 cv
469.903 75.4004 470.034 75.8535 470.296 76.2871 cv
470.558 76.7207 470.938 77.0635 471.438 77.3154 cv
471.938 77.5674 472.462 77.6934 473.009 77.6934 cv
473.56 77.6934 474.088 77.5654 474.594 77.3096 cv
475.1 77.0537 475.48 76.71 475.736 76.2783 cv
475.992 75.8467 476.12 75.4004 476.12 74.9395 cv
476.12 74.4551 475.991 73.9834 475.733 73.5244 cv
475.733 73.5244 li
cp
f
429.5 67.5 mo
444.5 67.5 li
444.5 81.5 li
429.5 81.5 li
429.5 67.5 li
cp
@
438.081 72.1152 mo
437.796 72.0527 437.487 72.0215 437.155 72.0215 cv
436.237 72.0215 435.493 72.3018 434.923 72.8623 cv
434.353 73.4229 434.067 74.1309 434.067 74.9863 cv
434.067 75.8887 434.419 76.5996 435.122 77.1191 cv
435.642 77.5059 436.368 77.6992 437.302 77.6992 cv
438.341 77.6992 439.13 77.5215 439.669 77.166 cv
440.032 76.9277 440.214 76.6758 440.214 76.4102 cv
440.214 76.2461 440.154 76.1035 440.035 75.9824 cv
439.916 75.8613 439.774 75.8008 439.61 75.8008 cv
439.474 75.8008 439.321 75.876 439.153 76.0264 cv
438.985 76.1768 438.808 76.2832 438.62 76.3457 cv
438.304 76.4473 437.896 76.498 437.396 76.498 cv
436.634 76.498 436.089 76.3623 435.761 76.0908 cv
435.433 75.8193 435.269 75.4492 435.269 74.9805 cv
435.269 74.4727 435.439 74.0527 435.781 73.7207 cv
436.123 73.3887 436.577 73.2227 437.144 73.2227 cv
437.636 73.2227 438.04 73.3164 438.356 73.5039 cv
438.536 73.6094 438.649 73.7705 438.696 73.9873 cv
438.743 74.2041 438.808 74.3477 438.89 74.418 cv
439.003 74.5117 439.142 74.5586 439.306 74.5586 cv
439.485 74.5586 439.631 74.498 439.742 74.377 cv
439.854 74.2559 439.909 74.0508 439.909 73.7617 cv
439.909 72.9883 li
439.909 72.7031 439.854 72.499 439.742 72.376 cv
439.631 72.2529 439.489 72.1914 439.317 72.1914 cv
439.165 72.1914 439.017 72.2598 438.872 72.3965 cv
438.63 72.2715 438.366 72.1777 438.081 72.1152 cv
438.081 72.1152 li
cp
f
228.603 19.8906 mo
197.078 59.3726 li
@
192.086 65.6245 mo
199.423 61.2446 li
194.734 57.501 li
192.086 65.6245 li
cp
f
0 lc
0 lj
192.086 65.6245 mo
199.423 61.2446 li
194.734 57.501 li
192.086 65.6245 li
cp
@
1 lc
1 lj
306.071 19.998 mo
309.431 57.1421 li
@
310.15 65.1099 mo
312.418 56.8721 li
306.442 57.4126 li
310.15 65.1099 li
cp
f
0 lc
0 lj
310.15 65.1099 mo
312.418 56.8721 li
306.442 57.4126 li
310.15 65.1099 li
cp
@
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 14.0%%AI8_CreatorVersion: 14.0.0%%For: (Alex Bowe) ()%%Title: (classoffsets.eps)%%CreationDate: 30/10/10 9:49 PM%%Canvassize: 16383%AI9_DataStream%Gb!R&q-G#PdOtIRJFC;c*!V&Oo)N2'1XBJ:,fCN)*/mU.Zh@_o+6V@=W[)^[lG;jrT=*Q0laMgYXk$;uQ0KftUdALbrR#q+[%951%s'Eq(<o29K]PY9+bB%]X_J\DHhGo`'Ce-rXD;0X1SmAWnd]I][j/q2'ST`_pHFLN>DRMX_`VelUeQ2[JqFmJ[o=+C)Zi.**7^H9F%bn\h(m"\3.=g,1oDq/0#f1HqmFlQojUX=HMrcidkG8BeIir[n]^aq.N,VP<4I&H&=<iu2f<'M[set;ZmaQ"m8E$+TH7D7:tFXK&o%8L6<VD@aYm0'9R)CMSZ"r]74NGU@me%)X2pHqegdr63uBrOL>CFfN,E]CgT<<Mn5oJ#da!8]D\Ecd@`blPoKLfD=6KZeDH)_bA=s%S%cf?Z4s+fps]9Zl;$1?/s73%qE/;#rNA]h?]0Si[774Km_2LMS2P,HJ*WZ^7H8k'6ZgN"2#9e9S:<B]S]b'/7r!kQo'*2FmAG7D%\\[.+1ons('dSG$P:$'.m6'!I6jhYm%qtuPhW#oD%Q^]j?12l<DZ7PqHbK*[I>'Ob0X5JtVF(a_]'^J^LK)Z?.)VRfDYQMs3rc!Y%6Um.Hc_!`niKWus8Z2+6BJ$OD\IUcm``(O-U]ca-?is#mnA!<LV_oc[me,is<c]I*Rn$mNRT;J\TET^k+]?sm2Lo:lQT)"Y8#ij\%"JW;(m8ZaP\jSr0li57Kr7qIke&Xc&KMTX>:Z$rRbtUqj:&&LmnC0;RWG0eYPmY/uhf9]-jZ)bQE?LP,5UsgR<-Y"K%r$D5deH!s%%fD#[^(74$)gjuPbtUa:\I!1lDShU^9h83^^sbopET$4V"eJdFoGq+F>$kGT=sAA%Dt<(gR4H'#Uk1M@-_u>PnWqU9cm&7<1sdHA%KQ_E3d!)0Xn-Qk&7IUUD;*NBtTgeGWm=rA@Kf25bPaf%-8-SC4:InE`!0-^`e=?)sEfkAK53\QDjg=`gm^-l=FJq4g,G'MdK2g2]%pk5/N&(4M-B=,_;0;O3nnK+Q4U$k>Fi"LQ*lY-=9-`oC*i"K!Sqr!\3,*`e`='@ePaCP?dcK0iU)6G"B3i&Ktj*[OPVmV;KdsBD^%C!OB+BF=_LdQm-.A4#V?D;&b$'\WeaOG_1>[#ad2^'gQp#$R?DE676PLN8E@5c'sn0UEM,D,>:'.9%)X\DVd-q+b]q\PC>EI"RmZ%*oUt2Fb`r/FIG:>T0B1QB[,e_Us_s6SFVEs:r.W\I`'Q.hoQW.BFRHIk>Nf+<4]WqL[k[gLGHe<HJ$E2b@*V#NAr<Em>r:"Y.VK]%>ad<o;qEo)#Ci^ReCd((TMNG>oH-b4n1X]4s5aTr9e#%.qTj<Kn*i"/kBZ^/kOGi@p2>AM4ph8;IiB@!GPIO(b8%Io-medas(u]'%hr.r=:CI/!I1CZ1T<qtiDuP[o-1*Li:!9\U)1&-bm^ZPe/^8j]ps"D/lQ5t:)t^?/RnQa%HcMlLaM5eT4+*g/AZ\<;n4dt;fsX2\%H^+pi(S2Nt5'MRt;]78PpY\'XKh)BEZ42!cl9\F(q#ESU`P59M]7k/b@XbshqBj]sHuC%kLpb3jLNS4sXNmnpRNM@mZhh2uY=EXB%bN;SLO+\Eg^`/f91>cg!PX<.T:GjGH>OG#FZ"U_1#>i!Le,&>VkDN?6hfubUL\HgHYr6N!$IW2YSo0>NiFN\&ceGUDNd:7+QKLa,%53E1ASCa.T2hMg'\!A>i^V]9^j[H(c$h*[$XG8>YX?DLEI)^K[g_/Kkc]+UblVsHHRW[JBR)/u_0O3<EK:%_hh$g*8V6[)-K1nQl%QBT<lL7drLG`Llce3;>?_S.D.<(K5lb:,8LmVe1Yp9(RF\%0.:WEB$)+5^$56Q$7kNU>\N!QTp@5,E1Umt^QNIt_fsjhTX@:Xg<(%cc!+\bCl,M3QQ?94Q'_N;PEr;I\S4:p<qjNB9`fC*UjG_Q=sT[pEq!/a;s5V?;m9tp0EC'"T"TPEOVSW_VAjPkS)*UWCEhkT]TKP%dJR,Hg8\`m>KbcQ3jlhHQUSI'>Ksq1>^=N&Not^?e2a3ZL%!H.Epb).*+L-f3G1=tR$M9"$!TuJ/Ca2PPr'.GRZd^5>*72VqGrh4%(f*aF/oS3]^4[1uNo=n+\Qi%M?\A@X^\r#$B=D)@J7e&Tc1W*d*kE?SSp&i4p+q+4I)dT;0n6i7^lH/ONnYh%UBN>4GDo>1LXYAj%H*l%7J%Y6XI^O5QlVHogHN%[b4;uQAPK2SR>&Q;`_[,51MiU?2?E,p?B2^T18A8$Kdtd!qr5o!4Is\6qX5/%/?`2E@emJ)^qd%9$%TN#,kq<MeY]mnV2c"a<5aWisiq69B*Gu>qN$M+aA))A>f?Lf&[HL%OLj@OjDq,(>qr%;aB#O1;.3Zm1Er7?,().Y6^$?BciUdFqX%N\XB"L"8hR1+6<=9;%TXhWb!jPsS@rQTuVk2s7nXD)N?ZSa-)FUD?orbk%JQqJ6_ZqYTZbh/%2j6?s1lVq"PG;/=`9rpKLFDeZ`_%2h!Vf:IGakl%HH]^V,9k4+HcuIBR.P]pB)']Eg:"+,FA?<StY[\k_n^'6)e$rbg<!\ai%erN@"9a=l[fmYFc@IPcE/BCk6Fl<?D9%T.=8*hVLh&=;!38P1*%eU'&_aiYVIK9pNA1T'Pk0VU!h`oc3].P95:<+8b-BDaO;%hT?r%n%NT5-UPL,cXH6;\M@/u9=]G<<1Ws+%7M;kW:$g'$dqZ3a`_I!N4akOZ=k,NnDWI;ea[M`nVmY=E7SjP#g*$?98?rmj-dkU\0T89\)LY#M(UEl:(n"p1&/-g3FlhonF>eUs%oA;rJi)cZXgo,DqVS@&0%Zf@?p"5$mq3c`I2-]/3!mt_Q`oBRm:8XP,8@m[B<<(id0o#U[<4/&^o;PZ,d54>,]LOpp4GAjQh_<:5%l-/<kpYi;jVn5>di<@>ofIBeI^T,NhSegPGKQJe$JnZu@PHOQDIjoSFm8c@PA")f=C],[iB6_SpJ$rXD%:&2J1UN,I#;LaiYn?rh%-`.q`pQ*B%4d?\Kg>Ahm2X=KK^Mg=TD]7htIq9\dORsW\BP:`>UYBS!rNhsZ5:;5Eh's730^"QAQ;nq)j5Ya@jhI`Ds*kl^h-^3Y%0:n1'iF1)M2JW9HFg4FXT@^-gjAs"E)p^0?``8,kT2iW/`:Rin^D]n]QRj^t$3/Z_dB-c(Re1fik5>0R2[-[rokDO_1[1$O\g9ag%Cp_qGc$4(!L]MHss4*l+W3Wc[qTaT,A<0p^UA`K=eT"gQ5<dhc3U*0=_HX]TI3Q\WW:fXMXN.4dk&&0`>s`"Jq<k3\eG+:3LH>s]%rH6e.eB"+A\+MmicNcWC>^jc#SUC**rj5VmepI3(@l^u7g8n0;H[`]_krlJUSYpiE2F?R!r*rS!^.FqYF`f6%\mD;glFp=+%r6ZY%1l\D\\+)[6:K,`PH@_k>+2.E0?N.UkmF=:Xs$=\ics3H3%*S.'lX:'!m[I1SEo45ENkP<F,"NS"*UFMOIcmn\rbMJi^&7S&UK;k[%1`JTTjg?5SBFc.b>L+DAkBd-7r=2IHo.fN/j+UL&%An"oQ6iM4LJhC61JdJ!''fXTGJSY!8Zd73^"j'r7nIXLmV<r?l[/I#O'Xp3%ZFZ29q"%g?-_f40]R;W;@5mJ.*0f+W]85'#p$+SPlsKFA)P,:Hr'.k_G82jq0)=N'#63uP_:Mh;NVs1h,&:%P*YcGjlBn.\<0qgR%B!q;5[<iLm=mTrVs!nq-n%@E0J(6XLi0*H(^JJ](h?bP0Yl1'4dPG<72o8V[NV5lGfkAq-4X+"];KdDXp+)c#FA7i[0m*_JFlBNM%X[`NkZ.c:fC0[%g<f-<Bcss9FH^0Y(PI'GPhW^2lPGbJn>8lcsp$PJFJZ_S>LF^8iK;>O@l=?:6d1MY4ppJYT]okjKOl#4&B*mj#%CNlB8:XO`X0-@ZMK08:t.u/1oq>J!*U(.?0f$uTQe5=L*O<9inC-'24odh=:Q"\IhCt4#tIX]F(rghs3OFbl;:)3'kiT-cQ'i@nE%P+5(E8/ut1&P`_8ZKZN/h0tUS(<s):.D:kQdjipo.^_@aV:<Yo1k,hL,!K#9<c-E5?@C<$Pu;Zso\Q\JSLc3H9s)r?@jt!u,Ems<%*24)?r:X=Z_D4fW1h:.e)([L:NMst[.fX8V8l&0\94H@l59>*Nbd`hIV.T\0H8B+HF\@c)(n)o(m?UrKk@uu',UBCt><R)]Vke%l%TU2^lb4-KJdWJos:\@IG<:mGp5gd%*?'`X@A'4`DHV%,IEBG@X@*2$C3(_JGYI46Qkb^0W'0L[O@YcM;V[q_2;hqU;UK,L5&2877%e`*Gt3!VlMp!^dc2aMH->a@!7q<RleI^;a\R&Bl\bf07sl2>Gt0-e/",b+O'qcAC\/L.tX1ABB>Tfk%[@]/>DDDpf?",1?6>Z85I%-D+,]b,BM>0b[l'l,,^-o$7+GE3@m:>cIIqbaHpt$f97DUcGUZ!Gk.qr9@idg#H8ZG2;eTST#)1[.k4QUnrNj^2mraf<9)*f.Yg8%Ot=IKQk,hSh8XM/0W3qV%ME7&4u,>f>)ntH&E2,\ea?qBpJt#93KTK&ksWe-fEn)3?Xfo)!-+f6'iG6joHQaqVGE*::'9K*q\2g=%rZWiaV;:qh-6<JmhV6k@PZNGO6#,&R^A#)p=Lo1S!GC/5$e?`3N?:2EirBF51WqkUbBf.Sd/PC:hB%BHA4Qf]OKH@oWkX_udV/SO%R=-bl8(`aJch%4!pfQp*;j\NX0k<*IqB85c5Xf3SgQ;p#I]5ani?TbjOBK-F)%m1^cB))*Fb\CTX^b'ZWJr"U3^J98n2"Vi;u?'t%o;g\>)sh7']n$CPVMbV_\EZ61S2.JT6`-V.,XeML.A*rF0!N'gjpKL[P*O$D*+JA#`fN%:A#CD`1GPufm3\0Y`X2<(eDC1"e!FL[%G41.>%nhKN$?iYUoAk1I`MtGD,hkMraIf8Q3fO"5*]X#C%<3Q&+ge%E?N\:XJ]2%A!Y_TfMg/q\;]AS6"I20KfJDIpfM"RWOK/33%GUN)].tulBX@)JOVd"p7FKuY)SRpKj1Ohc*S(t"?m75gk);h9t/!M*?h(@:BOj;BD-X`tqqS2T\(AbLJ0'2\'4Ji\&g/s=K:Nf.G%2SkB]akURmU)V@bQ.Aes<;DFJ\Mb_K-+^3llCC]C$&f5HkYD(YMOopbg@V4/i!o#nL6p6fXM32V"dICPGsE#j1Ei2FG#4(/U<,/H%M^BO1>P,&slk1T5UA@siL`hW\C#uog3gQL4,2@MqDZtj#kn[,EO$CgQJM'hcnZ6)6md5;n<ZQo8jB>fnJ%EVLX2hMH/fkacX"QUL%^)>LgZUHZpE#*i=#>=4EfA=Nu07W/-pXAqYFmGB;]+R4`MTb2.bJ^Km]0*>pSj(I8-Aj=W?RBBG^\JQ70+IL9kHE<%nRM)u@fGS'%CLTRk1:6WCm0jbK:Me=J=^@eL6n5\=C9=**>VS0"drW5`Dr88[r2d9]CK#QeT5(tKp!$a8dofh&>b?L1hHrA6].;b+Qg7PGrQVq-%mbE<@[_>aZ^K-ZPQYZHQ]%^\jQr@Y:c%W]L;Vn+2e6L_#P'Q7e&WT9m*HjN8V=%D_aS_W1[Ou5L_O>V\9(0ptd=2%q4akndjHD:P%c?HDfL#hWL'N]H)5%DL8?aa96jfZ(&H%2-/PFjp2o(MI:>j-V!qpG@FI%`Xi%sr<b7k(mn+&g48\Um^q=K'\.fI=`TqIO-5e("hs%pd.dLHY_&3S-o_L'uFFle+6';$&.(d1Y(aEmJ'#MgDd8hboOb=3a$`KEePt:I.fP&X]jiPoi=DQcDSPD`VOmYTg,rU:Z!eB6:kC7%@WrU=VY;-)2mEe*s'9bLTr6Ag$@C$o?LnI2-*m<U/beK]OlYuNr\5*K)su2(S[EjP=X8])m>*1hpej[7e8CjOp;0-`8Z'I-4$PnF%XqD)De=>*sA&];<?2ndh'tR$tf"Sb5a1(`bj@jdOrS35[[.Efd0?h_ChL1G8<3,fK.q,-I'Y.;C0!76.nV(/UhmLW$h=K9b:0+r!%L"GnG79lOsK!mK8ELbBVkL4POH0llNV%_rcp\f1@$D!*ZpT--ZlE3i$O[@mu>X<5mTt><f$GB`4;$qFu%UZDQU"f=F're%ef!N?,%D*+oI>bO6iqkrboIQDPS=LHMN\P=BSd'_J\c1Q`Vmq/tc`Hi=."W:5UI'@R>n5Q%K`>3diYe$'$kjeW>r^L.dT_Y_%:$l]l`f"Et%jPd"tMs&,.0=K6.6bT$mkiGQbVhp,i$8HB\d&u6M[=gkJB<Qbhs'1U:oQp1M0!8$FPG-WaL\9MH!e]qnmJG#Wg%[mp:S*'nCjh_0%/bFCnFG>Ldr"<l4gM-3L9i@Z"mG[EXQhWmCen.!fleP:3:f7W9]D[)m8RSd34)o\M*R[9TPJ%u^d&_CSY4!niZksZ;-_H]:Iseml%OAYiGH+B]Yp#k-+'J&h+T2T?jce?dONJ/;".l4eXTqtNYH2eNl\e#WL8mr(dYV^A"af1@gf=DPoGi/4/TrU!(o*Tglegi,s[*\9T%`I3TVZ^8Y-h;s&_$7WD'<J?e9Jp[:g2^u-)Tbc?rXNn+<(XG]o96W$J$D5(@U#tY%i?8sDV9lZ"]'J(2GGe99(1H^;s*=14GIC!K%2'UbbZi8Ug//HG_nP;)+U6BLK&+B7&T79ff^1_lf`EpF1knUnc4oH)hPk74PI\O&$[09@d1sGAtbAf%23]rIZc/e<94.j[TT!g]J%anK(FGoH>SDQi6f/)T.W\+`'^XIWU7T-ZVe/KO3FJ*P$<4j^q+$AZTprK6U)GrT,7q3Xp%HLU6BdCi_>IHhi&e+l[Pbf=\h:n%gg%EZt;/q0Z>YgKmHrqISf(o?6fqnhf:WiPs[G<2[!`nFl;J_l!%u55sfoHKFnlX>q7"o_=s#aM5=tgVnj/2o"7oDV7R*qY$i#n65SG%TAG#]Fj@#qo\C@EI@n+ZUc\GH_k/H^%qD23DiEf"H+/sTZ22^bV)NZtO+7%npAJS!pYKHIe&(e2e()[\nS6k.:1sC]/6=OWc=U\H%Gq&UFf[r8GgN\@K&LGq0IsC9SI%T8QIJWJTEFuBCA`>($NGsh=?_3fm]:Q'XDm-h"IX)G8h`E<e'n:Gm2ek!_pZLdQ!6s:YBI4p]%M7J6bI:@Zkr-DiOl3G.j%o6O[B's7qi7f^=ccq<#K*Pinh7U>k[?]kI/#ge4)O;2*>X%^^dfb]fHm%'-Pk=97;!b*#A,1,1=Ep%a%"R_Lc^"Jf1VO('p(tb6kMc9,f-PP#0rYl#&O&P5Fik-o[CX(]`(HP^pZ&i(d<nVFe&dibF&X:d#QQF"QV*]*MU_LBr@4)l&ZdZGo%$8oZ2&;p.(5Q,RcmWkKf9priT`Bp\b.?V;VCZe$X:S0k$$4A/V/2])A_dX>bK=&>4(M_d_-5S^GH.Jcg.2Rop+e__a-4+j?9IdE<%==@;345+.Q>L=Wd//7H5b9Zf,LP8Xl6>l,GB;J]&H"(PsnbA)d`::lHVK=2XlH7aT83(t$4HUdmkMtO/+D;-rF.b+7m]S*-Qb5IG%;qu&1O/_c8Djt/7m3,t!B7gf2F)k$#Ho0/5<].^AKDm%0Q.GlD31`l0'D4>5\&mo@4l7@s?#6^WcTHVU]gegmNUf_jWrO66Jcb'K%2]))ZOS[aLl#RfY/!.iJ=bLO.AS&IrHk=O>g=si6,pY\Qr.cY.bmf%:UrqE*>q"V9#_N7:=NsTm(2O^e*mIuAJHF_Q/l0U8cS0Eg%b[GcV?BQhh<@XhEWSI9U30,/GT@@5#\V-\D&ecfS[sn,"TBZ,j/n4C=p9!TbLN2_)'uUmI8+gIEXp;lD1KUco*qej6q'.4>J;6D0%U+IXu?(+E!<qcOI\S.,6%)f63bc[+_4]f]ImNJpD?djLBZ:\.G<rp?0a_L.lWTi5i31n.`E[]$SF8iG6cM(Q^ZP:r245Wq9ch@>"%]3%>FH<Kq%$@R9]a0r_\]t4qg@E(*BkMS-Pb$mm&pAIQ9[6CPDkMbGrFLjqd[g`W>+AQc$O36.oVO:@U#DWC=9qK<PX7&:GBD#mu%L6=$\eZ04I@B2d6P?Kj@)-[iZ7W7JIj_:GbK+^#bpAJ#`dP/KkPiQ)MT9_[a[^t*c.m*KTO=c#JGrWhA>+GDS1eXGE68L8cE\SlH%c-fmPbi5rQUJCBrXumV>FkftE&-$/WGNkk4-+R1c&gd23r:W8O@""l\il0p)S;cc/Ya"2YKb($ad>8kg)qE%T4]+,[0C@c);D49q%`BOYd1]A41hu*HJ7a>qr`)pG_QUkm`/$IgAdO!uAb>,(?c)Q)5^`GS.Xs?\7rG4qp(8#b\XX[";\\`mqqs&S<DEYt"I8]m]M0*>q%qoX>fjA2YsQ!o(rQuo.:QVU1Q>%;&,CC_b\FA0e?Hq^Hlr)+(!1[24>?RM5@9J4G^AG.ich+k.TY)kNII^gW)?IG9%AsO_6K/YQm%lGgUo=jrDP0j17\bVA85@Y/3.gtXO'^i^HJb4acEEEH<7o0[qP.t'70@*lpZZ00q2o/]s/(teAe_QJd77i7N;]>jT+NIq7^10r.a%p1/*L&FtQ!n\Mc"*VL*%0\\A"SXn6=XDW]E[]FR<V3!N?13?G5`)A-P/Z%+"o[<kE.\bX_6h-u0Yicb[(n"K(Za!HY`m',n(ac.R%RXpB$g-bFP&JrR87G%7W<c>2D&tBkeFG4pO!;2I.5R7df9WV-p0MnU#;uhK.#t+.ThO"uWC#A)>nU=sE<Ys)BdTN0baRlT@BIdWa%B1S?$kj(%=G@1"4#Se5=[t;5Cc7eFrc6Q*_HVaO8:Yo]FcWpJkh!/GkieampTd4$34T_tH7@!Ca\YfjTcsuqO7g@K!hn-8!%e(_S%8X_;`fZ@(V[7Ra_,9@J=C(VEhrBP?,QgB07^N2sfgeC,@R*"XM!6lTM$116[jWWCuDu3_Oqg+e`,krXj2JE+8K9%Y:a%L&?q1#KI%N(IOfQL`B?`!;IdY9D[mo%1sG/EfgMdib..YVfRI:$Dc1Pa7`0.qC?2=W]2dI2\8mg`E6`8R@VGB*h5DHU!Ui5uYd4"&4H,B4Dc3%#O39gKUa]e:#Js]?9,)Gg0D<BQl-g,9:,8QA^VMi!PBM9;O$up36%aU$Zj^p0#<hWm^Rno6\-g^m4imdS"2"Nq_q'HDD'AX?2CL`%-(-1?Ok1trq7`N/3O1-'eR&KJQ*ZDc.V%`B<ldrR<@;^Z*aALY;-'sR;PlQbNN[gq16<KK2W:)ajtlQ6`*D_1T=pn]#K^VoGu)6Q%0q$-6KEFrCdeY*3a;6EC;?C]?.h&qJX@tT@4'nS_8W,dSCOA]C`6HnmX;&n)>TjTL#9%G37\a6!Y0iCp,\1_M6)/R0e^`sO(48ef%abr?1Y0=D-"IU.&>=t@f,$[g%3qb5e1tiLNs)N(<(?`<FHq)_$QfD4q`I&^>Qd40hHLJ.uifd%-Cn4*;[\P2nBPH]bhF7ff93.<l%!e=A7PYGFd2a1d)F*2Ph#c+d[acl.O;mLrZIP<WP1)iX'in.%+Za]CUms\(<o<7CC<j"-^JHB$cMV0g[hgABjDP5^F[d\Z6h?&8=%`*.c?Q1r#g,`eH`P<="G!Ab\Al^'LGc84@34<%Uf@c'gFHN+65_U/o:+KRa?=J3_2c\<^O/FYB6/sMG$a_YL[b9lJIqUF`8f_+/T%Xk6eCH5-6_b(\)o,L']LEV=fc0"F=+Hnrs$l#S$"0\+8iA!GYCR1!Frpj>%;Z;Mln?\[9p"KfFqRg[-E;VXALDSo#P"\?=U,f3E8%PrL8B4Ve#5qH/t"/7#EB8S4@pA-P\nA7bN,.\u?5R:E?cet/\k1(b,SA/scHX/BJVJ:FZtHC^_jqerB2Wt[chW?c*n?HU2cMOBcJ%';qZpIraPeo[lk=BaHlQP4AOR\sGU;Po0cB6/ihBYNa[fl^#"SP1:XsC(^;RT[b"&XI!(Gqf46G5<3Fh5jh4*A81pXC1[c!`b)3?%ZMBeW"RJrr1/Z=nWAM)'b2<V=AEEt$%0jBm4Jk72CmLL\.<f8#jnApH`Z7f*GRG%%&TkS#G[fmb,Np<`6USl?V+8m0oK%:,?$ZWZ%>.!310m)XlFE4bHn1f%L&TkS#G[fmb,NtA*_4bB&dNdsrL%3+.V+8nkmZ'$?d&!YXkbg/Rd%s7ZM-d\h@d)5bka4Na5DDqiOIR;!%p)[j`Vs]+3NW`P_1Jj@"4M@Yb48h'T00d`mLmJaU^(GS?Spp+6,;d$1Qgj6]OM0_sCOE&/aZI`Oi_q\V-G%ZB/n6S;0nU-.?K4]#%CjtI=T`s18E\;_99)Zb&Au7):3W6"C*;S7-%@0ngBZM0<7gBHkbGK&mkCm=rmHkcBJ80V:+EZrtD$Kg@4eB&A\p#thQtW_$V4-hg%Y+*/ADXpQD_&S)TIMp[Gb_+a2QYf]de2Q#sW3%2J[Npf'=k=C^BjV\Y=U!1]FP\)n1O0?D_5o^eH,ZYT@.K]+a,E'[3dHq'`BaL;%3U$si8;C4YK1lLW0kG?P=[O&'A,AmR>..h"WNNT,Nl,>U:%GY)(I0h4MUebo*7u>L"bq@=''$dqHKjS1+E;en7i,^mBD8cs\AMG(%Etpa<P!d]!HE6oL<D#!Bj#lh,;TX:DK<EDIJ,WE^4n&Qln[6fk)Yc-S*+.TjQt0We@X)$f(Tm3u<k.^_*18QQB(E#Y,00-KTU(-g%QFmneE$Lc?)jY!>j4EZd2ELM3\r&X/,_1-rm2Nj^L3fTO1*p7%eJ:^oKF0(]o'rbU5Pg?,hWe&E&<k9=p*-Zq'X3pC7YJ$d48F/d%/0G?O(:At^2=0Q1Sqs(\6hX>uAL&/b,_ro&+8c#iOhAW2Lj^I'KQ@n)Yp7M6fhF^%,WP0:RiQ3jmlm%J4*%N3<%O"G8r`N&OZom5%g_LL#`%@h8!4`rKP8k/Lf)nCnA#)_NXDWs3*_YQmD^Odh9b4S"cLn/9<^*L`33ihZ#eNbScn@.,Yt@VN15)tCjH3$5Ou_/GQ53nq%bp1\UGC#":\<JJBB6UHBqd%/c@nujgI5"qBO3FVQ0KJt^[J^LTR:)#X%r?LF+2oHLh_h&K9TS&;(lqA#]-DY>g>F$?QtSecc`e@A%`P.3tU^e352i'sN_9WXNl*o,*@rMq:NKZqsZgEoXqhPBD0:ko1h`%.G=FNIO7nhq-V4PD2+:HPh?FYXX3-DH>EB@gp)*(>,g@FUg%S)fh0jo$=NeqLisA'3AVUhISnEHQp$AW5H=HB<9a?@#j^36.jb$MWF#K#)TOLK'+nS8G;J.J_H"Z>H/ZB$tm6d>9L-pO(;,`5C"$%0R_a9,KI\2F8jhMnSn$1TZ8&`2pr2dbjfY#G,UEM*Y*>`a<Ror4C%60TS`OJLQ.'fG=1o^^[]=]`LK!sR>j3J0#K+=@u,mRqF02f%2s,@p(bCuWX95&Y@2J-lGd0lP!+k"#W>mX_Cg1N)',fIL1#1Er*'LqUPYfAjOF?^lgDQN,Kbs;W_"/\V$1'CjB@IcFRS+>Ra7"TJ%YL+t$*Fe;_B/]H^LLJD)*e^bo#NA:,0Y%'/5143t&Q'phgunr*cg3-,j<Wro`*p0(Ilg%XWFCi#IZInShS,'41gnNTD&?kPYF*WA%_beR2%)NV&\tSpFYG]F5VNn[9)D[M;R-Af5R[@+9Zpn_;;=S&qXfj1E#,m63eE_*BUu)+h@mhfgCjZhopOC0oOfD42j+p7.:*.ZX%kE7D@Q/j`ahA"tg17]oC[l1M\C!_[cm)MALO>q\r*tFBs6W46GA-=:F/C)I0L>h,cT8q"Tf4(FmM0a!>Tl=D#p"e"?2fa^N\>4Qk%D^aC3I`os/E.d,l@70"<1Pd)5s,g-f=KfTo6fF4+@i=eSR6S$V!p0@@Pe\YlK>_.F_Q3C_mFVnJK7GcG5#+=h0S9HF16W4m+2N\W%m)k(l&%8tj8#(!gb*eQ7;RS2CP[D@!-^Ko=\65e/7Yq\hUG:4"o)P?/>N923R@AYM6)OPFm[(QYX`AQh<pjfEDKgO\5:h<?HI[(j%c&M;np"$&;rl*H'n`&kTqe+;"hf_adb3@0nc$e]qQsQ39U,F1+HNeoi<D9XOnZ!Fa"T^]pP/r:35$d!9MXDuD"DhXhoBnLcf^1"?%l3qRmdo.IWn65446CgnkWV6(^@(/<3G40$`Tl@,W@\Ib?p2a+_euTj"VZaW&g4iG&*!1jr9a?BP_/=3XAhtmQcC.IaYa_^n98S@;%Q%L`f$&-6EHj/h\lXs,"gI#/KgQ[n,kg%kZDdf?%qtLLGNMC5dU$!lk4[-AJ/<oA'mHr)SgoFBG^]OLph.HC9[p74CcJ6p6FEG0o%.CGdhMsD7$/2"AXgYpXRg3d\8L1lC+VILt&c*TY.ICJ"3(+`mp4Y*]JD.VAXPV'7T=ZKJlPY8d>NtRN?\Os$SAtT$tl2*REoK'FM%jPoTiM`k!MUmpELoYO$,4W?F#ZCNLZIEiFkp[t@h,1gI7hj?$Y95ItP]l+e_lLq>Xhn'(J1HiWV9'In7iU;iN5$ltAcHD:'m[EME%\pg7-_5$7Lotq1R9c&Qe68.-(U?UZHl/L$E)'t_(c6jGb?:KmNMi4DN+nBW'AaI@+p-V@!.;VjkX2boK(RJ.Z'1)n`VMbQLfk0;2%U?U[gBnX$;9[Rs%Z#n.2a;CZ9iqt@u\T$SbVMk&RLZikcd<$i#>`CJ,/hWGbhE*cYBY(]F)gd(9d<'A.;GT1l4dn"+s)NgEbgR!J%FE.6q],PL\BY%kXII@jk,+:.;[N&p:h*;r!3gq[i'qD*YmV'1?3Astr>o^`(NBN^_/d%'7*c!T<>R%aD8(5GZQ:1G^NuUk1(JC[#%f?pAXikiasQ'$&Se&B;SWUn<sd<'BPOD`5[9/Kq/8?O[8e&B;SV;0*M3WNEUg$0[[<:1QLmUK^:$kSn)p`=K88%-42bh@YP(ZW65%0!7gGf#:J[eYQFcg%a(kAm7ht""pQmid2OOMejTAeI)Hn&u2&Y.i#0a-<6/lG.E1b.BZ9bGK4$EGl"LhMVC[aVI<Bt<6mUOV+<3V%&]Lh7^[93C6Hh@R'[N:'M^;_P2aGSjr&&]h3EOm-o"hN?9@bfo):jSL??;GGad"H>0%66Hl2-[t7<]t7B`E^(Ct.C/%+j9GnL3f9%Ibdeo7ks,"].C3ZRq^L0n^t<:p&QOeL!8)jihs:E%s6+Iqn^qE/63S51'PGdhkEN-[Q$'`/C42ZVS*g75(gPDnUYe1Xt/]hT*K0s%rtkh%qX4=,AVr08hSbO6.Ld6TN+E[U6)*[@Q/jJTCnZlJ`Y4oW,u/RPB1!uIpHZ5lBo!-3eD3q;j4b#c1!\TO(E%Eap"@uFqNc9n%one'd*I0(:F%JJ(4BE@NTAcY0#pj"DUQ.U`7FBp_Oi%'@G%#"]")ChQ?rmGGK-Q8-On83j3IR4=IOZIN[b2V@_Fq?5+Yt@lc>[4[%8n@&PqOGFF%/7H4(_L/Xc)Nk(#u/+/W=KV;gd?KMOQi?W;r6/E0SHuWC_<.<mDM8E6,nBJ2:Fu]r?EDNk!h3U2P[/a&%,T#q$\%b%R;e3ejG;f(>G^2?38d4faoG!DA/K9>(Mp:c80GhBT>$F:)2I0A2r',WQ19(R%5eP=2r"jlDtP53gne-5GfSW"+s4:OA%F+mcg]&(%;r1X9P*57C)n8nQ7sdbcP-S=L3UdK%II;HQO8?*Whf+qT<--]f17#^.[Tt*q]k.eVX\M(PM1s2c&$2m.5/t/B14W1Mno5(h[J,11%U>#o9kDJCXW&H6pN!PTm(]nIr(V\9G*K0U:-i%",EGLPQ-=gR&e+Gurm4fj^?!\9E3P,hY$u\W/CC0aL,p+Z_R/n1WQl\9qerj[N%^0s]tLp1^"?0IVCi-mKQAh7@ihILY*B*i$nkU>)3G[(Q+Slp]5Jie[]MMlHG.TnJ:A/NaNe5FjOVG)a'AnaOc%&&p1;P1KFULAD:%BGfaCMa:iX2f;q7:MP\KZ_!c8Ser'j#8UlVZ(W.9mq<]hJIG]#3[]]f@3YS-qCXCrhCU_`FcVShSFSF(4nmQA\#C`K.8eE*0s9L!%e]O/4Kt-\uQs"jDdok3/1dpfuWdC3cCjiA>Ibjk/h-!t>Fh[9^DNnn*RiCGkfZ&4,c6o2M;m%25/h-P!?+r8dio8p;"UIl89=a9S%D"1I=,q0n<\5YO]$Gs,VjpGHBg7h?."1FA&s14DZVfH7?>35(i=^7Z2!kj@`N"T%srL%iRh1@9o.S#><\r4P1i4Df=]!H9\%[Rf;%s!D@k6dn(<5P<YO4Mig`n<]t1iQaG0$r=E>:N#E&>3+S1+o,NrfY@.3YDIs^5-2L],o'UE/!SrgjrL)M,ViKV5/,cC.+I":/h^03%4i9U?)>OpU9i_;m`e#l\,J>1kDCI:\gM>'W^-Bi+UG[Bje$3WXd"sJ<q7s+[1a@3/V>?&#ib#g0D3ID7\t!f!g#mP0rF9P_oA,_F%Y$bf0O<fT,rQ/4h)?GsuWI_Lp,R$)W*ZNSZWk5CONE*7p2M3CAFB[LPQD*X(DJ$H6)Jj1h8cY6)o&T:;C&N3gZ@/sFjJf6ekHK;[%[KbEjfrn#RBZ?!tbY6?s9+1^?Bq^(!Ic:CK9?KH#2-QX9hH3odQ.hA>le?^D^<H@CY&*Cga*-%qb7l$LSf9VS;rb<[pW!u-oOE4V%X$!1lpS7W+IVb)(gd]`TED+jbSngKbB3F%P\il'@BH[R6CV3bVe,l$an']A<+&b(W4;r&oC:60KR,6u,)WoHB(`,Zei""&r%'ClD%RA6eh=g"rlR!"X@fN"Hb%QThuXULd0+`/@Sl$quMC6'VanY_qBa`4OM19]=0cBQP(A3\Rb%`7'C36%tjnKrNkH'P,o0@S,;`,cDD%=Q<kU,5[To#R-IcI;C=0Em@[*.,[Yp-cK4^04-;i9c1$*b.Kr:B&sHoP+uek1@';_miWV9HbWAM7N1=JQoRp%=c&P8_M+c9@5qSJ%M#tm>"/tYO*[3j#"8(ZPC*[B<2s`M&$m>3An54^Ns!>Va$9M4BL]U82iJ=Rn%2f>JLe8l.N:)<mlCh'me>"!&2@<:GP*?g!8;pOm%4%?bX:Vb%=6ieW98bSDtl]nh@O]Ep^e%h=@%<NiLd$O=F[q5N90'/#_.ZFC*^A^'sNT3o#MNOgW_l(FGq/@X"YT*(d\<JYl$TJ&X%q,6ZO*o!N==mrO6iDMk]WrSDG[-eSWF`Nm!1cXGp^N#bQ"o%kQ-'E%[B1%Z%YFjT,26^eNh6sT_qPAOm@UcEn]%9`?9''*g@F'[+%n+B?J$7-nd!Uo\SkTP,M?ddV(KAPp\8WlTXf.VPbLu>f^l!D+5O^)D+f8iCA-+S)Lq.7KkrR./N]t\TtHi;B2oc*0#OI1CndMin8%6ZqmFrF3AfrD`A3me'61EL(PZ[*5)BiCAa@7tT8Md_1+o'-47HN8\*XoNV7u4Fo!P?GCT\S$39Hi-YF^G"m\"qMfkEh\]hZZet)8%SdY8k)".&i?Vh>XFH:OI?[CXH9LS/Bp\Mi^W:4$iPhR(1^=P$L%8ORdO7-!c3]r,Pl^+cuEm!/pm(IkQlSO/!5uH(op\L_)\<\@;%LVMG:MVj<Hl5)JDC<1c#dM^,EA/k2J^XTN3$'IE2Hi;AoLBk>MDhM%OjSS^AO*c\teSjqjNqdu"d[,cRGM<UNY@"je:Li6O^Xk.;%<kn/mV=iT8OXlCR?GH.*Ap"p+YkS!jhs*/;I=)-5dR_!2DrefXJm82nEZ\Xq/=kblL?Q="K3ZBnBUI38onrrW8@SF!&ORf"lPG@Y%m&b`S7&:?1js8+%JG8o:R5t"k#i6ZH]mf!tHgQ<d?adJr;=F/cEliPbqJc3*%CYFLk$Gg]KAhGerM9=Q`DracA"M+doh.=,CnQ.R%'(d"s"!Y)(OSAUJDfgm3P_Qj&0.B$/lGp0r0i*]`fgb)Ep\G>R.u1gi:JtG[>Q%%E4Xf1QQS&l\N)&5Yp\L^*L;?LAM"gbB#K2?Q%nn@doV;LPS@uh(AY@!_16uA<2h!:<WL)KAb5Ii/l>Q%HpCBqB$07@m)'?-C8?GH-SJQYUL<*>)P%u41XQ0Gpmh=72/.qMKOY@Tc`%$a*c?`Cq8sko9*QYXM!A=nChIlHNsUf[%3e/h^2J_1a!K-GW!A4OMiamN@+;Y_ed[foLuDo(5f$4S5OrU;LlH@s$<Mk+4YIjb:S2%BCku@?FQJ7pLUP`rhrT\eieM#oks'LjMYACG%/.*?Cnh.i@I`0>^tHW]XBF&Vs?#)$b:k1EVS_5I=4/(?@2Wrr,PWKnGVDEh*4sW%qYS+4MjLb>o5^aVoPsQ.1HY3tYZ[LpI;AjHGrmT1rH^,G>O-D=(GjO2N]AsOfrhg-"`<O9C%g:imAf@dO(MGl9YDI`fIsV?3h=g?%dttX(4%Bt(`_!MH<3t/_MRL*j<PDd@[%1"[@r:DipncGRX=eTY?<3r8e+:V@d-q>WBt<eI]=@2Jha*T&@+^sWIH<Y7]$L8G?rW`I%@hfXB(Q:"Ql1VR"<Rq[2bNm?Zn-V^4O5TZMTC[;>20J6Ej`672adoi*F$+GjHr,c;.rFOkcdL=ukJGL.Pdf/t.%FW1lqdYofNYf^%cUU_b#S&0:FMGNI*e+)_`1gAu:0.'(-9@.T7$8^Do:/K+-QRIpD2Q6oB;$dM<l(;6rmm(5C#SD'nmU(>c4Rm,)qO`U`h0<>Ec5ir%kZa,0NGW0LNR3^Zf7%"S4^R#gINB;RH[3$Y:Rs^eIc(14M_-eEDN!7k=Q?F(b0KYgI%)R&bniPn1V8!\qY#uh0=er3UKZ6BF'@>+%f0?uM^3O!<*d41<[;trd!mL15YTmTXhBiouEr4Bl]ppW^[Tp:kRRT!,Q#1:PIhIdD[E6b6,6#MZS'M$F_A_Pm9ld>]j#;&EbEnid%LY99AmFRE,kI%/(M%6NZJQU<FXn=Jp0IK':/3F+I@-=c`kYcm;*gOYKcca(T#Fb-i@;>7b5<,7RQKgPePLY1a`5K1f9tp4o<!sa!%#l3i"05<a&ZRN^Sef\Ab:#C('%JXYa]H;V;K"TEe1s+di%]=E=/I:sk'G6WK\0'k76ke+@9uuKk_dha"g?o:HAD,PJh<>2D[.8(1%=?a<@29F=NoD$h&FVY(fHnFkd[+Qm(1R],6m<O3Ta4c]"2'n,*;41CW,/T;5=/PdbNodeKEeP*Ge:\h7nu(oBioO(Y=h1o"fA5mk%1NYIuI_1ug'q"pUhAPWtmDJAg_=dKI:qVb?O/H(9o]u=W_i1_RAZu<@WH9(`htD.Ap04p<Rsf'Y)Yf:_o%(k;%ijrUp2'DQI5@I3%aMOfW4FC@c*5@am7`BUc''PAO4FE[*]RS5`"Od"g&8LfXl01-GN'4J(gK->Gd$D_F/`4L7(?SC92L"u1+K1\n$cK"^Lo_t]-DG*g%lO3O^AUgi;I:#EKZh70Y4c*/pat:;#iqM=Y!$W)m/6s'],2.&ZF[M9=])"dY`dA(\@#"Tln&!Ood+iuVDq`cTn1mePGE_rHkGX-7%:0q%i1LR.G615HrK-B&Y\U5Xq_c;I%LAInHKrX?DQ]$'m/f:=4m[6<E+7MOfT7/5A[[<=;N8F``nj,"/non!24]9=c:"42>YbCZ2%UH.#-kjq$o\tF1HgoK8UT<IQV`'Sn0?n-D6E>CUu#dN$U9=X"Z@F99OB0=VWcR5ALk*]t1[Qqim9<?IG8VB+3\1FdbD++:9gs)`G%LOl291U[2!-3O"T#8YUQ'Nn25ScqIP5%rs%2=Eg$O<A\?2q&5A3/qHWc0^ash=W^=PUs<,7,n_(a"IhMQ&N1G)`.Jq.ABm+!aqb,%0t#!,W-s\:Yu):Bcmq%:HH7;YnBr7\?jfkXe1*CX/n#0ZiZ@mj`K_X;D8E2QIlQi(;f8,4MP7m1?$gr1g&eA#f'L(X1Vr#Vgg%^s%VYs<g>_T$:jfrJ`<'Hc+Hs&?o.qNVcHEN,0$9b?h.N6!DR@(F-+YNJ=l(5P>4beOf`eP&C:55ZXJ1WG]osp>`%[[\cFu.MuDq!_i%3ZGPPa<rN\k&K\aSr<_d#A^*)5c)4#9_]bd_0A-OR.(QQ&:\lDX7snBY\&V@a;*VQO.VpK<]O[leE9ia@D-Z%]+?_@Q3F=IY:\%O%3T3GDMCTJE-G7\lfbk[[-1OZj=KpT@ZMuWkZ=(Q7hL.j/J556i&1\"(9(+LNhO$G3R'?J$2#7$3Z_4[e-jQu.1<jZb\A:9nPZ"j_%?(]6#!TM7t/F[o>&aDUlp*:LeNX[okfW%?J3oJ+30j1/>Fd-Lr0iWO&k6f*`"(D',FiY:A=^3SF7hR:,F_XMQP[g,fJ4Xo2DKMe;%D,Km,:7*%a$S_au2`I1[!D$+IX[@Sp@"&r@rieB>2[cl#&QW6'$]3[GnR@kSouh?BKmD;"4Y_j:mU/AXe,fLFccbEIZI%dl2mm`k%i7LhpoE_>C0oPJ\cL+.V3$N&(Y%.GCdd:lKR:YV4^\'9d_)gHL.ENDmKWu^F#tS7#Lb0FDFbkufAIO-]nH.-G8@aZklS2O11=b?3%0j-aC),&4`GA=6Bb&AZ'ln27:]e`bH#U\0Pl[UaV2WAp^c](,2kcC$A+G3t#=1\;RAFTAh0Gi$U6Rf1Yk@-/5*J>:j>)RTQ=J;H,%e>D#TE(1m``7Gcj9DuGcX"?4SX,<t?C_!:actQ1X-@sD;*kiEX+JK+nc03,J(XDZarP=WO;(M,m49R)%B6!%?M>jc*"saL5?lk`m%$n/03*eVLVBpu6q6.lOSLdgR:,b,7(dU&g=11J)V!@ZeUnLQ0Ob-l<NO_f51D\ea9*s05<.s\;=//L:;%Z97-LW.'*FWe9&,kP7U%+1uNH/j!A4O)=fGrK#!n^Q.Nl^gD:J00XWh!k/jd=ork44]&<gN,fKNA"=fN1>kijj>/N/1'E-:B+,gpBj>2Q@K$OV<c!;2JOH#n%R3-9g&(l'FZE9['67HPdZJ1^Akc2GnaprQ%(paScLs9"P0uiSFg(KXU"IDTKD_t,5F6fa3?\_hjHP71sQKC9`2e2PRD<)&Dlu(q.%aS?[ZB8=Yr/fT!&FK3(HrL<PoIdo/Ca;).u4e71;nuEhSWq$&J`u=P6h#9"<."/Kks4F=jLrK#gF-<)2Jh"8_EtQ/63Bqtb`I>AK%\W>nl(N\="bm_<h1lLat2t48*@lZa&Y`lg*DUWN-n4a_tA&aRai#abo7pE/qbRO4@gSSiHCIC)TL:"e';>s7[iN.R)()osqof:aZ%e&rPK3;-bl'59iN3+-EZ\\PDXX41oZn.`t"mL0F;!#mocI!:Sd"c&9\>75XD*5]N_>sPC-ED4]2]a9']r3dM!YiEW>lobeY9$c.=%-GHHN/$E&2!-!c!SXEVkICc_?C1IN\j<%0A=Ci?4$Zq3"i.I`3[K!)*OlVd*T[CKkZ<`[*Y8#kRi*e[BLcJFDmFtbodf%9Xke:M!%!':qfL!ATY!*q0js.>RHlZmZqc?m"_P!A("O(Q(HdV1g&>5A!L;Qd[HVsB\OVfnn8YCE\S]=6=nID"*7^&2?R]RI,r\*)FKoih6l%T#Uq#m%81RV^Si7B8^nEdOH:Y-!S.^S_)[nkKDDX?eXn)YhKkCq5h-=$nH_g\\^aSjn6g8m.!#a@fE2i*rZ":ROEV9?;/Qbh/#e:%BL`:")C;M*R2_a^3T$@9DdO9/<ncuLWBGr2"./Aso&KTEqsj[>J_sc'G/%:K.d_0*eTU-TRt_0Nio1eM'@G@c6U,S<Ou@"AH\JD3%dXp@8'D#9i[RoSaD^K'3WftfDIJ?p5=BILX8ZP)UR$__I=!e\dBD3(Y>0.#Y6pXpU`GMRHhO935Afs)uUkta*ola+onC,Ribb)Uh%o76Gc!`pK!qo]3)DW"-AE<WKu19Td#EJ;:=HQNQ`,ohZ9i'kJI/:(I@-j`=I)(OSI>TDc7ejq7K,@c&mE.pLha,?lh<t7)r+N[Ab%*"QN#AE7--;@7A=/=R'?OKF1eQXo[E3@lt/[<&'n:+DEhqUQlU0+H!lN;./6B,R4W(*Ud^1Fl5p(4mY1fL8)]b3<=@'9N?6]&`%b%#-Ma4Hp#6k)k&>r0<GkV$`?V'I$&+RH]jW!WA!e0jJ9^d6())[s-Wbmq;P@K2O`JM:Cp+_eXXA.Um\2dVntn%g[fGjI_!>b3F6I;%W4ZAAgg%Vl]_$::`BAHQs17'u`mJ=5gs,d?P"\r=C,_,[n]VCh;6bTm&*JQTX"mcIj#Jt%iFKE#qQ2f(KmI_[B,^\;b^b[kjt?Gt%Di#ljfu%a0CEK0c*&#MSID%1o/9Z-`CECL?/WdWsBBZhieE/Nec"f1A$[X/P?`jS@^9>iuT8pY=X=ZBb-Xid(]K(l19k9*]RDj8*%6So3")HG#njZ*FsF<C/;.Hm5VM>>iTY;'d(8l[ZHie`,\2BaoD:=+'0`*^0`7+FL0guu1Y6DHW0IAc&BN^)IAKE[n%=ZUX(Rf7q(%aiA7fY&>9.CD5T.mt6@_`rjVkF39K3?AVioNVUO;Y.C!!9AB>`qu:UaJ?M>F%sW'8f!nc9=]*)@Z+@5GjAeBO<pff2H96ol*ipJm%YD-4NZQB]Y6Yefg`>r2J_RYhsjLg2NWcl/&7`<U74JborZ*RN+I@`kOk\@6(q3IMOl@Q4H>-oWZ(>8)4\lLYu\NUn4'jW8(75.d]%h,uIjq8Tk+7<*B`Q1!cB=,Wl^,("NSEb0A@EOdN"kY>/.KeNn:5&$@K/8f?#f7PUm1VsnR'O>Hg6N:o[0.iQ`QgSt4j/mTKjKQh5%O\4cTWtM7Xmlm*u06.YLkXh9l3'^S.@:qQL:LD6VK5HP*3X-egQurg&`nqH\1%9_UpiVO#6!;Tm?dH<SDiNbe_.+4(MMqjGh2?di%pEC87mS3g1.*&k7"W#m9bX]q[oGTD!j9i5_hk#:9-Bo8k-K).8.>p3jJi"dX@!2':>?o==g$4OY0Yr`kIFb_+3M9#<b+`4Q3:NZ6%]SC[--ngC]UXTNN&t>FD%_S[9?>VJWGSY<(`OPFL/hLWO&aYga_<VXR'/r#<l6>!1*&js?KoF8)O&?3$VPK2$<-iipbk7<g`VaP,%d@E2(kN?l>;6q*F_p$FSA<Bk9k,Cm+N[89\eNqHSPbC1`[Bl8=eB*e@FnJ/J@O.Y!$pp'`(?5VD6I3HiE+JI7,q04SBAn4FLKA\?%k?q4\=.TfK_7^DXb,#k>\md!(95@NfMq5ub;R9IB;9m?26,nWun`@sr'$+0#$Z4C*#[/TW(p4ar5]o=0;eoh8+)SX@ne$HG=GP1Z%D+YZ_Wn%JhjK+k*jp/)B1*[a5$C+JGPDI;=SCSWK(?5T6Q_Lq*);3BBb,%u@KRF"&YB?h:'Od<?*Lid)F[Pl4[q!lbe.(*khMrU-%/P-nea1WL_892q/lu?saVFsSIL?rnua(BcnAOH1$[ptJIK6Q[*ls(]O6h\%!A&Hm`k_AGDDo]lSO)2o*[iO3_F>N]m6>oll5No9X%]i>nmnK7='L#+;L?iEFlWaangU3\Ac^T.0\<cUjD!\>NYCq$"S"f,Cs5U[HAhT%]'YTGdgc]-Lap$[2SVs!;o)Yjn->sGM3?J_o'%o"t[siF?a0e)p>Vr#l(b&*<IZDlZb$2;50IkO8<mOD^'g0DDpGMg:cbJYZSoc]Hjo%jX#X1^g?b&#=pj3A&!@rkJ81DXN/T4jRgg%f@C@.HHC/Ta#!7DAf(aJibQ,8@I;,Tn=%XPr(ZIj:O`9is8OUQC\ab'h01IN"BhA[9Z&KNVO=nU49(U&I1*eIkr6Y6D`iaO$WD25%pFgQ.QR(IPlrC0NjSS#]n%=oMb*f\D1(9>2j]WtfZ:q21U"SKGO?A;G!J9Jo#,N0&5q#K"pH=(*,HnX(c#t*^Q!88L$RdoYj>hnQ%Pt^!mO^]94M=5^9f5rIdo10r*`O?h[3$j`E,u]1q2qWJ9k*A]m`C-<^pdf?U91Ol7@l6DI!Q/KPR6E<ocqHqg0pQY/8?b6$B39*0%nr_q#L;d>/3L5FW%ne-)nI<Ro056mD+U.-3"PqRTI*3iVcmd5D%:l="YsbIGDil*FYqSN7/XsGNfeuQ9\H\9f\jsY5nOY$L*@[SW%Gt;ptT=2uo3PJ-bH+%?o.`W`C`ptra91(&i[V#']3/oVRB(!5kV:[Cu8<jV46Ak)C-EF$&g6C`H\qR+3_`b]/GuRTs>PA1#]LCI`%&Rc7"34`^!Jr)YMYb$N,%G!E]?B.UX7&35kDDFml-1W6X9ZqEi[;Ci:BBeJ#cn*6/o!BoQO#GU/W1_kU7c2Z(rgI\nZjV6`45Ar7%jAYS63RNYQ+U(=IIF$B9RY9gbY/XGTAQZ>*I$;^^k-M3X$5H4OE?%!(V/*G#LXZJV[\;0_?.\,3a"\$l(E)FYXH7&"*nFSM@eu,0%hkN$AAGCg09pnJILM'?fY35%9'aVe1M&asFBLP(:oH+QjhADp\[OX2&;^e\odumV>Zs?5MI@E"J0Q\klF'Pk]/BqbfBeJdMh4^8&%\j6LU%Mtd_R`jd;Yr#XSJ_^Rb`Ngr/1RYUR[NADWO?8bqM@:;*V\IBqkpY"dc,X!#)5Y<?A1TL82DioQB$%?@:EZjP+]Go+E>%oK%A%J%`Lb_sAQ=5,2E@mBOd<3oKmh)Om=q('*<6Cl^8c"B\?`R]n`CG0p7_XX-Rrk$8;/KjT#(9'a:^.2$%$.DkhdS(i+^.101s`Iq%2Dd7fHQCkW51,/rTbNK1\>`sITN?7s?nK^$);2Se7DSUoSk3BepXjg&SScH(\*7\29sZ0%BF4l?%EItk9:Y'H)BIn!V)q5QD,us6%(d:hK:#gP+",-t:e;l":ACM_j,H@3XIMrJ%Vf5?@.O7]!QRp=SF-];Y'q8`J;i79TC0H"&-.6I9.O&1/c.m=r9!D0J6H,?&[7ZbR%dTS\tARhI-1tQ/7L?Y27hW1lbhBN-PA";#HkSfJ";r3rY(M8m(J4AUS^./Brc?dI&15J$nmHXTDgS6PdUTbnLi\W!XZ90I--<2cI%Rl$g``_)Foa`^c4EB"U=lWl7NLqh'mC@HFhC-k1NRj,h+GtZ6/VD^tI2!Ge5iM24ZO%ac#8V\^0"/4qi/%1[>f]^4E7SLeF".2'Q%35S&;@FgNMnc$mD+<\r'*B%XQ9$pq:oqRONT2](%Jr*h*/=MIj^TUim-c;\L-_#:e(iumKqirrX,%(n@9>V:Y5U4X,$DF8WjoPu?%W.*Z16T9FhfT&CA6ZK3dHT2fD%IF:o\-B'"*=!dBb=Y;MUW$g+fqq4bRKt`uO/ch:(o3M_HVepWb-)6b9o!]Ed\rIO_)q`*RCJfL%!q.!pVc]g`$DmuZC)P%mBm%Le@lT\S=i5#9T9P2FK#/c9br7e_H5rSk-#2CiFP8.6K]G*2*TRDSF[tJ%g+N2o*[Q\Z;K3Cb2?EW@%b0b>]I&-cnUq!;A_ujaIht&CkMAg/>+S`ZGV3,LM;K&Fjm(a*Q^_B'5$E5R/<Ot[o7%i1?m:+Xi^_B;FKdn4adp0/H`.B[[.^9Ic%-1j>2XC<0XBQk)H+6ZD=TtS>(&0QaHYeD=aQg&A12_Yui*G-WP6(lPl(.A;;7OD#JFpX"QP>)@LUB@:4JFm+CSmg(#cEV%%YYmGP%J^Cs/(L5_eAI<0h-CUH:&:4[]=_n6:Y%Juq0Ys!(d/kX'XetD%'O)Fn9R!:T,S(.#,,u4<:SndrQ[ti*4.XbUd!maB4NiQV8K4k[%d'uCL'db-UPXVC[$kirc+>_\I[<8R2:.iH"!inW9.0XO!#K4Td!s3n/_*ag6i[+b<"*9"qVuo^FBU,Id^=EmcE*<o86tRp1/i$rH%NTR(48Ob,X>*%mS>)]%g`mT;FJc>hn:Z-]I!0[HHE!l.^#VX*m0WFW,_0mW1;=VBZ3F#hoGTUT?a6eEO%F:k</O8klYta&u$[CRu%!(^mcR#3"pT?X<jpOV>VL4o:1T-.!4'C\1^Ljg00^-lCS?_C9/%g3pFFFa+Z3(tp^I@qa<&+DbZkU9td*sfI:8pDF]7qQ+#"*KXK%V94\SI:.q*_&n=,5gas0K_rPgf?aZ1Nud/h'&3_\l$3?c#Dus$!o+"fZ1K?P%lB9kO::Q@WLYLS%eh7N;tCV2iBCk6"tbW-==)^a%i',MddD=d*:aj'rPQqD[SgD7%+??%]883HNV]>+,CM?:nE1]ah,J\`#fT%2lI@rQ-+pi31qos-a\.9;=.,f+e.@03)YR=$QM#t0t%'IHH]m\>#rXp"JrF=]q4q`piM&J!l!h@*>7q`qK9hiUh@TFTpE:cu[o+l#QoGAI<Jj)?bq!U`Sp#58:)!;@cXPocMWL\kKp6F\+<%Pf*I(0c\8i9b-,G1<+=!<!_@_\5/N195pNsW$]<.PQ[@j38=`?*A/Mj7ko)0&FNI_F9T18dcu,kgo!L,>@K';>WbZ0q`qDD;hFm3%A,\1epC.WA?rMUQ&r"LL-ZQX,'[P52\;se)NWf*-L@]iopT[Uq3Z6]X$H:QshFG8R;5K"l*u1#P$[<b]ioh$37p]qrJG52d@/'kL%+"2\OltUoE3L2&NI2ljR-K'==EJc4I]MAbNWrh4-,d;Ym?p[21pI,^P$g-eZ!o?F=Z>Bp:dqTg'hPYs8#Y6!bQK_"dT;m3LpTmhp%@+Q._5#<)b%.HH\=us,J]T;XFHhd[1A&"]M%IcQE9MN>"5RC%M]T3cEOmkQ]*7ktq5#O4)_#%*"*=;0:c-g_8n"[[Tn/_irS_=1]%&$kMRc4s6.D4h8e+!k7>$[<aA[dONI+"7U%+Q+%B%.T+K!:l$n`;DsI%.a_##EW;k+bT\Z.i=Wig)<5*A;K@2E[m9j)2.oYnU(Z6%,AV-hJGaNMq?#`u:9lDWntVRS\cDPG0O([[q4lMH/]QcP"5!#Kr&$StIW<q`6^e<B(Z@6M&tkoF:X(SK;*Y9c"c^J>^;ku/6SZ74%PM*fcGh7N2;5./6jh+,?Fj7q])8IVpKP1ctT'ar_TN,]GL;Q(&7j0)k*6or?[Vm;mLO;@\n)4[,V/gQF$8#*V+&&:^Sm*DQ7JiF3%@PU3<+tZ&+R%'.G,LI?3Ai+&(B$rUMfO,@A<n?M_b#h9P&m.PVcPVJt7V3;fK-cDMR<HAD7`,O7b/jW.67<B2B9s@R.](OH-_]O'%?>,a]W?(C4d]e_,f6*!!%K+"-:.1I#e!Gr5nXE?$Qb0)eg:Aq9Cu=?X"Z4_W@Rc;L6"'gJSIfEhNX%EOH6m6&J34:uVFk(Xc[a$J%7a7<o'MfYc<U.p5L]S<UW*i.i(OfjZ144FZ%&jmb^m?4?mX\Y0BbWoIMJ_>YjQM\%a<Q7&GcZNDD<XA:K1LO74B3(_)Ls_^jof02%da6*l2a(U1&rNG?57tkr,)'OJON&uM!U_M&3=?Ed&dk$-gq8Fd#u,JWC,\uu8Ld/JP-AVY'mFbW1HC7:1nAAN"sS2om2=?I+HfQW%`)7hP_aqWnb?ui[#U=JjMF@gc7Zot)%@s4%%O2;)2;!dCKoq$t]6p:a@AJp!T+j&$(o`/,a7'ChO[.<R&4Hr@3J\A?'LP44$r^"/%WIqn/:`Y=Q:i0YY#S7Uo#MIA\+X+?VXoS_<&pU3.<'\n4`c?G-64sXm7fbr.E1$cX,elp!HiZKqrm>h"OE1C.1`*t:#E[SrQ72f)%TX_.8a:f3^T/*#?8>(4O)*e3JTpVuP5p$>n+?#JW'L!G.bWT_?;d]m*Aoh;ZK9%]59N)a+J]!KK=:-,V"UD_k*^R5_T4UO>,GCL5%#Ta-Na,U0LKT6*?"X_;M5`WL!!B:9`%"Mj7MuXIpN>6sgZ:%bl=dJ.U^_*!Z2AL2hLcoI`!cS8K0\M=:[5:0e>dc90OX$QfR]D4b%&`h9b"\=G)C'YrEMmhT&WF1Ol^&T-qf[o%b&oc@Je)CbNO\g.jm:)a(;5>mk$V1;;eA48PW(N_u;$WKKZQ1J'39l$47GJ/kU-ctA%,H8/G3A_0MNhArp[Rl2t8'ji)8)L)_O\d%TU<8`G7i85&95,)#!lmHjBj=&d3][u=)PA$k!DsALrhRUIL7HLh,q3kf0"8AUO<I+2%@<@N<a:T[dGO9b`*CEGT*CUkMO-#Ld;8>W:,=n$];h3!+,M(YIOGe]\PT@3&949!b$<sLkfFdegX!AnYN1ih5:105BfV1%>NmJ(Z%6`(PZJr#i+YZQjTV_cQ=^nVB?&mGX=i)+^9i[B'$@<W._QlJ3i9k+U/i).OMq%,W>n5p+FF6oh-%kT.N@RlM?_kEVd@3J1=B+$te%%0VZm^BLTYRgBc4O1N5Ab7Hl&`)JZ)^)I%W2)mePiXa"h,)$-?O;9$2O[^L)Qog(b@3%ZG):k%)aKRNA*enMA6)4u@;&g_L<6R\e%+;4H`n?lg3,(\l2j?c-X%V(,h.#<Q%EbTM56\99e(0f_WP$iVTb6ThuC>IF7"s5X5p&#RC3^e!Gk!(S.0o9"b#4.slhKodGa?[#_%p&S8QL#4p1VK?7s0HA_(Pn+X;JRE1c7*sFA%)?D^Y[e-F_4%ZHM5amjNpT6>J>3=M`&%>RJiNq:R9Z;6EtA,8:oL[S`B%+M'e!*Z%aadobqJ.K7+cS`6I#AkEA0QWA!Yj7+f]!`m)B^74\rqXh(JOu>FI7mfPHkTZ'fMoPQKdni>/46qkXRBu+\sX.0G1!4"57AY&>r@e%\fN8[0U9gU9ThKIkCGr6O+e:/chq;T0K$FRk>:OPP6C/0!Z;S<LD7`AqAuD/ehol/&NrC[5d<.(Am??A?UU2p1%GLbVkN1fAj:C,%Y_(b#)D%:;Zrof'e,H#s!g#6k/OWcY^*,=b1(C&<jqj\pnZ+Gd*AEdXBSY5V_(nPL1ckf/N^in5F-m?N@[8J8X_'Po;M[@b1947q%ZG>-5&d5@X;TMg4+ZoqIB>FLBK+`-7KM%1m'qYtlPZHLG1D7)/YSCt;*S6%NXV?HmbNG*7NZk8,\41Kod0q84eLX>/-(PtJ#r,EC%=ED!NZ!Oa3U`<4JZ)2\_1R@`mU=g,d[?!XL13ID46#Sb;U!`fC2B?m8'0n?RGU!3$>ce3G6+<d@^?*/IF.b2-1dd?Kf[_\4@0pPL%D^.i%OcP'\*%SgcTWWpP72p:o]1J:##V(ZOO`NDNe0>KG:c;DWIac)P!Y9o:poGFKE$7)_kcXGa'+M`ISIA'AC@MKR]'2O/6P?i,%_K$N?r,lt6OV.!VCaiFEaeXuT*>]k-Uu4Eu=K0/sgk9(ORO]NmX4n!gj;id3[QoFE<=;bAk!IpZFTeqHYoq['6s]q+"Nq(H1'C+b%l!5ut/QuH45RP5<%1Gd@P)%UJ/0pW;'+pB:P<F0%2=T`@!r=rE!haen2'J.0eA,<sN,(V"mc)XpGXi$jRAs(&oK$_.oi=D-EI0/Y%=C>K&RlE_./5U<4DG#M?_*gF1B0a3D!\mTCOF*K_?31Uh"Vmj'W<H";Z&jJI),'PJE;*L6YVm%[!1iLkZo6uN'F+mqJ/0#9WqdRf%cNgS\#sWg3i!iL%S1c)&#)kuW$:oibQA$4*I9=hu]&VirJldlQ+s63J+f=;I.c>K^2j?8BT29J/12m?i$>VhZ]HP<4J]\oaN!=!P%SSs$5']e7M(ICq0p5K*_*_;kg%,>76J?I9;;^;oQfV:)S&o#'lA&a8D"OMaO![Uu5D6$<RP<j$chgloFTb*4pU.E)e)ic(25UgX\%7n<\C3p9s:-R-W^"qr41#Os&L<V/laam]T:LXg;`4>3K2\C)Q6R!2(Hl*.CH]1]s=%/?Q?;D$U@Ct9NP*t8,be:E0W$oB7m$GJ3Z%)'g<SrsRTF^mBlB$.^Q_J4)6pW%cRtN^7e_T[R;\V/6Tn=q5`Z8nh[PQrJEAFHN?'rRj4_h;BK-%5(87<TmT$eV(a1Sk^;g+bB9S%DR,TW$-"UM)`I.S1>I;no!#5/_[JA@H(Yrh2FuhNER5pu*qHO>O`mKm>plFB*bnePVu\+K*Yq9VZ,d?GBd7Gi%A=-9BGfjl*E`;.%c/MTk$_-WnIk;5Y=q:q4gO,'r'Td8W*qnjWihtp;`uSc-;lR*Gf:akF(,9Hs",<Jfp]?B%:cXKQi<8_3`O8VHC&!!'&BG]@(4n_<%l#mZ:^c"]D%13aQ"X+Gaiij<;6+0V/#V*kaPR4G/2(3,`bXJbZcaRbgV[R+Fpm\p*YWYiG"aD7TaqPlW"ZEaIVL5>37ba]c\HT#E%%R8T1Mp$sMa)1#qJRF+O&RSumYk(/p27?6cM@9Y0<Xj/N9lRs:!Q(CkTZ9=]*%%qAP(GCh^eW6dY\OttRg3Y$%,$.n4H^DGKRcF&%$[p+_?rH`,59B;Pd&CPX+p%TUFOEJL+m_;04Zkd[nf.4_Y1'4b+Q1\UcJ@uo;j-EBnD/GYKEbCpKaFKI@I4q`M@YS2ON+0@*-=q@%Oe]OkTjT]:?o+d!;Vi=r,QhMVq$(=e("7[uVB5FD,7tV"Ng-D/E^@Ns)4NU$L..Rk>@9(bE[G'qa6NQG'E]Eh1f6d1@WI6j_r<P,%,WN3\9Je6t(fLOud"PYfJ"IGY.fn#%(^?_@D5\$u>DjufE@`SK^!QCppb[T[E;IAJiAWZYK^XlAqUR6^7Il/p[r*)UCLDVo`KgpO%TP02d:38Dj4Tc?;#b#:V'BD\0=Z4-R/nKCeJlID48S5JMHIT,Mf\o*%,XWP"RUh6g<Q$5AckH_R/_T,KYp<gaTENiU6pn;Ejs8[@%5]INk*,?j'jB-KF,ffU-2E>eD1<M&D7&rH2B5!T0Y)@H`m245)a6lkWF5"a1Bo[cff]H.8AE+YCQ=QNg`KAAcM8JV#J]8+?RZhEY%7tn8b,I#rmLK8_YOcD"0X`S*6A>T_c%.&(HZt-*;`Ki&tT]h94%c->@[Q75)a]OlXbZYfrbZq&+M=rurV\nc&/'26:"r!KGKHV/U%Fhe/d1tmN=LfQSELgmdpc&h:8TNIB9/lA"t0%&$fa.+F04kb1hQjt-tp!,]@Dh;^=e8=.B#X'A;iLNh_G[7d&7Qf%./"TipMAZp=%eW/6I*Lh(!?*WIAU71YkdSt%.*Clu?bR9ZNRLa,fS-Opfcg)u5Z9]#oPV%3Sa<j'W:UTG<0="HYlaC9Ql`^@7S+T%0m<YGHL:ohY%/:35.VS/"*6DA<mo9PA_TLm]t&7kARCT5t\ckb<M#E!'N@ri@u+)%s>%i!^<#E!9X,;UW%+"3;CO*r,iqEU2pIHW]Ee-CkGl_>Fl%`]d40CL<eiF'kRpH_9FG)Z3^/@dsOp1AQ("9156k#EWEe!s`A;+,?b%p*80']-"O5)udosamqrZ@ep1$[f++8j2O;]AEt=.ZMBPj%+kclD3=5aOq2u9h8tcLk:f(^3T]<0\&Hq<>1P:2Z,RT/)!\M1g&e0DBO?5l464Gmg&8K=k!,[Pu#-bcJ)F1H]Du^b'i;r#B!XS!l%&J5';\HE559"Pk6aN";g>ja*t:ekuQ%t(-.P&$!5ptXq&rh\".JY>(9:gdtF!XaH%K*%^ETYSo*)&*':"pK`n7R2Nu)%%blM@9iJ%IZ&^XTZNi,-o*2)1bAb9J0omMTZEckTELoQU=&?.R$.d_J>.VsXH`nqYiZQH_"K4M!4a5'!m2r('SQAm5lp)Y#RY7cLnFa[:B:X+%P=8;uJfoRF.P*>'!1F<'J0KUIM8DN/5\$I;js5P1W,U<s"?'A^euT-*^m9nO!1>'_!eH%+-pU6pTE$Aq-if,3$D8>L:]M1I'M&oB%$3V7L"Z.S='OZ1n.)9"XTKj>fCmG`h>VHrq(F2fW":5d8J1.&jBJLt9M@9h;$K(2!dL[+#:(et2G$Zbt6cT<:S7!Ks:p#>\%K/%W%\.fjq1GU@t]I50N1^+RQXpPLA,m"Dn7g0'VXb$U:;*k9ei*_a7!Cg`qTHL%`THKm2TE'@`1+9q?Fp/SAH7GT'EE#cm\5?)\GUb+\%Hkd?'`.JI*+Ik_%"gA)""pH.r"9g!/Jc^c)O?ip0XagHYW/s7F``u'-!,AKb!lnA.!U^p?6%S&d5lmZ.TYU(t:uM+G:]S_(6%S&F%TYPOlTR`,7:uF;_-ub\)-u`u;'Yn18$joB0#6c91K*'7g!X2Dl$47bC!<nLaJcZcS.OZDZ:d>$i:D"9@f2PT)paR\2Hkd=q70NjJ%VLX8kk5nH['Eo11^'Y34/7_QWP,!U1O=qIcJ.tVK!!H:&"h6Kd!X0_'1+3\_*#+(5&/9pW$4=Z*)(5c+&:fA:Q5gTH9-d=6m8ZFQ%E('g3^c32G!-_F>J7D"L"jlEf.#9;=>)XXIa.X9Q?^$'C-NF;[#6jlZr5Rlrn==QMK&Fj;!>N?&@koH_o>tN>?oq4^!9[TZTHH4;%0ei@\kUdM`i5o%5."G6kA5HYQ;,CX>.O_M1'bo;H'GM+I!X`aL"U-%q"9g!/)S;B#":>D\!X`a2"U2?.Jc]VX$4;:k1+5C_8Y@3a%VZ7'clOkV]NfcR-FIrmIY`gA0!.l>F!YcCR'Yp,T1+9p_"sm(g;E-'1BcIgp:(et2#\P_Y?is5UVlD5>!*V"+!aq#s$:5M_TE#f\%K*""h:^.)V&ci03)\l17-jh@6.3'%T1_'jH-OCJPGq(4m>03E[*),/E%u4Bq$K0i)#o(08UCnsT!Du.6mAQ\nG#V9\;E-'9BbV7H%:,45RFC$Pr6cT99\.@^r:p#>\%K%uTYGNh_1NKiMXP>4s!,+,90OVji!X1hd6%NHj$7IT%<riIi;*b4#`!RmmM@9gp8cT2b)@$F2%O[0#4Vh+uKV[No_,(fr1T*bpU0/=q0E(N\*"iR-35lm'X:]M1I'F9p''M(%`"[J29!R4gQ"U6T5$(q8(1+9qA.\Hdq,(fri8>#sP%X+18Eae/V^1+4h-4TYtPR1^nJM?F9j%qJK:,RG/MccMg[-n6W13Kuc0:h3BF;&C\mBFGU%S4$2(jXHi&BG)_DHHVr]#ESuoJ-.PT%^u6_m!p#dO$@o`D-pW5STE$DJ-if\E$GrCpTE$Dr-noVN>6G*X((r#\a\b;(b*N5<:^TWfJ:]8'![,UX!6&.D"VQN?!eD,;!f;Z)%5ffLJ!hff<'F;*WTRaI="9mFa"V`(\6r8DmP<].h<riJHXGEMLqcj1+;5IQV;<6a;"YMb'9qAnln/Ip\>Z^jCk9bE.TYQUk.I\Q4%"b(!Y^lMVInC<d*5I+2Fa/g!MOd,u4Z;TW$X;(GlPla1U;W,Ts'_mfU!^Etgi5_o5plUgC5I+2Fa/g!MOd,u4Z;TW$X;(GlPla1U%;W,Ts'_mfU!^Etgi5_o5plUgC?WeiI@o`s7a@_"*=XiiM<XScG8qA'e.>S7B/Oj+M:uKBq'_prcJKJ#Dn7,K+r5_K]+'C&^@o`s7%a@_"*=XiiM<XScG8qA'e.I^hJ$N.t;JKJ#Dn7,K+I!):$='#b,R$@_;Z;TUN<XSblPla1U;W(&G$6l$BMs8SCJH@2!"bCD'e8=E9%E<K+rN"$K20qc=AJ-%)"$Chr0i']h]'*/83$n-'=TYQD7![e0d3"]!F6pQ;:!t(P(-u^B'^ki'qD?LZ`&Q%CT6%KsU"`=GW\1sYl%NIV'h!Xd^":uJ@H^l<jG2[0u+&Q%DcTYQNf"`=GW\.MQq`de+L!X`0I'KArdi2E<aM1>XT"r'$/:uF`,JJ/+mS-UN^,+u`.!<nJj%$ChAME+2(`)Z^,F!Xd^":uFf.JK"UnD@@q4,G;i3J-%Y:$JYn8E$M$kN<'3#";J?q-ubrS^l<jG2Za?A(f9/1J-%Y2$=";[\5?)\%7R2MD!<m?L-u`0_i'ot_)ZpH&#UjX:THKu9CGC]o%%tBmpf8LN-ZO==%%ECKC&!\4:#S0D!X5H476lE<R0k>BM@9iBU4NF[S1#R0%!.kUd9E`$a-nkteP!K+FA5HZcj%KIW-:T&4TE$Aq-nrI\V18W?ae/V^1+3\^!@X%CoG.eX8H]2^;*b668cf0.(bNNg!Obc)"ipiR%'MqP]THN<.#RW!378Q627K`nII0qBqSLf?o'EeFN:goJP!RP@R!#-:b8/)78"<%@G1a`kL7"qr_,Hr.%5V#i2J1VR'!A[.H"Tf&6%:k4Lj5QO\l:]M1E'L4V"TE$Aq.$,hc'F6N"$><0Y.)>Bf:k5s:5_1VVfISBY\R7#m/kDW8#SJON!Du)_ct#rQ'H%TU'RmNY84-4(%3D#kdg3L)n%NQ'.i'*Me6+%'b2XnnC^7)4ocH(29lI"ud5a+KbWN4d/J>.Vs;cgF=RC]tX#Uh/N0QhO8&5Zn6+A`,9&CNNd0QhO8%OJtaZ%m`?i:]M1I'L;Op:]Pm*6%Q#9gP8HIZ@*!L1+3-[$jm,0!"'tiJc_UdTRc/VK*'Lu[LWC)"pJ+%"Va4+A5E7?#o$cg'i4le%)&/IL\pXi4.O[Po8tZ/4&h#I,aS$c"8Y?'0:'Lke;*fc4X4rD[,(frR_E`Z;A"\A7,_?(K:B:WrY&#23HHVr]#ESuoJ-.PT^u6_m%!p#dO$@o`D-pW5STE$DJ-if\E$GrCpTE$Dr-noddq[eX=":@tG'Ms>N-%Q,^64jp)TZWo-82;SYnWlFk6t)`RTEUuRU*1orEi5Qq%Vu[,,67j''TIgaA!Oc&1"iqDj'HlE]:k7>$5QMlU+t15jQU!i9C"Hf.q)CV?.W^sj/=jDKn/Ip\i+_tGcV;5;irTDJZVs,?DlKB0%*3M%F!0=/f$G\#<JHF_.5lmROXagKBP09Kuf)R'm!6<$VTE%+K1+7ZOCh-B#q,'rg8"[kq!&!Gr5s\$J6%MS%`\-C!JH@h06j3`j%.iB&rRL0CpI4?WNf+U+l5YanD+Q0-t$BXQd.):k*5QPu!$4=#$,u=Sn+G'[PNe.=O"3[@Q[oH6I;E-'1BcIgp:(et2#\P_Y?is6`%Ro*"4DK6='!-;[I&@*tm"hq-k!af"pJZhR0!A"r,TYT/Y:`rXq-jXN,'OXZK..HmX..D?o'SM*qcZ8!+$g0k6<'Z"Q.\HbE6j3aI%VLS_7;*]\'iLiH3;,@6Qae0d)H*s"L*>9i/5+"8p[0l1WoZIBOR]c/*aIiP-A1O;QG"KlM!-V8`TE*<E;*Y0;%juu2\A1lE"b[Kh%"`SL@$jm8/!<jVm"9efX!!R>EOUMR:1C=KY";V:X30jmYi35K^'KD*[$?."P!X5e8Tn!3b;aCF8WQ:_TUkGC+Uesqg%VQ^o@,;5=%E'+:<J1k+2"caB&"cfX8!ln;+!="]8TE(:,A5M3o.O]g<!#61J1M'BJ-o*3$5#=KFScC!e!f/@h5lmLHUOiQ[85]KmE/UJ"$:G4+%"X/kX!mF4;"]1ct$Lh.H&JW%JMD?T1!Mk;K#^2=r!=Va9'KAi%'L9<_$jqOB1+3-[$47bS"U.3<"eYiD$7I#B"V`r!$48I27f`c1%QR%+`%&"4u!=5\,$6[\`"pH.+1+3\_*#+(5&/9pW$4=Z*)(5c+&:fA:Q5gTH9-d=6m8ZFQE('g3^c32G!-_F>J7D"L"W6_SJV&^+%Y/Mg[0n9>Ki*1d%RP5'Ui#Bs4s0oE5fkhZ5K)klRH&#XP/.bC;'-2:J(+<!epX"7qG`D%k9sV!U?1dNb),fNS,PPa)MJ4V?,k^=J%;C;FQrMs1mg1N<16,IC0L4Y)dklh6I$^4'p+E8*kEN^cUTI<@$j/j_#=M7j6OLUm+6p\[hBgY2GRg0N/8/)5AlrPT#VC4^(-jWC5%JRnQm1qBH=![Nd-Q:au8g=lZ4"f\Y4hb_*l&/=2oMC<02fhdcG4ea&X9LJoNcVT]B3MM$E+eTs%(.A6Z70+#iJKtC&+Y+t^>Dah2%GL#66%_JA6Hg)s:SjsL!EWcQ>$7cHcd=MEFM?5&`!]6[H!/[F8P(J:I'bo^\7257g$jA2ITHG4JjXM&V\U#hq/I2[p#R]3M$jF]d%"\9=2Oq\U$7MKf7JqA.**Nq<`2CM\!_7YG"CH1/$k;)F-bp@c"<YXInUE'NZ'EtK-ksMFS:EN3":EST"FpeY=3!rRHdta#5$:7Wf%d'<fY8/)7&5">XrW@1<.:EN3bHMS3<78].mT0>+#S"ftGU&^%E+=%[*P3!EBH_3Kd\#h&D-7D-P-t"J5"kXV[!>7[!GLoZA9Mp=.%;1QS^^rd?*+;#<l%28u%"9kdrksIu]"mh"r![NX)8I>ek<`"me'N)[71DCrF'VO6=!ZjU]K%0\i+Wd3U"fsRK!GY\5_"nf\0JO7a%;\ZU)>>W+';36*r5/_=^-t(@U'X3&n$J5_2$J82j"c*irm,!<q8I>ek<`'tW;%U1-;%Q@(THKK)THN\p6im&6:r$7k-t("#$<Xop%JpaXf'X5gc"m_BGn]H]9$P]fb\0d0I!Is+t=RVS,&l3oJ?d#jVIV'f=N5NO?"_0b7$BQYCO>mS:XF1^YJ3ZscT8HYt)#M"?!/[FX%jJ!oW!b@1?O_^%H'[6=L.hj+)'Hg6eKVY>-1>_B[/O^?rE>5WVJc_6C:r*#c'X/>U"hCKS$<hj9']`GY.*)i2;8D<M']_`D-t#ON%.*.rJ;1M>;J4*6W8O5Y`$4??i+punlo6@+L/h"MA3XWC[&I#6U5s_HdM?6hcTE'hC!/[HNc)<$UU*u,!THIbK"aN`Q"oLPO!D=^e%#R=;=b(W3c?40U<JcZ(,!d5,B!A[(E&k.?s"U1&$"l,96@,6(J.h0'%$Hb/lQZ-[KVq^oMVEV&kK[8G4!fYno$F&*fU1!7+"aKLS%;8>%GjKGe.K;&>JS;mZP:Tl1^MAhA(Q8B<*XJ,]qcRT?oVDS^X#=ef$p/2Suh&6H<]bh)9Ua7G)q_<g,N-Ql[VW9.=8OGef1(*NR%NM:sX2AC*Y/><+h@>Y,NdSV\-NWP0!#n!oKNe08I'MO.SJ4"mB!`Z%k!:+&$$IB!3!Xqm4$Lf71U0p_s-pU!r'OVJX;%Sop"YEqT%^b#j"n9p;uN3s!"n0Xd%!!eU\!&&(9$?15Z'VO"s"W2,X'MO.S!/[IY)B8pgjXLV!(^`7X/LWln:_]Sc3""$I'F!]SJc^$n6bs`[%$IHI$"Yj.Vd'ACXQt6u=XVV\Y&l]RP;D'BUSd5\-^Q&BFMP'qaV^Ogt3XU,5#R\r@MLsAMqfq3jT'o'bGhMHjKu.OAK3Ae,GC%@q%Mt;a/$=*UX0!W.0,&MbFK4=Q?q%>gI:[kuN]Y8c^De&Z!0Dh>[WTNdaS@Z6Nhs.!0[E^9A]lg$WN=1(.AO1TM?WLn\p:0S3H">7Y%"6OS%O;FZc=>"WAS2P*g%WZ#Uh>E5oTds%H-<pq(?cK99M5J2r78KQmk;',&>,TVMg$#OiZ#N&_^FZ=j"I;[8B3(aXVapa&J-Eao%S4`<mFgrkhqW7I`h/Aq+D]`?dqJu@N3e-pD\(gk,GWpO=+9)(b3o<)-%f`*f&$N0Tmt^Yd^[qK\5G(`<pUBbYrpog<s%):5/:YCg%IJi-Sh+p/C)6s~>%AI9_PrivateDataEnd